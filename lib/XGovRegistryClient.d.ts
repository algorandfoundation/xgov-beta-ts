/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface';
import { ABIReturn } from '@algorandfoundation/algokit-utils/types/app';
import { Arc56Contract } from '@algorandfoundation/algokit-utils/types/app-arc56';
import { AppClient as _AppClient, AppClientMethodCallParams, AppClientParams, AppClientBareCallParams, CallOnComplete, AppClientCompilationParams, ResolveAppClientByCreatorAndName, ResolveAppClientByNetwork, CloneAppClientParams } from '@algorandfoundation/algokit-utils/types/app-client';
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory';
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer';
import { SendParams, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction';
import { modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk';
import SimulateResponse = modelsv2.SimulateResponse;
export declare const APP_SPEC: Arc56Contract;
/**
 * A state record containing binary data
 */
export interface BinaryState {
    /**
     * Gets the state value as a Uint8Array
     */
    asByteArray(): Uint8Array | undefined;
    /**
     * Gets the state value as a string
     */
    asString(): string | undefined;
}
/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R ? (...args: Expand<A>) => Expand<R> : T extends infer O ? {
    [K in keyof O]: O[K];
} : never;
export type XGovRegistryConfig = {
    xgovFee: bigint;
    proposerFee: bigint;
    openProposalFee: bigint;
    daemonOpsFundingBps: bigint;
    proposalCommitmentBps: bigint;
    minRequestedAmount: bigint;
    maxRequestedAmount: [bigint, bigint, bigint];
    discussionDuration: [bigint, bigint, bigint, bigint];
    votingDuration: [bigint, bigint, bigint, bigint];
    quorum: [bigint, bigint, bigint];
    weightedQuorum: [bigint, bigint, bigint];
};
/**
 * Converts the ABI tuple representation of a XGovRegistryConfig to the struct representation
 */
export declare function XGovRegistryConfigFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, bigint, [bigint, bigint, bigint], [bigint, bigint, bigint, bigint], [bigint, bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint]]): XGovRegistryConfig;
export type TypedGlobalState = {
    pausedRegistry: boolean;
    pausedProposals: boolean;
    xgovManager: string;
    xgovPayor: string;
    xgovCouncil: string;
    xgovSubscriber: string;
    kycProvider: string;
    committeeManager: string;
    xgovDaemon: string;
    xgovFee: bigint;
    proposerFee: bigint;
    openProposalFee: bigint;
    daemonOpsFundingBps: bigint;
    proposalCommitmentBps: bigint;
    minRequestedAmount: bigint;
    maxRequestedAmount: [bigint, bigint, bigint];
    discussionDuration: [bigint, bigint, bigint, bigint];
    votingDuration: [bigint, bigint, bigint, bigint];
    quorum: [bigint, bigint, bigint];
    weightedQuorum: [bigint, bigint, bigint];
    outstandingFunds: bigint;
    pendingProposals: bigint;
    committeeId: Uint8Array;
    committeeMembers: bigint;
    committeeVotes: bigint;
};
/**
 * Converts the ABI tuple representation of a TypedGlobalState to the struct representation
 */
export declare function TypedGlobalStateFromTuple(abiTuple: [boolean, boolean, string, string, string, string, string, string, string, bigint, bigint, bigint, bigint, bigint, bigint, [bigint, bigint, bigint], [bigint, bigint, bigint, bigint], [bigint, bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], bigint, bigint, Uint8Array, bigint, bigint]): TypedGlobalState;
export type XGovBoxValue = {
    votingAddress: string;
    votedProposals: bigint;
    lastVoteTimestamp: bigint;
    subscriptionRound: bigint;
};
/**
 * Converts the ABI tuple representation of a XGovBoxValue to the struct representation
 */
export declare function XGovBoxValueFromTuple(abiTuple: [string, bigint, bigint, bigint]): XGovBoxValue;
export type ProposerBoxValue = {
    activeProposal: boolean;
    kycStatus: boolean;
    kycExpiring: bigint;
};
/**
 * Converts the ABI tuple representation of a ProposerBoxValue to the struct representation
 */
export declare function ProposerBoxValueFromTuple(abiTuple: [boolean, boolean, bigint]): ProposerBoxValue;
/**
 * The argument types for the XGovRegistry contract
 */
export type XGovRegistryArgs = {
    /**
     * The object representation of the arguments for each method
     */
    obj: {
        'create()void': Record<string, never>;
        'pause_registry()void': Record<string, never>;
        'pause_proposals()void': Record<string, never>;
        'resume_registry()void': Record<string, never>;
        'resume_proposals()void': Record<string, never>;
        'set_xgov_manager(address)void': {
            /**
             * Address of the new xGov Manager
             */
            manager: string;
        };
        'set_payor(address)void': {
            /**
             * Address of the new xGov Payor
             */
            payor: string;
        };
        'set_xgov_council(address)void': {
            /**
             * Address of the new xGov Council
             */
            council: string;
        };
        'set_xgov_subscriber(address)void': {
            /**
             * Address of the new xGov Subscriber
             */
            subscriber: string;
        };
        'set_kyc_provider(address)void': {
            /**
             * Address of the new KYC Provider
             */
            provider: string;
        };
        'set_committee_manager(address)void': {
            /**
             * Address of the new xGov Manager
             */
            manager: string;
        };
        'set_xgov_daemon(address)void': {
            /**
             * Address of the new xGov Daemon
             */
            xgovDaemon: string;
        };
        'config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void': {
            /**
             * Configuration class containing the field data
             */
            config: XGovRegistryConfig;
        };
        'update_xgov_registry()void': Record<string, never>;
        'subscribe_xgov(address,pay)void': {
            /**
             * The address of the voting account for the xGov
             */
            votingAddress: string;
            /**
             * The payment transaction covering the xGov fee
             */
            payment: AppMethodCallTransactionArgument;
        };
        'unsubscribe_xgov(address)void': {
            /**
             * The address of the xGov to unsubscribe
             */
            xgovAddress: string;
        };
        'request_subscribe_xgov(address,address,uint64,pay)void': {
            /**
             * The address of the xGov
             */
            xgovAddress: string;
            /**
             * The address of the xGov Address owner/controller (Voting Address)
             */
            ownerAddress: string;
            /**
             * The type of relationship enum
             */
            relationType: bigint | number;
            /**
             * The payment transaction covering the xGov fee
             */
            payment: AppMethodCallTransactionArgument;
        };
        'approve_subscribe_xgov(uint64)void': {
            /**
             * The ID of the request to approve
             */
            requestId: bigint | number;
        };
        'reject_subscribe_xgov(uint64)void': {
            /**
             * The ID of the request to reject
             */
            requestId: bigint | number;
        };
        'set_voting_account(address,address)void': {
            /**
             * The xGov address delegating voting power
             */
            xgovAddress: string;
            /**
             * The voting account address to delegate voting power to
             */
            votingAddress: string;
        };
        'subscribe_proposer(pay)void': {
            /**
             * The payment transaction covering the Proposer fee
             */
            payment: AppMethodCallTransactionArgument;
        };
        'set_proposer_kyc(address,bool,uint64)void': {
            /**
             * The address of the Proposer
             */
            proposer: string;
            /**
             * The new status of the Proposer
             */
            kycStatus: boolean;
            /**
             * The expiration date as a unix timestamp of the time the KYC expires
             */
            kycExpiring: bigint | number;
        };
        'declare_committee(byte[32],uint64,uint64)void': {
            /**
             * The ID of the xGov Committee
             */
            committeeId: Uint8Array;
            /**
             * The size of the xGov Committee
             */
            size: bigint | number;
            /**
             * The voting power of the xGov Committee
             */
            votes: bigint | number;
        };
        'open_proposal(pay)uint64': {
            /**
             * payment for covering the proposal fee (includes child contract MBR)
             */
            payment: AppMethodCallTransactionArgument;
        };
        'vote_proposal(uint64,address,uint64,uint64)void': {
            /**
             * The application ID of the Proposal app being voted on
             */
            proposalId: bigint | number;
            /**
             * (arc4.Address): The address of the xGov being voted on behalf of
             */
            xgovAddress: string;
            /**
             * (arc4.UInt64): The number of approvals votes allocated
             */
            approvalVotes: bigint | number;
            /**
             * (arc4.UInt64): The number of rejections votes allocated
             */
            rejectionVotes: bigint | number;
        };
        'pay_grant_proposal(uint64)void': {
            /**
             * The application ID of the approved Proposal
             */
            proposalId: bigint | number;
        };
        'finalize_proposal(uint64)void': {
            /**
             * The application ID of the Proposal app to finalize
             */
            proposalId: bigint | number;
        };
        'drop_proposal(uint64)void': {
            /**
             * The application ID of the Proposal app to drop
             */
            proposalId: bigint | number;
        };
        'deposit_funds(pay)void': {
            /**
             * the deposit transaction
             */
            payment: AppMethodCallTransactionArgument;
        };
        'withdraw_funds(uint64)void': {
            /**
             * the amount to remove
             */
            amount: bigint | number;
        };
        'withdraw_balance()void': Record<string, never>;
        'get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)': Record<string, never>;
        'get_xgov_box(address)(address,uint64,uint64,uint64)': {
            /**
             * The address of the xGov
             */
            xgovAddress: string;
        };
        'get_proposer_box(address)(bool,bool,uint64)': {
            /**
             * The address of the Proposer
             */
            proposerAddress: string;
        };
        'is_proposal(uint64)void': {
            proposalId: bigint | number;
        };
    };
    /**
     * The tuple representation of the arguments for each method
     */
    tuple: {
        'create()void': [];
        'pause_registry()void': [];
        'pause_proposals()void': [];
        'resume_registry()void': [];
        'resume_proposals()void': [];
        'set_xgov_manager(address)void': [manager: string];
        'set_payor(address)void': [payor: string];
        'set_xgov_council(address)void': [council: string];
        'set_xgov_subscriber(address)void': [subscriber: string];
        'set_kyc_provider(address)void': [provider: string];
        'set_committee_manager(address)void': [manager: string];
        'set_xgov_daemon(address)void': [xgovDaemon: string];
        'config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void': [config: XGovRegistryConfig];
        'update_xgov_registry()void': [];
        'subscribe_xgov(address,pay)void': [votingAddress: string, payment: AppMethodCallTransactionArgument];
        'unsubscribe_xgov(address)void': [xgovAddress: string];
        'request_subscribe_xgov(address,address,uint64,pay)void': [xgovAddress: string, ownerAddress: string, relationType: bigint | number, payment: AppMethodCallTransactionArgument];
        'approve_subscribe_xgov(uint64)void': [requestId: bigint | number];
        'reject_subscribe_xgov(uint64)void': [requestId: bigint | number];
        'set_voting_account(address,address)void': [xgovAddress: string, votingAddress: string];
        'subscribe_proposer(pay)void': [payment: AppMethodCallTransactionArgument];
        'set_proposer_kyc(address,bool,uint64)void': [proposer: string, kycStatus: boolean, kycExpiring: bigint | number];
        'declare_committee(byte[32],uint64,uint64)void': [committeeId: Uint8Array, size: bigint | number, votes: bigint | number];
        'open_proposal(pay)uint64': [payment: AppMethodCallTransactionArgument];
        'vote_proposal(uint64,address,uint64,uint64)void': [proposalId: bigint | number, xgovAddress: string, approvalVotes: bigint | number, rejectionVotes: bigint | number];
        'pay_grant_proposal(uint64)void': [proposalId: bigint | number];
        'finalize_proposal(uint64)void': [proposalId: bigint | number];
        'drop_proposal(uint64)void': [proposalId: bigint | number];
        'deposit_funds(pay)void': [payment: AppMethodCallTransactionArgument];
        'withdraw_funds(uint64)void': [amount: bigint | number];
        'withdraw_balance()void': [];
        'get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)': [];
        'get_xgov_box(address)(address,uint64,uint64,uint64)': [xgovAddress: string];
        'get_proposer_box(address)(bool,bool,uint64)': [proposerAddress: string];
        'is_proposal(uint64)void': [proposalId: bigint | number];
    };
};
/**
 * The return type for each method
 */
export type XGovRegistryReturns = {
    'create()void': void;
    'pause_registry()void': void;
    'pause_proposals()void': void;
    'resume_registry()void': void;
    'resume_proposals()void': void;
    'set_xgov_manager(address)void': void;
    'set_payor(address)void': void;
    'set_xgov_council(address)void': void;
    'set_xgov_subscriber(address)void': void;
    'set_kyc_provider(address)void': void;
    'set_committee_manager(address)void': void;
    'set_xgov_daemon(address)void': void;
    'config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void': void;
    'update_xgov_registry()void': void;
    'subscribe_xgov(address,pay)void': void;
    'unsubscribe_xgov(address)void': void;
    'request_subscribe_xgov(address,address,uint64,pay)void': void;
    'approve_subscribe_xgov(uint64)void': void;
    'reject_subscribe_xgov(uint64)void': void;
    'set_voting_account(address,address)void': void;
    'subscribe_proposer(pay)void': void;
    'set_proposer_kyc(address,bool,uint64)void': void;
    'declare_committee(byte[32],uint64,uint64)void': void;
    'open_proposal(pay)uint64': bigint;
    'vote_proposal(uint64,address,uint64,uint64)void': void;
    'pay_grant_proposal(uint64)void': void;
    'finalize_proposal(uint64)void': void;
    'drop_proposal(uint64)void': void;
    'deposit_funds(pay)void': void;
    'withdraw_funds(uint64)void': void;
    'withdraw_balance()void': void;
    'get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)': TypedGlobalState;
    'get_xgov_box(address)(address,uint64,uint64,uint64)': XGovBoxValue;
    'get_proposer_box(address)(bool,bool,uint64)': ProposerBoxValue;
    'is_proposal(uint64)void': void;
};
/**
 * Defines the types of available calls and state of the XGovRegistry smart contract.
 */
export type XGovRegistryTypes = {
    /**
     * Maps method signatures / names to their argument and return types.
     */
    methods: Record<'create()void' | 'create', {
        argsObj: XGovRegistryArgs['obj']['create()void'];
        argsTuple: XGovRegistryArgs['tuple']['create()void'];
        returns: XGovRegistryReturns['create()void'];
    }> & Record<'pause_registry()void' | 'pause_registry', {
        argsObj: XGovRegistryArgs['obj']['pause_registry()void'];
        argsTuple: XGovRegistryArgs['tuple']['pause_registry()void'];
        returns: XGovRegistryReturns['pause_registry()void'];
    }> & Record<'pause_proposals()void' | 'pause_proposals', {
        argsObj: XGovRegistryArgs['obj']['pause_proposals()void'];
        argsTuple: XGovRegistryArgs['tuple']['pause_proposals()void'];
        returns: XGovRegistryReturns['pause_proposals()void'];
    }> & Record<'resume_registry()void' | 'resume_registry', {
        argsObj: XGovRegistryArgs['obj']['resume_registry()void'];
        argsTuple: XGovRegistryArgs['tuple']['resume_registry()void'];
        returns: XGovRegistryReturns['resume_registry()void'];
    }> & Record<'resume_proposals()void' | 'resume_proposals', {
        argsObj: XGovRegistryArgs['obj']['resume_proposals()void'];
        argsTuple: XGovRegistryArgs['tuple']['resume_proposals()void'];
        returns: XGovRegistryReturns['resume_proposals()void'];
    }> & Record<'set_xgov_manager(address)void' | 'set_xgov_manager', {
        argsObj: XGovRegistryArgs['obj']['set_xgov_manager(address)void'];
        argsTuple: XGovRegistryArgs['tuple']['set_xgov_manager(address)void'];
        returns: XGovRegistryReturns['set_xgov_manager(address)void'];
    }> & Record<'set_payor(address)void' | 'set_payor', {
        argsObj: XGovRegistryArgs['obj']['set_payor(address)void'];
        argsTuple: XGovRegistryArgs['tuple']['set_payor(address)void'];
        returns: XGovRegistryReturns['set_payor(address)void'];
    }> & Record<'set_xgov_council(address)void' | 'set_xgov_council', {
        argsObj: XGovRegistryArgs['obj']['set_xgov_council(address)void'];
        argsTuple: XGovRegistryArgs['tuple']['set_xgov_council(address)void'];
        returns: XGovRegistryReturns['set_xgov_council(address)void'];
    }> & Record<'set_xgov_subscriber(address)void' | 'set_xgov_subscriber', {
        argsObj: XGovRegistryArgs['obj']['set_xgov_subscriber(address)void'];
        argsTuple: XGovRegistryArgs['tuple']['set_xgov_subscriber(address)void'];
        returns: XGovRegistryReturns['set_xgov_subscriber(address)void'];
    }> & Record<'set_kyc_provider(address)void' | 'set_kyc_provider', {
        argsObj: XGovRegistryArgs['obj']['set_kyc_provider(address)void'];
        argsTuple: XGovRegistryArgs['tuple']['set_kyc_provider(address)void'];
        returns: XGovRegistryReturns['set_kyc_provider(address)void'];
    }> & Record<'set_committee_manager(address)void' | 'set_committee_manager', {
        argsObj: XGovRegistryArgs['obj']['set_committee_manager(address)void'];
        argsTuple: XGovRegistryArgs['tuple']['set_committee_manager(address)void'];
        returns: XGovRegistryReturns['set_committee_manager(address)void'];
    }> & Record<'set_xgov_daemon(address)void' | 'set_xgov_daemon', {
        argsObj: XGovRegistryArgs['obj']['set_xgov_daemon(address)void'];
        argsTuple: XGovRegistryArgs['tuple']['set_xgov_daemon(address)void'];
        returns: XGovRegistryReturns['set_xgov_daemon(address)void'];
    }> & Record<'config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void' | 'config_xgov_registry', {
        argsObj: XGovRegistryArgs['obj']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void'];
        argsTuple: XGovRegistryArgs['tuple']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void'];
        returns: XGovRegistryReturns['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void'];
    }> & Record<'update_xgov_registry()void' | 'update_xgov_registry', {
        argsObj: XGovRegistryArgs['obj']['update_xgov_registry()void'];
        argsTuple: XGovRegistryArgs['tuple']['update_xgov_registry()void'];
        returns: XGovRegistryReturns['update_xgov_registry()void'];
    }> & Record<'subscribe_xgov(address,pay)void' | 'subscribe_xgov', {
        argsObj: XGovRegistryArgs['obj']['subscribe_xgov(address,pay)void'];
        argsTuple: XGovRegistryArgs['tuple']['subscribe_xgov(address,pay)void'];
        returns: XGovRegistryReturns['subscribe_xgov(address,pay)void'];
    }> & Record<'unsubscribe_xgov(address)void' | 'unsubscribe_xgov', {
        argsObj: XGovRegistryArgs['obj']['unsubscribe_xgov(address)void'];
        argsTuple: XGovRegistryArgs['tuple']['unsubscribe_xgov(address)void'];
        returns: XGovRegistryReturns['unsubscribe_xgov(address)void'];
    }> & Record<'request_subscribe_xgov(address,address,uint64,pay)void' | 'request_subscribe_xgov', {
        argsObj: XGovRegistryArgs['obj']['request_subscribe_xgov(address,address,uint64,pay)void'];
        argsTuple: XGovRegistryArgs['tuple']['request_subscribe_xgov(address,address,uint64,pay)void'];
        returns: XGovRegistryReturns['request_subscribe_xgov(address,address,uint64,pay)void'];
    }> & Record<'approve_subscribe_xgov(uint64)void' | 'approve_subscribe_xgov', {
        argsObj: XGovRegistryArgs['obj']['approve_subscribe_xgov(uint64)void'];
        argsTuple: XGovRegistryArgs['tuple']['approve_subscribe_xgov(uint64)void'];
        returns: XGovRegistryReturns['approve_subscribe_xgov(uint64)void'];
    }> & Record<'reject_subscribe_xgov(uint64)void' | 'reject_subscribe_xgov', {
        argsObj: XGovRegistryArgs['obj']['reject_subscribe_xgov(uint64)void'];
        argsTuple: XGovRegistryArgs['tuple']['reject_subscribe_xgov(uint64)void'];
        returns: XGovRegistryReturns['reject_subscribe_xgov(uint64)void'];
    }> & Record<'set_voting_account(address,address)void' | 'set_voting_account', {
        argsObj: XGovRegistryArgs['obj']['set_voting_account(address,address)void'];
        argsTuple: XGovRegistryArgs['tuple']['set_voting_account(address,address)void'];
        returns: XGovRegistryReturns['set_voting_account(address,address)void'];
    }> & Record<'subscribe_proposer(pay)void' | 'subscribe_proposer', {
        argsObj: XGovRegistryArgs['obj']['subscribe_proposer(pay)void'];
        argsTuple: XGovRegistryArgs['tuple']['subscribe_proposer(pay)void'];
        returns: XGovRegistryReturns['subscribe_proposer(pay)void'];
    }> & Record<'set_proposer_kyc(address,bool,uint64)void' | 'set_proposer_kyc', {
        argsObj: XGovRegistryArgs['obj']['set_proposer_kyc(address,bool,uint64)void'];
        argsTuple: XGovRegistryArgs['tuple']['set_proposer_kyc(address,bool,uint64)void'];
        returns: XGovRegistryReturns['set_proposer_kyc(address,bool,uint64)void'];
    }> & Record<'declare_committee(byte[32],uint64,uint64)void' | 'declare_committee', {
        argsObj: XGovRegistryArgs['obj']['declare_committee(byte[32],uint64,uint64)void'];
        argsTuple: XGovRegistryArgs['tuple']['declare_committee(byte[32],uint64,uint64)void'];
        returns: XGovRegistryReturns['declare_committee(byte[32],uint64,uint64)void'];
    }> & Record<'open_proposal(pay)uint64' | 'open_proposal', {
        argsObj: XGovRegistryArgs['obj']['open_proposal(pay)uint64'];
        argsTuple: XGovRegistryArgs['tuple']['open_proposal(pay)uint64'];
        returns: XGovRegistryReturns['open_proposal(pay)uint64'];
    }> & Record<'vote_proposal(uint64,address,uint64,uint64)void' | 'vote_proposal', {
        argsObj: XGovRegistryArgs['obj']['vote_proposal(uint64,address,uint64,uint64)void'];
        argsTuple: XGovRegistryArgs['tuple']['vote_proposal(uint64,address,uint64,uint64)void'];
        returns: XGovRegistryReturns['vote_proposal(uint64,address,uint64,uint64)void'];
    }> & Record<'pay_grant_proposal(uint64)void' | 'pay_grant_proposal', {
        argsObj: XGovRegistryArgs['obj']['pay_grant_proposal(uint64)void'];
        argsTuple: XGovRegistryArgs['tuple']['pay_grant_proposal(uint64)void'];
        returns: XGovRegistryReturns['pay_grant_proposal(uint64)void'];
    }> & Record<'finalize_proposal(uint64)void' | 'finalize_proposal', {
        argsObj: XGovRegistryArgs['obj']['finalize_proposal(uint64)void'];
        argsTuple: XGovRegistryArgs['tuple']['finalize_proposal(uint64)void'];
        returns: XGovRegistryReturns['finalize_proposal(uint64)void'];
    }> & Record<'drop_proposal(uint64)void' | 'drop_proposal', {
        argsObj: XGovRegistryArgs['obj']['drop_proposal(uint64)void'];
        argsTuple: XGovRegistryArgs['tuple']['drop_proposal(uint64)void'];
        returns: XGovRegistryReturns['drop_proposal(uint64)void'];
    }> & Record<'deposit_funds(pay)void' | 'deposit_funds', {
        argsObj: XGovRegistryArgs['obj']['deposit_funds(pay)void'];
        argsTuple: XGovRegistryArgs['tuple']['deposit_funds(pay)void'];
        returns: XGovRegistryReturns['deposit_funds(pay)void'];
    }> & Record<'withdraw_funds(uint64)void' | 'withdraw_funds', {
        argsObj: XGovRegistryArgs['obj']['withdraw_funds(uint64)void'];
        argsTuple: XGovRegistryArgs['tuple']['withdraw_funds(uint64)void'];
        returns: XGovRegistryReturns['withdraw_funds(uint64)void'];
    }> & Record<'withdraw_balance()void' | 'withdraw_balance', {
        argsObj: XGovRegistryArgs['obj']['withdraw_balance()void'];
        argsTuple: XGovRegistryArgs['tuple']['withdraw_balance()void'];
        returns: XGovRegistryReturns['withdraw_balance()void'];
    }> & Record<'get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)' | 'get_state', {
        argsObj: XGovRegistryArgs['obj']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'];
        argsTuple: XGovRegistryArgs['tuple']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'];
        returns: XGovRegistryReturns['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'];
    }> & Record<'get_xgov_box(address)(address,uint64,uint64,uint64)' | 'get_xgov_box', {
        argsObj: XGovRegistryArgs['obj']['get_xgov_box(address)(address,uint64,uint64,uint64)'];
        argsTuple: XGovRegistryArgs['tuple']['get_xgov_box(address)(address,uint64,uint64,uint64)'];
        /**
         * The xGov box value
         */
        returns: XGovRegistryReturns['get_xgov_box(address)(address,uint64,uint64,uint64)'];
    }> & Record<'get_proposer_box(address)(bool,bool,uint64)' | 'get_proposer_box', {
        argsObj: XGovRegistryArgs['obj']['get_proposer_box(address)(bool,bool,uint64)'];
        argsTuple: XGovRegistryArgs['tuple']['get_proposer_box(address)(bool,bool,uint64)'];
        /**
         * The Proposer box value
         */
        returns: XGovRegistryReturns['get_proposer_box(address)(bool,bool,uint64)'];
    }> & Record<'is_proposal(uint64)void' | 'is_proposal', {
        argsObj: XGovRegistryArgs['obj']['is_proposal(uint64)void'];
        argsTuple: XGovRegistryArgs['tuple']['is_proposal(uint64)void'];
        returns: XGovRegistryReturns['is_proposal(uint64)void'];
    }>;
    /**
     * Defines the shape of the state of the application.
     */
    state: {
        global: {
            keys: {
                committeeId: BinaryState;
                committeeManager: BinaryState;
                committeeMembers: bigint;
                committeeVotes: bigint;
                daemonOpsFundingBps: bigint;
                discussionDurationLarge: bigint;
                discussionDurationMedium: bigint;
                discussionDurationSmall: bigint;
                discussionDurationXlarge: bigint;
                kycProvider: BinaryState;
                maxCommitteeSize: bigint;
                maxRequestedAmountLarge: bigint;
                maxRequestedAmountMedium: bigint;
                maxRequestedAmountSmall: bigint;
                minRequestedAmount: bigint;
                openProposalFee: bigint;
                outstandingFunds: bigint;
                pausedProposals: bigint;
                pausedRegistry: bigint;
                pendingProposals: bigint;
                proposalCommitmentBps: bigint;
                proposerFee: bigint;
                quorumLarge: bigint;
                quorumMedium: bigint;
                quorumSmall: bigint;
                requestId: bigint;
                votingDurationLarge: bigint;
                votingDurationMedium: bigint;
                votingDurationSmall: bigint;
                votingDurationXlarge: bigint;
                weightedQuorumLarge: bigint;
                weightedQuorumMedium: bigint;
                weightedQuorumSmall: bigint;
                xgovCouncil: BinaryState;
                xgovDaemon: BinaryState;
                xgovFee: bigint;
                xgovManager: BinaryState;
                xgovPayor: BinaryState;
                xgovSubscriber: BinaryState;
                xgovs: bigint;
            };
            maps: {};
        };
    };
};
/**
 * Defines the possible abi call signatures.
 */
export type XGovRegistrySignatures = keyof XGovRegistryTypes['methods'];
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type XGovRegistryNonVoidMethodSignatures = keyof XGovRegistryTypes['methods'] extends infer T ? T extends keyof XGovRegistryTypes['methods'] ? MethodReturn<T> extends void ? never : T : never : never;
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> & {
    /** The args for the ABI method call, either as an ordered array or an object */
    args: Expand<TArgs>;
}>;
/**
 * Maps a method signature from the XGovRegistry smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends XGovRegistrySignatures> = XGovRegistryTypes['methods'][TSignature]['argsObj' | 'argsTuple'];
/**
 * Maps a method signature from the XGovRegistry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends XGovRegistrySignatures> = XGovRegistryTypes['methods'][TSignature]['returns'];
/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = XGovRegistryTypes['state']['global']['keys'];
/**
 * Defines supported create method params for this smart contract
 */
export type XGovRegistryCreateCallParams = Expand<CallParams<XGovRegistryArgs['obj']['create()void'] | XGovRegistryArgs['tuple']['create()void']> & {
    method: 'create';
} & {
    onComplete?: OnApplicationComplete.NoOpOC;
} & CreateSchema> | Expand<CallParams<XGovRegistryArgs['obj']['create()void'] | XGovRegistryArgs['tuple']['create()void']> & {
    method: 'create()void';
} & {
    onComplete?: OnApplicationComplete.NoOpOC;
} & CreateSchema>;
/**
 * Defines supported update method params for this smart contract
 */
export type XGovRegistryUpdateCallParams = Expand<CallParams<XGovRegistryArgs['obj']['update_xgov_registry()void'] | XGovRegistryArgs['tuple']['update_xgov_registry()void']> & {
    method: 'update_xgov_registry';
}> | Expand<CallParams<XGovRegistryArgs['obj']['update_xgov_registry()void'] | XGovRegistryArgs['tuple']['update_xgov_registry()void']> & {
    method: 'update_xgov_registry()void';
}>;
/**
 * Defines arguments required for the deploy method.
 */
export type XGovRegistryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
    /**
     * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    createParams?: XGovRegistryCreateCallParams;
    /**
     * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    updateParams?: XGovRegistryUpdateCallParams;
}>;
/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the XGovRegistry smart contract
 */
export declare abstract class XGovRegistryParamsFactory {
    /**
     * Gets available create ABI call param factories
     */
    static get create(): {
        _resolveByMethod<TParams extends XGovRegistryCreateCallParams & {
            method: string;
        }>(params: TParams): {
            signer?: (TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount) | undefined;
            rekeyTo?: string | undefined;
            note?: (Uint8Array | string) | undefined;
            lease?: (Uint8Array | string) | undefined;
            staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
            extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
            maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
            validityWindow?: number | undefined;
            firstValidRound?: bigint | undefined;
            lastValidRound?: bigint | undefined;
            onComplete?: OnApplicationComplete | undefined;
            accountReferences?: string[] | undefined;
            appReferences?: bigint[] | undefined;
            assetReferences?: bigint[] | undefined;
            boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference | import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier)[] | undefined;
            sender?: string | undefined;
            method: string;
            args?: (import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | AppMethodCallTransactionArgument | undefined)[] | undefined;
        } & AppClientCompilationParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        };
        /**
         * Constructs create ABI call params for the XGovRegistry smart contract using the create()void ABI method
         *
         * @param params Parameters for the call
         * @returns An `AppClientMethodCallParams` object for the call
         */
        create(params: CallParams<XGovRegistryArgs["obj"]["create()void"] | XGovRegistryArgs["tuple"]["create()void"]> & AppClientCompilationParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }): AppClientMethodCallParams & AppClientCompilationParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        };
    };
    /**
     * Gets available update ABI call param factories
     */
    static get update(): {
        _resolveByMethod<TParams extends XGovRegistryUpdateCallParams & {
            method: string;
        }>(params: TParams): {
            signer?: (TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount) | undefined;
            rekeyTo?: string | undefined;
            note?: (Uint8Array | string) | undefined;
            lease?: (Uint8Array | string) | undefined;
            staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
            extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
            maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
            validityWindow?: number | undefined;
            firstValidRound?: bigint | undefined;
            lastValidRound?: bigint | undefined;
            onComplete?: OnApplicationComplete | undefined;
            accountReferences?: string[] | undefined;
            appReferences?: bigint[] | undefined;
            assetReferences?: bigint[] | undefined;
            boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference | import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier)[] | undefined;
            sender?: string | undefined;
            method: string;
            args?: (import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | AppMethodCallTransactionArgument | undefined)[] | undefined;
        } & AppClientCompilationParams;
        /**
         * Constructs update ABI call params for the XGovRegistry smart contract using the update_xgov_registry()void ABI method
         *
         * @param params Parameters for the call
         * @returns An `AppClientMethodCallParams` object for the call
         */
        updateXgovRegistry(params: CallParams<XGovRegistryArgs["obj"]["update_xgov_registry()void"] | XGovRegistryArgs["tuple"]["update_xgov_registry()void"]> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams;
    };
    /**
     * Constructs a no op call for the pause_registry()void ABI method
     *
     * Pauses the xGov Registry non-administrative methods.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static pauseRegistry(params: CallParams<XGovRegistryArgs['obj']['pause_registry()void'] | XGovRegistryArgs['tuple']['pause_registry()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the pause_proposals()void ABI method
     *
     * Pauses the creation of new Proposals.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static pauseProposals(params: CallParams<XGovRegistryArgs['obj']['pause_proposals()void'] | XGovRegistryArgs['tuple']['pause_proposals()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the resume_registry()void ABI method
     *
     * Resumes the xGov Registry non-administrative methods.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static resumeRegistry(params: CallParams<XGovRegistryArgs['obj']['resume_registry()void'] | XGovRegistryArgs['tuple']['resume_registry()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the resume_proposals()void ABI method
     *
     * Resumes the creation of new Proposals.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static resumeProposals(params: CallParams<XGovRegistryArgs['obj']['resume_proposals()void'] | XGovRegistryArgs['tuple']['resume_proposals()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the set_xgov_manager(address)void ABI method
     *
     * Sets the xGov Manager.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static setXgovManager(params: CallParams<XGovRegistryArgs['obj']['set_xgov_manager(address)void'] | XGovRegistryArgs['tuple']['set_xgov_manager(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the set_payor(address)void ABI method
     *
     * Sets the xGov Payor.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static setPayor(params: CallParams<XGovRegistryArgs['obj']['set_payor(address)void'] | XGovRegistryArgs['tuple']['set_payor(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the set_xgov_council(address)void ABI method
     *
     * Sets the xGov Council.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static setXgovCouncil(params: CallParams<XGovRegistryArgs['obj']['set_xgov_council(address)void'] | XGovRegistryArgs['tuple']['set_xgov_council(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the set_xgov_subscriber(address)void ABI method
     *
     * Sets the xGov Subscriber.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static setXgovSubscriber(params: CallParams<XGovRegistryArgs['obj']['set_xgov_subscriber(address)void'] | XGovRegistryArgs['tuple']['set_xgov_subscriber(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the set_kyc_provider(address)void ABI method
     *
     * Sets the KYC provider.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static setKycProvider(params: CallParams<XGovRegistryArgs['obj']['set_kyc_provider(address)void'] | XGovRegistryArgs['tuple']['set_kyc_provider(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the set_committee_manager(address)void ABI method
     *
     * Sets the Committee Manager.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static setCommitteeManager(params: CallParams<XGovRegistryArgs['obj']['set_committee_manager(address)void'] | XGovRegistryArgs['tuple']['set_committee_manager(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the set_xgov_daemon(address)void ABI method
     *
     * Sets the xGov Daemon.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static setXgovDaemon(params: CallParams<XGovRegistryArgs['obj']['set_xgov_daemon(address)void'] | XGovRegistryArgs['tuple']['set_xgov_daemon(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void ABI method
     *
     * Sets the configuration of the xGov Registry.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static configXgovRegistry(params: CallParams<XGovRegistryArgs['obj']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void'] | XGovRegistryArgs['tuple']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the subscribe_xgov(address,pay)void ABI method
     *
     * Subscribes the sender to being an xGov.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static subscribeXgov(params: CallParams<XGovRegistryArgs['obj']['subscribe_xgov(address,pay)void'] | XGovRegistryArgs['tuple']['subscribe_xgov(address,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the unsubscribe_xgov(address)void ABI method
     *
     * Unsubscribes the designated address from being an xGov.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static unsubscribeXgov(params: CallParams<XGovRegistryArgs['obj']['unsubscribe_xgov(address)void'] | XGovRegistryArgs['tuple']['unsubscribe_xgov(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the request_subscribe_xgov(address,address,uint64,pay)void ABI method
     *
     * Requests to subscribe to the xGov.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static requestSubscribeXgov(params: CallParams<XGovRegistryArgs['obj']['request_subscribe_xgov(address,address,uint64,pay)void'] | XGovRegistryArgs['tuple']['request_subscribe_xgov(address,address,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the approve_subscribe_xgov(uint64)void ABI method
     *
     * Approves a subscribe request to xGov.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static approveSubscribeXgov(params: CallParams<XGovRegistryArgs['obj']['approve_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['approve_subscribe_xgov(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the reject_subscribe_xgov(uint64)void ABI method
     *
     * Rejects a subscribe request to xGov.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static rejectSubscribeXgov(params: CallParams<XGovRegistryArgs['obj']['reject_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['reject_subscribe_xgov(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the set_voting_account(address,address)void ABI method
     *
     * Sets the Voting Address for the xGov.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static setVotingAccount(params: CallParams<XGovRegistryArgs['obj']['set_voting_account(address,address)void'] | XGovRegistryArgs['tuple']['set_voting_account(address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the subscribe_proposer(pay)void ABI method
     *
     * Subscribes the sender to being a Proposer.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static subscribeProposer(params: CallParams<XGovRegistryArgs['obj']['subscribe_proposer(pay)void'] | XGovRegistryArgs['tuple']['subscribe_proposer(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the set_proposer_kyc(address,bool,uint64)void ABI method
     *
     * Sets a proposer's KYC status.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static setProposerKyc(params: CallParams<XGovRegistryArgs['obj']['set_proposer_kyc(address,bool,uint64)void'] | XGovRegistryArgs['tuple']['set_proposer_kyc(address,bool,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the declare_committee(byte[32],uint64,uint64)void ABI method
     *
     * Sets the xGov Committee in charge.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static declareCommittee(params: CallParams<XGovRegistryArgs['obj']['declare_committee(byte[32],uint64,uint64)void'] | XGovRegistryArgs['tuple']['declare_committee(byte[32],uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the open_proposal(pay)uint64 ABI method
     *
     * Creates a new Proposal.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static openProposal(params: CallParams<XGovRegistryArgs['obj']['open_proposal(pay)uint64'] | XGovRegistryArgs['tuple']['open_proposal(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the vote_proposal(uint64,address,uint64,uint64)void ABI method
     *
     * Votes on a Proposal.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static voteProposal(params: CallParams<XGovRegistryArgs['obj']['vote_proposal(uint64,address,uint64,uint64)void'] | XGovRegistryArgs['tuple']['vote_proposal(uint64,address,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the pay_grant_proposal(uint64)void ABI method
     *
     * Disburses the funds for an approved Proposal.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static payGrantProposal(params: CallParams<XGovRegistryArgs['obj']['pay_grant_proposal(uint64)void'] | XGovRegistryArgs['tuple']['pay_grant_proposal(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the finalize_proposal(uint64)void ABI method
     *
     * Finalize a Proposal.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static finalizeProposal(params: CallParams<XGovRegistryArgs['obj']['finalize_proposal(uint64)void'] | XGovRegistryArgs['tuple']['finalize_proposal(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the drop_proposal(uint64)void ABI method
     *
     * Drops a Proposal.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static dropProposal(params: CallParams<XGovRegistryArgs['obj']['drop_proposal(uint64)void'] | XGovRegistryArgs['tuple']['drop_proposal(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the deposit_funds(pay)void ABI method
     *
     * Deposits xGov program funds into the xGov Treasury (xGov Registry Account).
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static depositFunds(params: CallParams<XGovRegistryArgs['obj']['deposit_funds(pay)void'] | XGovRegistryArgs['tuple']['deposit_funds(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the withdraw_funds(uint64)void ABI method
     *
     * Remove xGov program funds from the xGov Treasury (xGov Registry Account).
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static withdrawFunds(params: CallParams<XGovRegistryArgs['obj']['withdraw_funds(uint64)void'] | XGovRegistryArgs['tuple']['withdraw_funds(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the withdraw_balance()void ABI method
     *
     * Withdraw outstanding Algos, excluding MBR and outstanding funds, from the xGov Registry.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static withdrawBalance(params: CallParams<XGovRegistryArgs['obj']['withdraw_balance()void'] | XGovRegistryArgs['tuple']['withdraw_balance()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64) ABI method
     *
     * Returns the xGov Registry state.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static getState(params: CallParams<XGovRegistryArgs['obj']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'] | XGovRegistryArgs['tuple']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the get_xgov_box(address)(address,uint64,uint64,uint64) ABI method
     *
     * Returns the xGov box for the given address.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static getXgovBox(params: CallParams<XGovRegistryArgs['obj']['get_xgov_box(address)(address,uint64,uint64,uint64)'] | XGovRegistryArgs['tuple']['get_xgov_box(address)(address,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the get_proposer_box(address)(bool,bool,uint64) ABI method
     *
     * Returns the Proposer box for the given address.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static getProposerBox(params: CallParams<XGovRegistryArgs['obj']['get_proposer_box(address)(bool,bool,uint64)'] | XGovRegistryArgs['tuple']['get_proposer_box(address)(bool,bool,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
    /**
     * Constructs a no op call for the is_proposal(uint64)void ABI method
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static isProposal(params: CallParams<XGovRegistryArgs['obj']['is_proposal(uint64)void'] | XGovRegistryArgs['tuple']['is_proposal(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete;
}
/**
 * A factory to create and deploy one or more instance of the XGovRegistry smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export declare class XGovRegistryFactory {
    /**
     * The underlying `AppFactory` for when you want to have more flexibility
     */
    readonly appFactory: _AppFactory;
    /**
     * Creates a new instance of `XGovRegistryFactory`
     *
     * @param params The parameters to initialise the app factory with
     */
    constructor(params: Omit<AppFactoryParams, 'appSpec'>);
    /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
    get appName(): string;
    /** The ARC-56 app spec being used */
    get appSpec(): Arc56Contract;
    /** A reference to the underlying `AlgorandClient` this app factory is using. */
    get algorand(): AlgorandClientInterface;
    /**
     * Returns a new `AppClient` client for an app instance of the given ID.
     *
     * Automatically populates appName, defaultSender and source maps from the factory
     * if not specified in the params.
     * @param params The parameters to create the app client
     * @returns The `AppClient`
     */
    getAppClientById(params: AppFactoryAppClientParams): XGovRegistryClient;
    /**
     * Returns a new `AppClient` client, resolving the app by creator address and name
     * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
     *
     * Automatically populates appName, defaultSender and source maps from the factory
     * if not specified in the params.
     * @param params The parameters to create the app client
     * @returns The `AppClient`
     */
    getAppClientByCreatorAndName(params: AppFactoryResolveAppClientByCreatorAndNameParams): Promise<XGovRegistryClient>;
    /**
     * Idempotently deploys the XGovRegistry smart contract.
     *
     * @param params The arguments for the contract calls and any additional parameters for the call
     * @returns The deployment result
     */
    deploy(params?: XGovRegistryDeployParams): Promise<{
        result: {
            return: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            deleteReturn: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            compiledApproval?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            compiledClear?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            operationPerformed: "create";
            version: string;
            name: string;
            deleted: boolean;
            createdRound: bigint;
            updatedRound: bigint;
            createdMetadata: import("@algorandfoundation/algokit-utils/types/app").AppDeployMetadata;
            deletable?: boolean | undefined;
            updatable?: boolean | undefined;
            groupId: string;
            txIds: string[];
            returns?: import("@algorandfoundation/algokit-utils/types/app").ABIReturn[] | undefined;
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
            appId: bigint;
            appAddress: string;
        } | {
            return: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            deleteReturn: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            compiledApproval?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            compiledClear?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            operationPerformed: "update";
            appId: bigint;
            appAddress: string;
            createdRound: bigint;
            updatedRound: bigint;
            createdMetadata: import("@algorandfoundation/algokit-utils/types/app").AppDeployMetadata;
            deleted: boolean;
            name: string;
            version: string;
            deletable?: boolean | undefined;
            updatable?: boolean | undefined;
            groupId: string;
            txIds: string[];
            returns?: import("@algorandfoundation/algokit-utils/types/app").ABIReturn[] | undefined;
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        } | {
            return: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            deleteReturn: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            compiledApproval?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            compiledClear?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            operationPerformed: "replace";
            version: string;
            name: string;
            deleted: boolean;
            createdRound: bigint;
            updatedRound: bigint;
            createdMetadata: import("@algorandfoundation/algokit-utils/types/app").AppDeployMetadata;
            deletable?: boolean | undefined;
            updatable?: boolean | undefined;
            groupId: string;
            txIds: string[];
            returns?: import("@algorandfoundation/algokit-utils/types/app").ABIReturn[] | undefined;
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
            appId: bigint;
            appAddress: string;
            deleteResult: import("@algorandfoundation/algokit-utils/types/transaction").ConfirmedTransactionResult;
        } | {
            return: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            deleteReturn: import("algosdk").ABIValue | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined;
            compiledApproval?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            compiledClear?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
            operationPerformed: "nothing";
            appId: bigint;
            appAddress: string;
            createdRound: bigint;
            updatedRound: bigint;
            createdMetadata: import("@algorandfoundation/algokit-utils/types/app").AppDeployMetadata;
            deleted: boolean;
            name: string;
            version: string;
            deletable?: boolean | undefined;
            updatable?: boolean | undefined;
        };
        appClient: XGovRegistryClient;
    }>;
    /**
     * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
     */
    readonly params: {
        /**
         * Gets available create methods
         */
        create: {
            /**
             * Creates a new instance of the XGovRegistry smart contract using the create()void ABI method.
             *
             * Create the xGov Registry.
             *
             * @param params The params for the smart contract call
             * @returns The create params
             */
            create: (params?: CallParams<XGovRegistryArgs["obj"]["create()void"] | XGovRegistryArgs["tuple"]["create()void"]> & AppClientCompilationParams & CreateSchema & {
                onComplete?: OnApplicationComplete.NoOpOC;
            }) => Promise<{
                deployTimeParams: import("@algorandfoundation/algokit-utils/types/app").TealTemplateParams | undefined;
                schema: {
                    globalInts: number;
                    globalByteSlices: number;
                    localInts: number;
                    localByteSlices: number;
                };
                approvalProgram: Uint8Array;
                clearStateProgram: Uint8Array;
                lease?: string | Uint8Array | undefined;
                note?: string | Uint8Array | undefined;
                maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                signer?: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                rekeyTo?: string | undefined;
                staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                validityWindow?: number | undefined;
                firstValidRound?: bigint | undefined;
                lastValidRound?: bigint | undefined;
                onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC | OnApplicationComplete.CloseOutOC | OnApplicationComplete.UpdateApplicationOC | OnApplicationComplete.DeleteApplicationOC | undefined;
                accountReferences?: string[] | undefined;
                appReferences?: bigint[] | undefined;
                assetReferences?: bigint[] | undefined;
                boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier | import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference)[] | undefined;
                sender?: string | undefined;
                method: string;
                args?: (import("algosdk").ABIValue | AppMethodCallTransactionArgument | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined)[] | undefined;
                updatable?: boolean | undefined;
                deletable?: boolean | undefined;
                extraProgramPages?: number | undefined;
            } & {
                sender: string;
                signer: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                method: import("@algorandfoundation/algokit-utils/types/app-arc56").Arc56Method;
                args: (Transaction | import("algosdk").ABIValue | import("algosdk").TransactionWithSigner | Promise<Transaction> | import("@algorandfoundation/algokit-utils/types/composer").AppMethodCall<{
                    lease?: string | Uint8Array | undefined;
                    note?: string | Uint8Array | undefined;
                    maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    args?: Uint8Array[] | undefined;
                    signer?: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                    sender: string;
                    rekeyTo?: string | undefined;
                    staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    validityWindow?: number | undefined;
                    firstValidRound?: bigint | undefined;
                    lastValidRound?: bigint | undefined;
                    onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC | OnApplicationComplete.CloseOutOC | OnApplicationComplete.UpdateApplicationOC | OnApplicationComplete.DeleteApplicationOC | undefined;
                    accountReferences?: string[] | undefined;
                    appReferences?: bigint[] | undefined;
                    assetReferences?: bigint[] | undefined;
                    boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier | import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference)[] | undefined;
                    approvalProgram: string | Uint8Array;
                    clearStateProgram: string | Uint8Array;
                    schema?: {
                        globalInts: number;
                        globalByteSlices: number;
                        localInts: number;
                        localByteSlices: number;
                    } | undefined;
                    extraProgramPages?: number | undefined;
                }> | import("@algorandfoundation/algokit-utils/types/composer").AppMethodCall<{
                    sender: string;
                    signer?: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                    rekeyTo?: string | undefined;
                    note?: string | Uint8Array | undefined;
                    lease?: string | Uint8Array | undefined;
                    staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    validityWindow?: number | undefined;
                    firstValidRound?: bigint | undefined;
                    lastValidRound?: bigint | undefined;
                    appId: bigint;
                    onComplete?: OnApplicationComplete.UpdateApplicationOC | undefined;
                    args?: Uint8Array[] | undefined;
                    accountReferences?: string[] | undefined;
                    appReferences?: bigint[] | undefined;
                    assetReferences?: bigint[] | undefined;
                    boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier | import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference)[] | undefined;
                    approvalProgram: string | Uint8Array;
                    clearStateProgram: string | Uint8Array;
                }> | import("@algorandfoundation/algokit-utils/types/composer").AppMethodCall<import("@algorandfoundation/algokit-utils/types/composer").AppMethodCallParams> | undefined)[] | undefined;
                onComplete: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC | OnApplicationComplete.CloseOutOC | OnApplicationComplete.UpdateApplicationOC | OnApplicationComplete.DeleteApplicationOC;
            }>;
        };
        /**
         * Gets available deployUpdate methods
         */
        deployUpdate: {
            /**
             * Updates an existing instance of the XGovRegistry smart contract using the update_xgov_registry()void ABI method.
             *
             * Updates the xGov Registry contract.
             *
             * @param params The params for the smart contract call
             * @returns The deployUpdate params
             */
            updateXgovRegistry: (params?: CallParams<XGovRegistryArgs["obj"]["update_xgov_registry()void"] | XGovRegistryArgs["tuple"]["update_xgov_registry()void"]> & AppClientCompilationParams) => {
                lease?: string | Uint8Array | undefined;
                note?: string | Uint8Array | undefined;
                maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                signer?: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                rekeyTo?: string | undefined;
                staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                validityWindow?: number | undefined;
                firstValidRound?: bigint | undefined;
                lastValidRound?: bigint | undefined;
                onComplete?: OnApplicationComplete | undefined;
                accountReferences?: string[] | undefined;
                appReferences?: bigint[] | undefined;
                assetReferences?: bigint[] | undefined;
                boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier | import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference)[] | undefined;
                sender?: string | undefined;
                method: string;
                args?: (import("algosdk").ABIValue | AppMethodCallTransactionArgument | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined)[] | undefined;
            } & {
                sender: string;
                signer: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                method: import("@algorandfoundation/algokit-utils/types/app-arc56").Arc56Method;
                args: (Transaction | import("algosdk").ABIValue | import("algosdk").TransactionWithSigner | Promise<Transaction> | import("@algorandfoundation/algokit-utils/types/composer").AppMethodCall<{
                    lease?: string | Uint8Array | undefined;
                    note?: string | Uint8Array | undefined;
                    maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    args?: Uint8Array[] | undefined;
                    signer?: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                    sender: string;
                    rekeyTo?: string | undefined;
                    staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    validityWindow?: number | undefined;
                    firstValidRound?: bigint | undefined;
                    lastValidRound?: bigint | undefined;
                    onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC | OnApplicationComplete.CloseOutOC | OnApplicationComplete.UpdateApplicationOC | OnApplicationComplete.DeleteApplicationOC | undefined;
                    accountReferences?: string[] | undefined;
                    appReferences?: bigint[] | undefined;
                    assetReferences?: bigint[] | undefined;
                    boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier | import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference)[] | undefined;
                    approvalProgram: string | Uint8Array;
                    clearStateProgram: string | Uint8Array;
                    schema?: {
                        globalInts: number;
                        globalByteSlices: number;
                        localInts: number;
                        localByteSlices: number;
                    } | undefined;
                    extraProgramPages?: number | undefined;
                }> | import("@algorandfoundation/algokit-utils/types/composer").AppMethodCall<{
                    sender: string;
                    signer?: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                    rekeyTo?: string | undefined;
                    note?: string | Uint8Array | undefined;
                    lease?: string | Uint8Array | undefined;
                    staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    validityWindow?: number | undefined;
                    firstValidRound?: bigint | undefined;
                    lastValidRound?: bigint | undefined;
                    appId: bigint;
                    onComplete?: OnApplicationComplete.UpdateApplicationOC | undefined;
                    args?: Uint8Array[] | undefined;
                    accountReferences?: string[] | undefined;
                    appReferences?: bigint[] | undefined;
                    assetReferences?: bigint[] | undefined;
                    boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier | import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference)[] | undefined;
                    approvalProgram: string | Uint8Array;
                    clearStateProgram: string | Uint8Array;
                }> | import("@algorandfoundation/algokit-utils/types/composer").AppMethodCall<import("@algorandfoundation/algokit-utils/types/composer").AppMethodCallParams> | undefined)[] | undefined;
                onComplete: OnApplicationComplete.UpdateApplicationOC;
            };
        };
    };
    /**
     * Create transactions for the current app
     */
    readonly createTransaction: {
        /**
         * Gets available create methods
         */
        create: {
            /**
             * Creates a new instance of the XGovRegistry smart contract using the create()void ABI method.
             *
             * Create the xGov Registry.
             *
             * @param params The params for the smart contract call
             * @returns The create transaction
             */
            create: (params?: CallParams<XGovRegistryArgs["obj"]["create()void"] | XGovRegistryArgs["tuple"]["create()void"]> & AppClientCompilationParams & CreateSchema & {
                onComplete?: OnApplicationComplete.NoOpOC;
            }) => Promise<{
                transactions: Transaction[];
                methodCalls: Map<number, import("algosdk").ABIMethod>;
                signers: Map<number, TransactionSigner>;
            }>;
        };
    };
    /**
     * Send calls to the current app
     */
    readonly send: {
        /**
         * Gets available create methods
         */
        create: {
            /**
             * Creates a new instance of the XGovRegistry smart contract using an ABI method call using the create()void ABI method.
             *
             * Create the xGov Registry.
             *
             * @param params The params for the smart contract call
             * @returns The create result
             */
            create: (params?: CallParams<XGovRegistryArgs["obj"]["create()void"] | XGovRegistryArgs["tuple"]["create()void"]> & AppClientCompilationParams & CreateSchema & SendParams & {
                onComplete?: OnApplicationComplete.NoOpOC;
            }) => Promise<{
                result: {
                    return: (undefined | XGovRegistryReturns["create()void"]);
                    compiledApproval?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
                    compiledClear?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
                    appId: bigint;
                    groupId: string;
                    txIds: string[];
                    returns?: import("@algorandfoundation/algokit-utils/types/app").ABIReturn[] | undefined;
                    confirmations: modelsv2.PendingTransactionResponse[];
                    transactions: Transaction[];
                    confirmation: modelsv2.PendingTransactionResponse;
                    transaction: Transaction;
                    appAddress: string;
                };
                appClient: XGovRegistryClient;
            }>;
        };
    };
}
/**
 * A client to make calls to the XGovRegistry smart contract
 */
export declare class XGovRegistryClient {
    /**
     * The underlying `AppClient` for when you want to have more flexibility
     */
    readonly appClient: _AppClient;
    /**
     * Creates a new instance of `XGovRegistryClient`
     *
     * @param appClient An `AppClient` instance which has been created with the XGovRegistry app spec
     */
    constructor(appClient: _AppClient);
    /**
     * Creates a new instance of `XGovRegistryClient`
     *
     * @param params The parameters to initialise the app client with
     */
    constructor(params: Omit<AppClientParams, 'appSpec'>);
    /**
     * Checks for decode errors on the given return value and maps the return value to the return type for the given method
     * @returns The typed return value or undefined if there was no value
     */
    decodeReturnValue<TSignature extends XGovRegistryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined): MethodReturn<TSignature> | undefined;
    /**
     * Returns a new `XGovRegistryClient` client, resolving the app by creator address and name
     * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
     * @param params The parameters to create the app client
     */
    static fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<XGovRegistryClient>;
    /**
     * Returns an `XGovRegistryClient` instance for the current network based on
     * pre-determined network-specific app IDs specified in the ARC-56 app spec.
     *
     * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
     * @param params The parameters to create the app client
     */
    static fromNetwork(params: Omit<ResolveAppClientByNetwork, 'appSpec'>): Promise<XGovRegistryClient>;
    /** The ID of the app instance this client is linked to. */
    get appId(): bigint;
    /** The app address of the app instance this client is linked to. */
    get appAddress(): string;
    /** The name of the app. */
    get appName(): string;
    /** The ARC-56 app spec being used */
    get appSpec(): Arc56Contract;
    /** A reference to the underlying `AlgorandClient` this app client is using. */
    get algorand(): AlgorandClientInterface;
    /**
     * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
     */
    readonly params: {
        /**
         * Gets available update methods
         */
        update: {
            /**
             * Updates an existing instance of the XGovRegistry smart contract using the `update_xgov_registry()void` ABI method.
             *
             * Updates the xGov Registry contract.
             *
             * @param params The params for the smart contract call
             * @returns The update params
             */
            updateXgovRegistry: (params?: CallParams<XGovRegistryArgs["obj"]["update_xgov_registry()void"] | XGovRegistryArgs["tuple"]["update_xgov_registry()void"]> & AppClientCompilationParams) => Promise<{
                approvalProgram: Uint8Array;
                clearStateProgram: Uint8Array;
                compiledApproval?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
                compiledClear?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
                lease?: string | Uint8Array | undefined;
                note?: string | Uint8Array | undefined;
                maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                signer?: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                rekeyTo?: string | undefined;
                staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                validityWindow?: number | undefined;
                firstValidRound?: bigint | undefined;
                lastValidRound?: bigint | undefined;
                onComplete?: OnApplicationComplete | undefined;
                accountReferences?: string[] | undefined;
                appReferences?: bigint[] | undefined;
                assetReferences?: bigint[] | undefined;
                boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier | import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference)[] | undefined;
                sender?: string | undefined;
                method: string;
                args?: (import("algosdk").ABIValue | AppMethodCallTransactionArgument | import("@algorandfoundation/algokit-utils/types/app-arc56").ABIStruct | undefined)[] | undefined;
                deployTimeParams?: import("@algorandfoundation/algokit-utils/types/app").TealTemplateParams | undefined;
                updatable?: boolean | undefined;
                deletable?: boolean | undefined;
            } & {
                appId: bigint;
                sender: string;
                signer: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                method: import("@algorandfoundation/algokit-utils/types/app-arc56").Arc56Method;
                onComplete: OnApplicationComplete.UpdateApplicationOC;
                args: (Transaction | import("algosdk").ABIValue | import("algosdk").TransactionWithSigner | Promise<Transaction> | import("@algorandfoundation/algokit-utils/types/composer").AppMethodCall<{
                    lease?: string | Uint8Array | undefined;
                    note?: string | Uint8Array | undefined;
                    maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    args?: Uint8Array[] | undefined;
                    signer?: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                    sender: string;
                    rekeyTo?: string | undefined;
                    staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    validityWindow?: number | undefined;
                    firstValidRound?: bigint | undefined;
                    lastValidRound?: bigint | undefined;
                    onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC | OnApplicationComplete.CloseOutOC | OnApplicationComplete.UpdateApplicationOC | OnApplicationComplete.DeleteApplicationOC | undefined;
                    accountReferences?: string[] | undefined;
                    appReferences?: bigint[] | undefined;
                    assetReferences?: bigint[] | undefined;
                    boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier | import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference)[] | undefined;
                    approvalProgram: string | Uint8Array;
                    clearStateProgram: string | Uint8Array;
                    schema?: {
                        globalInts: number;
                        globalByteSlices: number;
                        localInts: number;
                        localByteSlices: number;
                    } | undefined;
                    extraProgramPages?: number | undefined;
                }> | import("@algorandfoundation/algokit-utils/types/composer").AppMethodCall<{
                    sender: string;
                    signer?: TransactionSigner | import("@algorandfoundation/algokit-utils/types/account").TransactionSignerAccount | undefined;
                    rekeyTo?: string | undefined;
                    note?: string | Uint8Array | undefined;
                    lease?: string | Uint8Array | undefined;
                    staticFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    extraFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    maxFee?: import("@algorandfoundation/algokit-utils/types/amount").AlgoAmount | undefined;
                    validityWindow?: number | undefined;
                    firstValidRound?: bigint | undefined;
                    lastValidRound?: bigint | undefined;
                    appId: bigint;
                    onComplete?: OnApplicationComplete.UpdateApplicationOC | undefined;
                    args?: Uint8Array[] | undefined;
                    accountReferences?: string[] | undefined;
                    appReferences?: bigint[] | undefined;
                    assetReferences?: bigint[] | undefined;
                    boxReferences?: (import("@algorandfoundation/algokit-utils/types/app-manager").BoxIdentifier | import("@algorandfoundation/algokit-utils/types/app-manager").BoxReference)[] | undefined;
                    approvalProgram: string | Uint8Array;
                    clearStateProgram: string | Uint8Array;
                }> | import("@algorandfoundation/algokit-utils/types/composer").AppMethodCall<import("@algorandfoundation/algokit-utils/types/composer").AppMethodCallParams> | undefined)[] | undefined;
            }>;
        };
        /**
         * Makes a clear_state call to an existing instance of the XGovRegistry smart contract.
         *
         * @param params The params for the bare (raw) call
         * @returns The clearState result
         */
        clearState: (params?: Expand<AppClientBareCallParams>) => import("@algorandfoundation/algokit-utils/types/composer").AppCallParams;
        /**
         * Makes a call to the XGovRegistry smart contract using the `pause_registry()void` ABI method.
         *
         * Pauses the xGov Registry non-administrative methods.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        pauseRegistry: (params?: CallParams<XGovRegistryArgs["obj"]["pause_registry()void"] | XGovRegistryArgs["tuple"]["pause_registry()void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `pause_proposals()void` ABI method.
         *
         * Pauses the creation of new Proposals.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        pauseProposals: (params?: CallParams<XGovRegistryArgs["obj"]["pause_proposals()void"] | XGovRegistryArgs["tuple"]["pause_proposals()void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `resume_registry()void` ABI method.
         *
         * Resumes the xGov Registry non-administrative methods.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        resumeRegistry: (params?: CallParams<XGovRegistryArgs["obj"]["resume_registry()void"] | XGovRegistryArgs["tuple"]["resume_registry()void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `resume_proposals()void` ABI method.
         *
         * Resumes the creation of new Proposals.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        resumeProposals: (params?: CallParams<XGovRegistryArgs["obj"]["resume_proposals()void"] | XGovRegistryArgs["tuple"]["resume_proposals()void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_xgov_manager(address)void` ABI method.
         *
         * Sets the xGov Manager.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        setXgovManager: (params: CallParams<XGovRegistryArgs["obj"]["set_xgov_manager(address)void"] | XGovRegistryArgs["tuple"]["set_xgov_manager(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_payor(address)void` ABI method.
         *
         * Sets the xGov Payor.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        setPayor: (params: CallParams<XGovRegistryArgs["obj"]["set_payor(address)void"] | XGovRegistryArgs["tuple"]["set_payor(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_xgov_council(address)void` ABI method.
         *
         * Sets the xGov Council.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        setXgovCouncil: (params: CallParams<XGovRegistryArgs["obj"]["set_xgov_council(address)void"] | XGovRegistryArgs["tuple"]["set_xgov_council(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_xgov_subscriber(address)void` ABI method.
         *
         * Sets the xGov Subscriber.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        setXgovSubscriber: (params: CallParams<XGovRegistryArgs["obj"]["set_xgov_subscriber(address)void"] | XGovRegistryArgs["tuple"]["set_xgov_subscriber(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_kyc_provider(address)void` ABI method.
         *
         * Sets the KYC provider.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        setKycProvider: (params: CallParams<XGovRegistryArgs["obj"]["set_kyc_provider(address)void"] | XGovRegistryArgs["tuple"]["set_kyc_provider(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_committee_manager(address)void` ABI method.
         *
         * Sets the Committee Manager.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        setCommitteeManager: (params: CallParams<XGovRegistryArgs["obj"]["set_committee_manager(address)void"] | XGovRegistryArgs["tuple"]["set_committee_manager(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_xgov_daemon(address)void` ABI method.
         *
         * Sets the xGov Daemon.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        setXgovDaemon: (params: CallParams<XGovRegistryArgs["obj"]["set_xgov_daemon(address)void"] | XGovRegistryArgs["tuple"]["set_xgov_daemon(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void` ABI method.
         *
         * Sets the configuration of the xGov Registry.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        configXgovRegistry: (params: CallParams<XGovRegistryArgs["obj"]["config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void"] | XGovRegistryArgs["tuple"]["config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `subscribe_xgov(address,pay)void` ABI method.
         *
         * Subscribes the sender to being an xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        subscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["subscribe_xgov(address,pay)void"] | XGovRegistryArgs["tuple"]["subscribe_xgov(address,pay)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `unsubscribe_xgov(address)void` ABI method.
         *
         * Unsubscribes the designated address from being an xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        unsubscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["unsubscribe_xgov(address)void"] | XGovRegistryArgs["tuple"]["unsubscribe_xgov(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `request_subscribe_xgov(address,address,uint64,pay)void` ABI method.
         *
         * Requests to subscribe to the xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        requestSubscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["request_subscribe_xgov(address,address,uint64,pay)void"] | XGovRegistryArgs["tuple"]["request_subscribe_xgov(address,address,uint64,pay)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `approve_subscribe_xgov(uint64)void` ABI method.
         *
         * Approves a subscribe request to xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        approveSubscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["approve_subscribe_xgov(uint64)void"] | XGovRegistryArgs["tuple"]["approve_subscribe_xgov(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `reject_subscribe_xgov(uint64)void` ABI method.
         *
         * Rejects a subscribe request to xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        rejectSubscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["reject_subscribe_xgov(uint64)void"] | XGovRegistryArgs["tuple"]["reject_subscribe_xgov(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_voting_account(address,address)void` ABI method.
         *
         * Sets the Voting Address for the xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        setVotingAccount: (params: CallParams<XGovRegistryArgs["obj"]["set_voting_account(address,address)void"] | XGovRegistryArgs["tuple"]["set_voting_account(address,address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `subscribe_proposer(pay)void` ABI method.
         *
         * Subscribes the sender to being a Proposer.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        subscribeProposer: (params: CallParams<XGovRegistryArgs["obj"]["subscribe_proposer(pay)void"] | XGovRegistryArgs["tuple"]["subscribe_proposer(pay)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_proposer_kyc(address,bool,uint64)void` ABI method.
         *
         * Sets a proposer's KYC status.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        setProposerKyc: (params: CallParams<XGovRegistryArgs["obj"]["set_proposer_kyc(address,bool,uint64)void"] | XGovRegistryArgs["tuple"]["set_proposer_kyc(address,bool,uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `declare_committee(byte[32],uint64,uint64)void` ABI method.
         *
         * Sets the xGov Committee in charge.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        declareCommittee: (params: CallParams<XGovRegistryArgs["obj"]["declare_committee(byte[32],uint64,uint64)void"] | XGovRegistryArgs["tuple"]["declare_committee(byte[32],uint64,uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `open_proposal(pay)uint64` ABI method.
         *
         * Creates a new Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        openProposal: (params: CallParams<XGovRegistryArgs["obj"]["open_proposal(pay)uint64"] | XGovRegistryArgs["tuple"]["open_proposal(pay)uint64"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `vote_proposal(uint64,address,uint64,uint64)void` ABI method.
         *
         * Votes on a Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        voteProposal: (params: CallParams<XGovRegistryArgs["obj"]["vote_proposal(uint64,address,uint64,uint64)void"] | XGovRegistryArgs["tuple"]["vote_proposal(uint64,address,uint64,uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `pay_grant_proposal(uint64)void` ABI method.
         *
         * Disburses the funds for an approved Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        payGrantProposal: (params: CallParams<XGovRegistryArgs["obj"]["pay_grant_proposal(uint64)void"] | XGovRegistryArgs["tuple"]["pay_grant_proposal(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `finalize_proposal(uint64)void` ABI method.
         *
         * Finalize a Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        finalizeProposal: (params: CallParams<XGovRegistryArgs["obj"]["finalize_proposal(uint64)void"] | XGovRegistryArgs["tuple"]["finalize_proposal(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `drop_proposal(uint64)void` ABI method.
         *
         * Drops a Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        dropProposal: (params: CallParams<XGovRegistryArgs["obj"]["drop_proposal(uint64)void"] | XGovRegistryArgs["tuple"]["drop_proposal(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `deposit_funds(pay)void` ABI method.
         *
         * Deposits xGov program funds into the xGov Treasury (xGov Registry Account).
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        depositFunds: (params: CallParams<XGovRegistryArgs["obj"]["deposit_funds(pay)void"] | XGovRegistryArgs["tuple"]["deposit_funds(pay)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `withdraw_funds(uint64)void` ABI method.
         *
         * Remove xGov program funds from the xGov Treasury (xGov Registry Account).
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        withdrawFunds: (params: CallParams<XGovRegistryArgs["obj"]["withdraw_funds(uint64)void"] | XGovRegistryArgs["tuple"]["withdraw_funds(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `withdraw_balance()void` ABI method.
         *
         * Withdraw outstanding Algos, excluding MBR and outstanding funds, from the xGov Registry.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        withdrawBalance: (params?: CallParams<XGovRegistryArgs["obj"]["withdraw_balance()void"] | XGovRegistryArgs["tuple"]["withdraw_balance()void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)` ABI method.
         *
         * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
         *
         * Returns the xGov Registry state.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        getState: (params?: CallParams<XGovRegistryArgs["obj"]["get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)"] | XGovRegistryArgs["tuple"]["get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `get_xgov_box(address)(address,uint64,uint64,uint64)` ABI method.
         *
         * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
         *
         * Returns the xGov box for the given address.
         *
         * @param params The params for the smart contract call
         * @returns The call params: The xGov box value
         */
        getXgovBox: (params: CallParams<XGovRegistryArgs["obj"]["get_xgov_box(address)(address,uint64,uint64,uint64)"] | XGovRegistryArgs["tuple"]["get_xgov_box(address)(address,uint64,uint64,uint64)"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `get_proposer_box(address)(bool,bool,uint64)` ABI method.
         *
         * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
         *
         * Returns the Proposer box for the given address.
         *
         * @param params The params for the smart contract call
         * @returns The call params: The Proposer box value
         */
        getProposerBox: (params: CallParams<XGovRegistryArgs["obj"]["get_proposer_box(address)(bool,bool,uint64)"] | XGovRegistryArgs["tuple"]["get_proposer_box(address)(bool,bool,uint64)"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `is_proposal(uint64)void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        isProposal: (params: CallParams<XGovRegistryArgs["obj"]["is_proposal(uint64)void"] | XGovRegistryArgs["tuple"]["is_proposal(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<AppCallMethodCall>;
    };
    /**
     * Create transactions for the current app
     */
    readonly createTransaction: {
        /**
         * Gets available update methods
         */
        update: {
            /**
             * Updates an existing instance of the XGovRegistry smart contract using the `update_xgov_registry()void` ABI method.
             *
             * Updates the xGov Registry contract.
             *
             * @param params The params for the smart contract call
             * @returns The update transaction
             */
            updateXgovRegistry: (params?: CallParams<XGovRegistryArgs["obj"]["update_xgov_registry()void"] | XGovRegistryArgs["tuple"]["update_xgov_registry()void"]> & AppClientCompilationParams) => Promise<{
                transactions: Transaction[];
                methodCalls: Map<number, import("algosdk").ABIMethod>;
                signers: Map<number, TransactionSigner>;
            }>;
        };
        /**
         * Makes a clear_state call to an existing instance of the XGovRegistry smart contract.
         *
         * @param params The params for the bare (raw) call
         * @returns The clearState result
         */
        clearState: (params?: Expand<AppClientBareCallParams>) => Promise<Transaction>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `pause_registry()void` ABI method.
         *
         * Pauses the xGov Registry non-administrative methods.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        pauseRegistry: (params?: CallParams<XGovRegistryArgs["obj"]["pause_registry()void"] | XGovRegistryArgs["tuple"]["pause_registry()void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `pause_proposals()void` ABI method.
         *
         * Pauses the creation of new Proposals.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        pauseProposals: (params?: CallParams<XGovRegistryArgs["obj"]["pause_proposals()void"] | XGovRegistryArgs["tuple"]["pause_proposals()void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `resume_registry()void` ABI method.
         *
         * Resumes the xGov Registry non-administrative methods.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        resumeRegistry: (params?: CallParams<XGovRegistryArgs["obj"]["resume_registry()void"] | XGovRegistryArgs["tuple"]["resume_registry()void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `resume_proposals()void` ABI method.
         *
         * Resumes the creation of new Proposals.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        resumeProposals: (params?: CallParams<XGovRegistryArgs["obj"]["resume_proposals()void"] | XGovRegistryArgs["tuple"]["resume_proposals()void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_xgov_manager(address)void` ABI method.
         *
         * Sets the xGov Manager.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        setXgovManager: (params: CallParams<XGovRegistryArgs["obj"]["set_xgov_manager(address)void"] | XGovRegistryArgs["tuple"]["set_xgov_manager(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_payor(address)void` ABI method.
         *
         * Sets the xGov Payor.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        setPayor: (params: CallParams<XGovRegistryArgs["obj"]["set_payor(address)void"] | XGovRegistryArgs["tuple"]["set_payor(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_xgov_council(address)void` ABI method.
         *
         * Sets the xGov Council.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        setXgovCouncil: (params: CallParams<XGovRegistryArgs["obj"]["set_xgov_council(address)void"] | XGovRegistryArgs["tuple"]["set_xgov_council(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_xgov_subscriber(address)void` ABI method.
         *
         * Sets the xGov Subscriber.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        setXgovSubscriber: (params: CallParams<XGovRegistryArgs["obj"]["set_xgov_subscriber(address)void"] | XGovRegistryArgs["tuple"]["set_xgov_subscriber(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_kyc_provider(address)void` ABI method.
         *
         * Sets the KYC provider.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        setKycProvider: (params: CallParams<XGovRegistryArgs["obj"]["set_kyc_provider(address)void"] | XGovRegistryArgs["tuple"]["set_kyc_provider(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_committee_manager(address)void` ABI method.
         *
         * Sets the Committee Manager.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        setCommitteeManager: (params: CallParams<XGovRegistryArgs["obj"]["set_committee_manager(address)void"] | XGovRegistryArgs["tuple"]["set_committee_manager(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_xgov_daemon(address)void` ABI method.
         *
         * Sets the xGov Daemon.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        setXgovDaemon: (params: CallParams<XGovRegistryArgs["obj"]["set_xgov_daemon(address)void"] | XGovRegistryArgs["tuple"]["set_xgov_daemon(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void` ABI method.
         *
         * Sets the configuration of the xGov Registry.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        configXgovRegistry: (params: CallParams<XGovRegistryArgs["obj"]["config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void"] | XGovRegistryArgs["tuple"]["config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `subscribe_xgov(address,pay)void` ABI method.
         *
         * Subscribes the sender to being an xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        subscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["subscribe_xgov(address,pay)void"] | XGovRegistryArgs["tuple"]["subscribe_xgov(address,pay)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `unsubscribe_xgov(address)void` ABI method.
         *
         * Unsubscribes the designated address from being an xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        unsubscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["unsubscribe_xgov(address)void"] | XGovRegistryArgs["tuple"]["unsubscribe_xgov(address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `request_subscribe_xgov(address,address,uint64,pay)void` ABI method.
         *
         * Requests to subscribe to the xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        requestSubscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["request_subscribe_xgov(address,address,uint64,pay)void"] | XGovRegistryArgs["tuple"]["request_subscribe_xgov(address,address,uint64,pay)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `approve_subscribe_xgov(uint64)void` ABI method.
         *
         * Approves a subscribe request to xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        approveSubscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["approve_subscribe_xgov(uint64)void"] | XGovRegistryArgs["tuple"]["approve_subscribe_xgov(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `reject_subscribe_xgov(uint64)void` ABI method.
         *
         * Rejects a subscribe request to xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        rejectSubscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["reject_subscribe_xgov(uint64)void"] | XGovRegistryArgs["tuple"]["reject_subscribe_xgov(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_voting_account(address,address)void` ABI method.
         *
         * Sets the Voting Address for the xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        setVotingAccount: (params: CallParams<XGovRegistryArgs["obj"]["set_voting_account(address,address)void"] | XGovRegistryArgs["tuple"]["set_voting_account(address,address)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `subscribe_proposer(pay)void` ABI method.
         *
         * Subscribes the sender to being a Proposer.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        subscribeProposer: (params: CallParams<XGovRegistryArgs["obj"]["subscribe_proposer(pay)void"] | XGovRegistryArgs["tuple"]["subscribe_proposer(pay)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_proposer_kyc(address,bool,uint64)void` ABI method.
         *
         * Sets a proposer's KYC status.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        setProposerKyc: (params: CallParams<XGovRegistryArgs["obj"]["set_proposer_kyc(address,bool,uint64)void"] | XGovRegistryArgs["tuple"]["set_proposer_kyc(address,bool,uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `declare_committee(byte[32],uint64,uint64)void` ABI method.
         *
         * Sets the xGov Committee in charge.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        declareCommittee: (params: CallParams<XGovRegistryArgs["obj"]["declare_committee(byte[32],uint64,uint64)void"] | XGovRegistryArgs["tuple"]["declare_committee(byte[32],uint64,uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `open_proposal(pay)uint64` ABI method.
         *
         * Creates a new Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        openProposal: (params: CallParams<XGovRegistryArgs["obj"]["open_proposal(pay)uint64"] | XGovRegistryArgs["tuple"]["open_proposal(pay)uint64"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `vote_proposal(uint64,address,uint64,uint64)void` ABI method.
         *
         * Votes on a Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        voteProposal: (params: CallParams<XGovRegistryArgs["obj"]["vote_proposal(uint64,address,uint64,uint64)void"] | XGovRegistryArgs["tuple"]["vote_proposal(uint64,address,uint64,uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `pay_grant_proposal(uint64)void` ABI method.
         *
         * Disburses the funds for an approved Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        payGrantProposal: (params: CallParams<XGovRegistryArgs["obj"]["pay_grant_proposal(uint64)void"] | XGovRegistryArgs["tuple"]["pay_grant_proposal(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `finalize_proposal(uint64)void` ABI method.
         *
         * Finalize a Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        finalizeProposal: (params: CallParams<XGovRegistryArgs["obj"]["finalize_proposal(uint64)void"] | XGovRegistryArgs["tuple"]["finalize_proposal(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `drop_proposal(uint64)void` ABI method.
         *
         * Drops a Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        dropProposal: (params: CallParams<XGovRegistryArgs["obj"]["drop_proposal(uint64)void"] | XGovRegistryArgs["tuple"]["drop_proposal(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `deposit_funds(pay)void` ABI method.
         *
         * Deposits xGov program funds into the xGov Treasury (xGov Registry Account).
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        depositFunds: (params: CallParams<XGovRegistryArgs["obj"]["deposit_funds(pay)void"] | XGovRegistryArgs["tuple"]["deposit_funds(pay)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `withdraw_funds(uint64)void` ABI method.
         *
         * Remove xGov program funds from the xGov Treasury (xGov Registry Account).
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        withdrawFunds: (params: CallParams<XGovRegistryArgs["obj"]["withdraw_funds(uint64)void"] | XGovRegistryArgs["tuple"]["withdraw_funds(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `withdraw_balance()void` ABI method.
         *
         * Withdraw outstanding Algos, excluding MBR and outstanding funds, from the xGov Registry.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        withdrawBalance: (params?: CallParams<XGovRegistryArgs["obj"]["withdraw_balance()void"] | XGovRegistryArgs["tuple"]["withdraw_balance()void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)` ABI method.
         *
         * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
         *
         * Returns the xGov Registry state.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        getState: (params?: CallParams<XGovRegistryArgs["obj"]["get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)"] | XGovRegistryArgs["tuple"]["get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `get_xgov_box(address)(address,uint64,uint64,uint64)` ABI method.
         *
         * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
         *
         * Returns the xGov box for the given address.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction: The xGov box value
         */
        getXgovBox: (params: CallParams<XGovRegistryArgs["obj"]["get_xgov_box(address)(address,uint64,uint64,uint64)"] | XGovRegistryArgs["tuple"]["get_xgov_box(address)(address,uint64,uint64,uint64)"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `get_proposer_box(address)(bool,bool,uint64)` ABI method.
         *
         * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
         *
         * Returns the Proposer box for the given address.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction: The Proposer box value
         */
        getProposerBox: (params: CallParams<XGovRegistryArgs["obj"]["get_proposer_box(address)(bool,bool,uint64)"] | XGovRegistryArgs["tuple"]["get_proposer_box(address)(bool,bool,uint64)"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `is_proposal(uint64)void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        isProposal: (params: CallParams<XGovRegistryArgs["obj"]["is_proposal(uint64)void"] | XGovRegistryArgs["tuple"]["is_proposal(uint64)void"]> & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            transactions: Transaction[];
            methodCalls: Map<number, import("algosdk").ABIMethod>;
            signers: Map<number, TransactionSigner>;
        }>;
    };
    /**
     * Send calls to the current app
     */
    readonly send: {
        /**
         * Gets available update methods
         */
        update: {
            /**
             * Updates an existing instance of the XGovRegistry smart contract using the `update_xgov_registry()void` ABI method.
             *
             * Updates the xGov Registry contract.
             *
             * @param params The params for the smart contract call
             * @returns The update result
             */
            updateXgovRegistry: (params?: CallParams<XGovRegistryArgs["obj"]["update_xgov_registry()void"] | XGovRegistryArgs["tuple"]["update_xgov_registry()void"]> & AppClientCompilationParams & SendParams) => Promise<{
                return: (undefined | XGovRegistryReturns["update_xgov_registry()void"]);
                compiledApproval?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
                compiledClear?: import("@algorandfoundation/algokit-utils/types/app").CompiledTeal | undefined;
                groupId: string;
                txIds: string[];
                returns?: ABIReturn[] | undefined;
                confirmations: modelsv2.PendingTransactionResponse[];
                transactions: Transaction[];
                confirmation: modelsv2.PendingTransactionResponse;
                transaction: Transaction;
            }>;
        };
        /**
         * Makes a clear_state call to an existing instance of the XGovRegistry smart contract.
         *
         * @param params The params for the bare (raw) call
         * @returns The clearState result
         */
        clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => Promise<{
            groupId: string;
            txIds: string[];
            returns?: ABIReturn[] | undefined;
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
            return?: ABIReturn | undefined;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `pause_registry()void` ABI method.
         *
         * Pauses the xGov Registry non-administrative methods.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        pauseRegistry: (params?: CallParams<XGovRegistryArgs["obj"]["pause_registry()void"] | XGovRegistryArgs["tuple"]["pause_registry()void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["pause_registry()void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `pause_proposals()void` ABI method.
         *
         * Pauses the creation of new Proposals.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        pauseProposals: (params?: CallParams<XGovRegistryArgs["obj"]["pause_proposals()void"] | XGovRegistryArgs["tuple"]["pause_proposals()void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["pause_proposals()void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `resume_registry()void` ABI method.
         *
         * Resumes the xGov Registry non-administrative methods.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        resumeRegistry: (params?: CallParams<XGovRegistryArgs["obj"]["resume_registry()void"] | XGovRegistryArgs["tuple"]["resume_registry()void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["resume_registry()void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `resume_proposals()void` ABI method.
         *
         * Resumes the creation of new Proposals.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        resumeProposals: (params?: CallParams<XGovRegistryArgs["obj"]["resume_proposals()void"] | XGovRegistryArgs["tuple"]["resume_proposals()void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["resume_proposals()void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_xgov_manager(address)void` ABI method.
         *
         * Sets the xGov Manager.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        setXgovManager: (params: CallParams<XGovRegistryArgs["obj"]["set_xgov_manager(address)void"] | XGovRegistryArgs["tuple"]["set_xgov_manager(address)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["set_xgov_manager(address)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_payor(address)void` ABI method.
         *
         * Sets the xGov Payor.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        setPayor: (params: CallParams<XGovRegistryArgs["obj"]["set_payor(address)void"] | XGovRegistryArgs["tuple"]["set_payor(address)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["set_payor(address)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_xgov_council(address)void` ABI method.
         *
         * Sets the xGov Council.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        setXgovCouncil: (params: CallParams<XGovRegistryArgs["obj"]["set_xgov_council(address)void"] | XGovRegistryArgs["tuple"]["set_xgov_council(address)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["set_xgov_council(address)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_xgov_subscriber(address)void` ABI method.
         *
         * Sets the xGov Subscriber.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        setXgovSubscriber: (params: CallParams<XGovRegistryArgs["obj"]["set_xgov_subscriber(address)void"] | XGovRegistryArgs["tuple"]["set_xgov_subscriber(address)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["set_xgov_subscriber(address)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_kyc_provider(address)void` ABI method.
         *
         * Sets the KYC provider.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        setKycProvider: (params: CallParams<XGovRegistryArgs["obj"]["set_kyc_provider(address)void"] | XGovRegistryArgs["tuple"]["set_kyc_provider(address)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["set_kyc_provider(address)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_committee_manager(address)void` ABI method.
         *
         * Sets the Committee Manager.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        setCommitteeManager: (params: CallParams<XGovRegistryArgs["obj"]["set_committee_manager(address)void"] | XGovRegistryArgs["tuple"]["set_committee_manager(address)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["set_committee_manager(address)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_xgov_daemon(address)void` ABI method.
         *
         * Sets the xGov Daemon.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        setXgovDaemon: (params: CallParams<XGovRegistryArgs["obj"]["set_xgov_daemon(address)void"] | XGovRegistryArgs["tuple"]["set_xgov_daemon(address)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["set_xgov_daemon(address)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void` ABI method.
         *
         * Sets the configuration of the xGov Registry.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        configXgovRegistry: (params: CallParams<XGovRegistryArgs["obj"]["config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void"] | XGovRegistryArgs["tuple"]["config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `subscribe_xgov(address,pay)void` ABI method.
         *
         * Subscribes the sender to being an xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        subscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["subscribe_xgov(address,pay)void"] | XGovRegistryArgs["tuple"]["subscribe_xgov(address,pay)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["subscribe_xgov(address,pay)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `unsubscribe_xgov(address)void` ABI method.
         *
         * Unsubscribes the designated address from being an xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        unsubscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["unsubscribe_xgov(address)void"] | XGovRegistryArgs["tuple"]["unsubscribe_xgov(address)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["unsubscribe_xgov(address)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `request_subscribe_xgov(address,address,uint64,pay)void` ABI method.
         *
         * Requests to subscribe to the xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        requestSubscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["request_subscribe_xgov(address,address,uint64,pay)void"] | XGovRegistryArgs["tuple"]["request_subscribe_xgov(address,address,uint64,pay)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["request_subscribe_xgov(address,address,uint64,pay)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `approve_subscribe_xgov(uint64)void` ABI method.
         *
         * Approves a subscribe request to xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        approveSubscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["approve_subscribe_xgov(uint64)void"] | XGovRegistryArgs["tuple"]["approve_subscribe_xgov(uint64)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["approve_subscribe_xgov(uint64)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `reject_subscribe_xgov(uint64)void` ABI method.
         *
         * Rejects a subscribe request to xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        rejectSubscribeXgov: (params: CallParams<XGovRegistryArgs["obj"]["reject_subscribe_xgov(uint64)void"] | XGovRegistryArgs["tuple"]["reject_subscribe_xgov(uint64)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["reject_subscribe_xgov(uint64)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_voting_account(address,address)void` ABI method.
         *
         * Sets the Voting Address for the xGov.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        setVotingAccount: (params: CallParams<XGovRegistryArgs["obj"]["set_voting_account(address,address)void"] | XGovRegistryArgs["tuple"]["set_voting_account(address,address)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["set_voting_account(address,address)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `subscribe_proposer(pay)void` ABI method.
         *
         * Subscribes the sender to being a Proposer.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        subscribeProposer: (params: CallParams<XGovRegistryArgs["obj"]["subscribe_proposer(pay)void"] | XGovRegistryArgs["tuple"]["subscribe_proposer(pay)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["subscribe_proposer(pay)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `set_proposer_kyc(address,bool,uint64)void` ABI method.
         *
         * Sets a proposer's KYC status.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        setProposerKyc: (params: CallParams<XGovRegistryArgs["obj"]["set_proposer_kyc(address,bool,uint64)void"] | XGovRegistryArgs["tuple"]["set_proposer_kyc(address,bool,uint64)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["set_proposer_kyc(address,bool,uint64)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `declare_committee(byte[32],uint64,uint64)void` ABI method.
         *
         * Sets the xGov Committee in charge.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        declareCommittee: (params: CallParams<XGovRegistryArgs["obj"]["declare_committee(byte[32],uint64,uint64)void"] | XGovRegistryArgs["tuple"]["declare_committee(byte[32],uint64,uint64)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["declare_committee(byte[32],uint64,uint64)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `open_proposal(pay)uint64` ABI method.
         *
         * Creates a new Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        openProposal: (params: CallParams<XGovRegistryArgs["obj"]["open_proposal(pay)uint64"] | XGovRegistryArgs["tuple"]["open_proposal(pay)uint64"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["open_proposal(pay)uint64"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `vote_proposal(uint64,address,uint64,uint64)void` ABI method.
         *
         * Votes on a Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        voteProposal: (params: CallParams<XGovRegistryArgs["obj"]["vote_proposal(uint64,address,uint64,uint64)void"] | XGovRegistryArgs["tuple"]["vote_proposal(uint64,address,uint64,uint64)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["vote_proposal(uint64,address,uint64,uint64)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `pay_grant_proposal(uint64)void` ABI method.
         *
         * Disburses the funds for an approved Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        payGrantProposal: (params: CallParams<XGovRegistryArgs["obj"]["pay_grant_proposal(uint64)void"] | XGovRegistryArgs["tuple"]["pay_grant_proposal(uint64)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["pay_grant_proposal(uint64)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `finalize_proposal(uint64)void` ABI method.
         *
         * Finalize a Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        finalizeProposal: (params: CallParams<XGovRegistryArgs["obj"]["finalize_proposal(uint64)void"] | XGovRegistryArgs["tuple"]["finalize_proposal(uint64)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["finalize_proposal(uint64)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `drop_proposal(uint64)void` ABI method.
         *
         * Drops a Proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        dropProposal: (params: CallParams<XGovRegistryArgs["obj"]["drop_proposal(uint64)void"] | XGovRegistryArgs["tuple"]["drop_proposal(uint64)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["drop_proposal(uint64)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `deposit_funds(pay)void` ABI method.
         *
         * Deposits xGov program funds into the xGov Treasury (xGov Registry Account).
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        depositFunds: (params: CallParams<XGovRegistryArgs["obj"]["deposit_funds(pay)void"] | XGovRegistryArgs["tuple"]["deposit_funds(pay)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["deposit_funds(pay)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `withdraw_funds(uint64)void` ABI method.
         *
         * Remove xGov program funds from the xGov Treasury (xGov Registry Account).
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        withdrawFunds: (params: CallParams<XGovRegistryArgs["obj"]["withdraw_funds(uint64)void"] | XGovRegistryArgs["tuple"]["withdraw_funds(uint64)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["withdraw_funds(uint64)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `withdraw_balance()void` ABI method.
         *
         * Withdraw outstanding Algos, excluding MBR and outstanding funds, from the xGov Registry.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        withdrawBalance: (params?: CallParams<XGovRegistryArgs["obj"]["withdraw_balance()void"] | XGovRegistryArgs["tuple"]["withdraw_balance()void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["withdraw_balance()void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)` ABI method.
         *
         * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
         *
         * Returns the xGov Registry state.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        getState: (params?: CallParams<XGovRegistryArgs["obj"]["get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)"] | XGovRegistryArgs["tuple"]["get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `get_xgov_box(address)(address,uint64,uint64,uint64)` ABI method.
         *
         * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
         *
         * Returns the xGov box for the given address.
         *
         * @param params The params for the smart contract call
         * @returns The call result: The xGov box value
         */
        getXgovBox: (params: CallParams<XGovRegistryArgs["obj"]["get_xgov_box(address)(address,uint64,uint64,uint64)"] | XGovRegistryArgs["tuple"]["get_xgov_box(address)(address,uint64,uint64,uint64)"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["get_xgov_box(address)(address,uint64,uint64,uint64)"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `get_proposer_box(address)(bool,bool,uint64)` ABI method.
         *
         * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
         *
         * Returns the Proposer box for the given address.
         *
         * @param params The params for the smart contract call
         * @returns The call result: The Proposer box value
         */
        getProposerBox: (params: CallParams<XGovRegistryArgs["obj"]["get_proposer_box(address)(bool,bool,uint64)"] | XGovRegistryArgs["tuple"]["get_proposer_box(address)(bool,bool,uint64)"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["get_proposer_box(address)(bool,bool,uint64)"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
        /**
         * Makes a call to the XGovRegistry smart contract using the `is_proposal(uint64)void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        isProposal: (params: CallParams<XGovRegistryArgs["obj"]["is_proposal(uint64)void"] | XGovRegistryArgs["tuple"]["is_proposal(uint64)void"]> & SendParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
        }) => Promise<{
            return: (undefined | XGovRegistryReturns["is_proposal(uint64)void"]);
            returns?: ABIReturn[] | undefined | undefined;
            groupId: string;
            txIds: string[];
            confirmations: modelsv2.PendingTransactionResponse[];
            transactions: Transaction[];
            confirmation: modelsv2.PendingTransactionResponse;
            transaction: Transaction;
        }>;
    };
    /**
     * Clone this app client with different params
     *
     * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
     * @returns A new app client with the altered params
     */
    clone(params: CloneAppClientParams): XGovRegistryClient;
    /**
     * Makes a readonly (simulated) call to the XGovRegistry smart contract using the `get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the xGov Registry state.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getState(params?: CallParams<XGovRegistryArgs['obj']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'] | XGovRegistryArgs['tuple']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)']>): Promise<TypedGlobalState>;
    /**
     * Makes a readonly (simulated) call to the XGovRegistry smart contract using the `get_xgov_box(address)(address,uint64,uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the xGov box for the given address.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The xGov box value
     */
    getXgovBox(params: CallParams<XGovRegistryArgs['obj']['get_xgov_box(address)(address,uint64,uint64,uint64)'] | XGovRegistryArgs['tuple']['get_xgov_box(address)(address,uint64,uint64,uint64)']>): Promise<XGovBoxValue>;
    /**
     * Makes a readonly (simulated) call to the XGovRegistry smart contract using the `get_proposer_box(address)(bool,bool,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the Proposer box for the given address.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The Proposer box value
     */
    getProposerBox(params: CallParams<XGovRegistryArgs['obj']['get_proposer_box(address)(bool,bool,uint64)'] | XGovRegistryArgs['tuple']['get_proposer_box(address)(bool,bool,uint64)']>): Promise<ProposerBoxValue>;
    /**
     * Methods to access state for the current XGovRegistry app
     */
    state: {
        /**
         * Methods to access global state for the current XGovRegistry app
         */
        global: {
            /**
             * Get all current keyed values from global state
             */
            getAll: () => Promise<Partial<Expand<GlobalKeysState>>>;
            /**
             * Get the current value of the committee_id key in global state
             */
            committeeId: () => Promise<BinaryState>;
            /**
             * Get the current value of the committee_manager key in global state
             */
            committeeManager: () => Promise<BinaryState>;
            /**
             * Get the current value of the committee_members key in global state
             */
            committeeMembers: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the committee_votes key in global state
             */
            committeeVotes: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the daemon_ops_funding_bps key in global state
             */
            daemonOpsFundingBps: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the discussion_duration_large key in global state
             */
            discussionDurationLarge: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the discussion_duration_medium key in global state
             */
            discussionDurationMedium: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the discussion_duration_small key in global state
             */
            discussionDurationSmall: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the discussion_duration_xlarge key in global state
             */
            discussionDurationXlarge: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the kyc_provider key in global state
             */
            kycProvider: () => Promise<BinaryState>;
            /**
             * Get the current value of the max_committee_size key in global state
             */
            maxCommitteeSize: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the max_requested_amount_large key in global state
             */
            maxRequestedAmountLarge: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the max_requested_amount_medium key in global state
             */
            maxRequestedAmountMedium: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the max_requested_amount_small key in global state
             */
            maxRequestedAmountSmall: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the min_requested_amount key in global state
             */
            minRequestedAmount: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the open_proposal_fee key in global state
             */
            openProposalFee: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the outstanding_funds key in global state
             */
            outstandingFunds: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the paused_proposals key in global state
             */
            pausedProposals: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the paused_registry key in global state
             */
            pausedRegistry: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the pending_proposals key in global state
             */
            pendingProposals: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the proposal_commitment_bps key in global state
             */
            proposalCommitmentBps: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the proposer_fee key in global state
             */
            proposerFee: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the quorum_large key in global state
             */
            quorumLarge: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the quorum_medium key in global state
             */
            quorumMedium: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the quorum_small key in global state
             */
            quorumSmall: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the request_id key in global state
             */
            requestId: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the voting_duration_large key in global state
             */
            votingDurationLarge: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the voting_duration_medium key in global state
             */
            votingDurationMedium: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the voting_duration_small key in global state
             */
            votingDurationSmall: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the voting_duration_xlarge key in global state
             */
            votingDurationXlarge: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the weighted_quorum_large key in global state
             */
            weightedQuorumLarge: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the weighted_quorum_medium key in global state
             */
            weightedQuorumMedium: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the weighted_quorum_small key in global state
             */
            weightedQuorumSmall: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the xgov_council key in global state
             */
            xgovCouncil: () => Promise<BinaryState>;
            /**
             * Get the current value of the xgov_daemon key in global state
             */
            xgovDaemon: () => Promise<BinaryState>;
            /**
             * Get the current value of the xgov_fee key in global state
             */
            xgovFee: () => Promise<bigint | undefined>;
            /**
             * Get the current value of the xgov_manager key in global state
             */
            xgovManager: () => Promise<BinaryState>;
            /**
             * Get the current value of the xgov_payor key in global state
             */
            xgovPayor: () => Promise<BinaryState>;
            /**
             * Get the current value of the xgov_subscriber key in global state
             */
            xgovSubscriber: () => Promise<BinaryState>;
            /**
             * Get the current value of the xgovs key in global state
             */
            xgovs: () => Promise<bigint | undefined>;
        };
    };
    newGroup(): XGovRegistryComposer;
}
export type XGovRegistryComposer<TReturns extends [...any[]] = []> = {
    /**
     * Calls the pause_registry()void ABI method.
     *
     * Pauses the xGov Registry non-administrative methods.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    pauseRegistry(params?: CallParams<XGovRegistryArgs['obj']['pause_registry()void'] | XGovRegistryArgs['tuple']['pause_registry()void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['pause_registry()void'] | undefined]>;
    /**
     * Calls the pause_proposals()void ABI method.
     *
     * Pauses the creation of new Proposals.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    pauseProposals(params?: CallParams<XGovRegistryArgs['obj']['pause_proposals()void'] | XGovRegistryArgs['tuple']['pause_proposals()void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['pause_proposals()void'] | undefined]>;
    /**
     * Calls the resume_registry()void ABI method.
     *
     * Resumes the xGov Registry non-administrative methods.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    resumeRegistry(params?: CallParams<XGovRegistryArgs['obj']['resume_registry()void'] | XGovRegistryArgs['tuple']['resume_registry()void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['resume_registry()void'] | undefined]>;
    /**
     * Calls the resume_proposals()void ABI method.
     *
     * Resumes the creation of new Proposals.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    resumeProposals(params?: CallParams<XGovRegistryArgs['obj']['resume_proposals()void'] | XGovRegistryArgs['tuple']['resume_proposals()void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['resume_proposals()void'] | undefined]>;
    /**
     * Calls the set_xgov_manager(address)void ABI method.
     *
     * Sets the xGov Manager.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    setXgovManager(params?: CallParams<XGovRegistryArgs['obj']['set_xgov_manager(address)void'] | XGovRegistryArgs['tuple']['set_xgov_manager(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_xgov_manager(address)void'] | undefined]>;
    /**
     * Calls the set_payor(address)void ABI method.
     *
     * Sets the xGov Payor.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    setPayor(params?: CallParams<XGovRegistryArgs['obj']['set_payor(address)void'] | XGovRegistryArgs['tuple']['set_payor(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_payor(address)void'] | undefined]>;
    /**
     * Calls the set_xgov_council(address)void ABI method.
     *
     * Sets the xGov Council.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    setXgovCouncil(params?: CallParams<XGovRegistryArgs['obj']['set_xgov_council(address)void'] | XGovRegistryArgs['tuple']['set_xgov_council(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_xgov_council(address)void'] | undefined]>;
    /**
     * Calls the set_xgov_subscriber(address)void ABI method.
     *
     * Sets the xGov Subscriber.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    setXgovSubscriber(params?: CallParams<XGovRegistryArgs['obj']['set_xgov_subscriber(address)void'] | XGovRegistryArgs['tuple']['set_xgov_subscriber(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_xgov_subscriber(address)void'] | undefined]>;
    /**
     * Calls the set_kyc_provider(address)void ABI method.
     *
     * Sets the KYC provider.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    setKycProvider(params?: CallParams<XGovRegistryArgs['obj']['set_kyc_provider(address)void'] | XGovRegistryArgs['tuple']['set_kyc_provider(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_kyc_provider(address)void'] | undefined]>;
    /**
     * Calls the set_committee_manager(address)void ABI method.
     *
     * Sets the Committee Manager.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    setCommitteeManager(params?: CallParams<XGovRegistryArgs['obj']['set_committee_manager(address)void'] | XGovRegistryArgs['tuple']['set_committee_manager(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_committee_manager(address)void'] | undefined]>;
    /**
     * Calls the set_xgov_daemon(address)void ABI method.
     *
     * Sets the xGov Daemon.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    setXgovDaemon(params?: CallParams<XGovRegistryArgs['obj']['set_xgov_daemon(address)void'] | XGovRegistryArgs['tuple']['set_xgov_daemon(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_xgov_daemon(address)void'] | undefined]>;
    /**
     * Calls the config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void ABI method.
     *
     * Sets the configuration of the xGov Registry.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    configXgovRegistry(params?: CallParams<XGovRegistryArgs['obj']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void'] | XGovRegistryArgs['tuple']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void'] | undefined]>;
    /**
     * Calls the subscribe_xgov(address,pay)void ABI method.
     *
     * Subscribes the sender to being an xGov.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    subscribeXgov(params?: CallParams<XGovRegistryArgs['obj']['subscribe_xgov(address,pay)void'] | XGovRegistryArgs['tuple']['subscribe_xgov(address,pay)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['subscribe_xgov(address,pay)void'] | undefined]>;
    /**
     * Calls the unsubscribe_xgov(address)void ABI method.
     *
     * Unsubscribes the designated address from being an xGov.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    unsubscribeXgov(params?: CallParams<XGovRegistryArgs['obj']['unsubscribe_xgov(address)void'] | XGovRegistryArgs['tuple']['unsubscribe_xgov(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['unsubscribe_xgov(address)void'] | undefined]>;
    /**
     * Calls the request_subscribe_xgov(address,address,uint64,pay)void ABI method.
     *
     * Requests to subscribe to the xGov.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    requestSubscribeXgov(params?: CallParams<XGovRegistryArgs['obj']['request_subscribe_xgov(address,address,uint64,pay)void'] | XGovRegistryArgs['tuple']['request_subscribe_xgov(address,address,uint64,pay)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['request_subscribe_xgov(address,address,uint64,pay)void'] | undefined]>;
    /**
     * Calls the approve_subscribe_xgov(uint64)void ABI method.
     *
     * Approves a subscribe request to xGov.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    approveSubscribeXgov(params?: CallParams<XGovRegistryArgs['obj']['approve_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['approve_subscribe_xgov(uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['approve_subscribe_xgov(uint64)void'] | undefined]>;
    /**
     * Calls the reject_subscribe_xgov(uint64)void ABI method.
     *
     * Rejects a subscribe request to xGov.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    rejectSubscribeXgov(params?: CallParams<XGovRegistryArgs['obj']['reject_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['reject_subscribe_xgov(uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['reject_subscribe_xgov(uint64)void'] | undefined]>;
    /**
     * Calls the set_voting_account(address,address)void ABI method.
     *
     * Sets the Voting Address for the xGov.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    setVotingAccount(params?: CallParams<XGovRegistryArgs['obj']['set_voting_account(address,address)void'] | XGovRegistryArgs['tuple']['set_voting_account(address,address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_voting_account(address,address)void'] | undefined]>;
    /**
     * Calls the subscribe_proposer(pay)void ABI method.
     *
     * Subscribes the sender to being a Proposer.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    subscribeProposer(params?: CallParams<XGovRegistryArgs['obj']['subscribe_proposer(pay)void'] | XGovRegistryArgs['tuple']['subscribe_proposer(pay)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['subscribe_proposer(pay)void'] | undefined]>;
    /**
     * Calls the set_proposer_kyc(address,bool,uint64)void ABI method.
     *
     * Sets a proposer's KYC status.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    setProposerKyc(params?: CallParams<XGovRegistryArgs['obj']['set_proposer_kyc(address,bool,uint64)void'] | XGovRegistryArgs['tuple']['set_proposer_kyc(address,bool,uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_proposer_kyc(address,bool,uint64)void'] | undefined]>;
    /**
     * Calls the declare_committee(byte[32],uint64,uint64)void ABI method.
     *
     * Sets the xGov Committee in charge.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    declareCommittee(params?: CallParams<XGovRegistryArgs['obj']['declare_committee(byte[32],uint64,uint64)void'] | XGovRegistryArgs['tuple']['declare_committee(byte[32],uint64,uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['declare_committee(byte[32],uint64,uint64)void'] | undefined]>;
    /**
     * Calls the open_proposal(pay)uint64 ABI method.
     *
     * Creates a new Proposal.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    openProposal(params?: CallParams<XGovRegistryArgs['obj']['open_proposal(pay)uint64'] | XGovRegistryArgs['tuple']['open_proposal(pay)uint64']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['open_proposal(pay)uint64'] | undefined]>;
    /**
     * Calls the vote_proposal(uint64,address,uint64,uint64)void ABI method.
     *
     * Votes on a Proposal.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    voteProposal(params?: CallParams<XGovRegistryArgs['obj']['vote_proposal(uint64,address,uint64,uint64)void'] | XGovRegistryArgs['tuple']['vote_proposal(uint64,address,uint64,uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['vote_proposal(uint64,address,uint64,uint64)void'] | undefined]>;
    /**
     * Calls the pay_grant_proposal(uint64)void ABI method.
     *
     * Disburses the funds for an approved Proposal.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    payGrantProposal(params?: CallParams<XGovRegistryArgs['obj']['pay_grant_proposal(uint64)void'] | XGovRegistryArgs['tuple']['pay_grant_proposal(uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['pay_grant_proposal(uint64)void'] | undefined]>;
    /**
     * Calls the finalize_proposal(uint64)void ABI method.
     *
     * Finalize a Proposal.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    finalizeProposal(params?: CallParams<XGovRegistryArgs['obj']['finalize_proposal(uint64)void'] | XGovRegistryArgs['tuple']['finalize_proposal(uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['finalize_proposal(uint64)void'] | undefined]>;
    /**
     * Calls the drop_proposal(uint64)void ABI method.
     *
     * Drops a Proposal.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    dropProposal(params?: CallParams<XGovRegistryArgs['obj']['drop_proposal(uint64)void'] | XGovRegistryArgs['tuple']['drop_proposal(uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['drop_proposal(uint64)void'] | undefined]>;
    /**
     * Calls the deposit_funds(pay)void ABI method.
     *
     * Deposits xGov program funds into the xGov Treasury (xGov Registry Account).
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    depositFunds(params?: CallParams<XGovRegistryArgs['obj']['deposit_funds(pay)void'] | XGovRegistryArgs['tuple']['deposit_funds(pay)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['deposit_funds(pay)void'] | undefined]>;
    /**
     * Calls the withdraw_funds(uint64)void ABI method.
     *
     * Remove xGov program funds from the xGov Treasury (xGov Registry Account).
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    withdrawFunds(params?: CallParams<XGovRegistryArgs['obj']['withdraw_funds(uint64)void'] | XGovRegistryArgs['tuple']['withdraw_funds(uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['withdraw_funds(uint64)void'] | undefined]>;
    /**
     * Calls the withdraw_balance()void ABI method.
     *
     * Withdraw outstanding Algos, excluding MBR and outstanding funds, from the xGov Registry.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    withdrawBalance(params?: CallParams<XGovRegistryArgs['obj']['withdraw_balance()void'] | XGovRegistryArgs['tuple']['withdraw_balance()void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['withdraw_balance()void'] | undefined]>;
    /**
     * Calls the get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64) ABI method.
     *
     * Returns the xGov Registry state.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    getState(params?: CallParams<XGovRegistryArgs['obj']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'] | XGovRegistryArgs['tuple']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'] | undefined]>;
    /**
     * Calls the get_xgov_box(address)(address,uint64,uint64,uint64) ABI method.
     *
     * Returns the xGov box for the given address.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    getXgovBox(params?: CallParams<XGovRegistryArgs['obj']['get_xgov_box(address)(address,uint64,uint64,uint64)'] | XGovRegistryArgs['tuple']['get_xgov_box(address)(address,uint64,uint64,uint64)']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['get_xgov_box(address)(address,uint64,uint64,uint64)'] | undefined]>;
    /**
     * Calls the get_proposer_box(address)(bool,bool,uint64) ABI method.
     *
     * Returns the Proposer box for the given address.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    getProposerBox(params?: CallParams<XGovRegistryArgs['obj']['get_proposer_box(address)(bool,bool,uint64)'] | XGovRegistryArgs['tuple']['get_proposer_box(address)(bool,bool,uint64)']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['get_proposer_box(address)(bool,bool,uint64)'] | undefined]>;
    /**
     * Calls the is_proposal(uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    isProposal(params?: CallParams<XGovRegistryArgs['obj']['is_proposal(uint64)void'] | XGovRegistryArgs['tuple']['is_proposal(uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['is_proposal(uint64)void'] | undefined]>;
    /**
     * Gets available update methods
     */
    readonly update: {
        /**
         * Updates an existing instance of the XGovRegistry smart contract using the update_xgov_registry()void ABI method.
         *
         * @param args The arguments for the smart contract call
         * @param params Any additional parameters for the call
         * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
         */
        updateXgovRegistry(params?: CallParams<XGovRegistryArgs['obj']['update_xgov_registry()void'] | XGovRegistryArgs['tuple']['update_xgov_registry()void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['update_xgov_registry()void'] | undefined]>;
    };
    /**
     * Makes a clear_state call to an existing instance of the XGovRegistry smart contract.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    clearState(params?: AppClientBareCallParams): XGovRegistryComposer<[...TReturns, undefined]>;
    /**
     * Adds a transaction to the composer
     *
     * @param txn A transaction to add to the transaction group
     * @param signer The optional signer to use when signing this transaction.
     */
    addTransaction(txn: Transaction, signer?: TransactionSigner): XGovRegistryComposer<TReturns>;
    /**
     * Returns the underlying AtomicTransactionComposer instance
     */
    composer(): Promise<TransactionComposer>;
    /**
     * Simulates the transaction group and returns the result
     */
    simulate(): Promise<XGovRegistryComposerResults<TReturns> & {
        simulateResponse: SimulateResponse;
    }>;
    simulate(options: SkipSignaturesSimulateOptions): Promise<XGovRegistryComposerResults<TReturns> & {
        simulateResponse: SimulateResponse;
    }>;
    simulate(options: RawSimulateOptions): Promise<XGovRegistryComposerResults<TReturns> & {
        simulateResponse: SimulateResponse;
    }>;
    /**
     * Sends the transaction group to the network and returns the results
     */
    send(params?: SendParams): Promise<XGovRegistryComposerResults<TReturns>>;
};
export type XGovRegistryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
    returns: TReturns;
}>;
