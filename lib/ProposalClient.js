import { getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56';
import { AppClient as _AppClient, } from '@algorandfoundation/algokit-utils/types/app-client';
import { AppFactory as _AppFactory } from '@algorandfoundation/algokit-utils/types/app-factory';
export const APP_SPEC = { "arcs": [], "name": "Proposal", "structs": { "ProposalTypedGlobalState": [{ "name": "proposer", "type": "address" }, { "name": "registryAppId", "type": "uint64" }, { "name": "title", "type": "string" }, { "name": "submissionTs", "type": "uint64" }, { "name": "finalizationTs", "type": "uint64" }, { "name": "voteOpenTs", "type": "uint64" }, { "name": "status", "type": "uint64" }, { "name": "fundingCategory", "type": "uint64" }, { "name": "focus", "type": "uint8" }, { "name": "fundingType", "type": "uint64" }, { "name": "requestedAmount", "type": "uint64" }, { "name": "lockedAmount", "type": "uint64" }, { "name": "committeeId", "type": "byte[32]" }, { "name": "committeeMembers", "type": "uint64" }, { "name": "committeeVotes", "type": "uint64" }, { "name": "votedMembers", "type": "uint64" }, { "name": "approvals", "type": "uint64" }, { "name": "rejections", "type": "uint64" }, { "name": "nulls", "type": "uint64" }] }, "methods": [{ "name": "create", "desc": "Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.", "args": [{ "name": "proposer", "type": "address", "desc": "Address of the proposer" }], "returns": { "type": "void" }, "events": [], "actions": { "create": ["NoOp"], "call": [] } }, { "name": "submit", "desc": "Submit the first draft of the proposal.", "args": [{ "name": "payment", "type": "pay", "desc": "Commitment payment transaction from the proposer to the contract" }, { "name": "title", "type": "string", "desc": "Proposal title, max TITLE_MAX_BYTES bytes" }, { "name": "funding_type", "type": "uint64", "desc": "Funding type (Proactive / Retroactive)" }, { "name": "requested_amount", "type": "uint64", "desc": "Requested amount in microAlgos" }, { "name": "focus", "type": "uint8", "desc": "Proposal focus area" }], "returns": { "type": "void" }, "events": [], "actions": { "create": [], "call": ["NoOp"] } }, { "name": "upload_metadata", "desc": "Upload the proposal metadata.", "args": [{ "name": "payload", "type": "byte[]", "desc": "Metadata payload" }, { "name": "is_first_in_group", "type": "bool", "desc": "True if this is the first upload call in a group transaction" }], "returns": { "type": "void" }, "events": [], "actions": { "create": [], "call": ["NoOp"] } }, { "name": "drop", "desc": "Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.", "args": [], "returns": { "type": "string" }, "events": [], "actions": { "create": [], "call": ["NoOp"] } }, { "name": "finalize", "desc": "Finalize the proposal.", "args": [], "returns": { "type": "void" }, "events": [], "actions": { "create": [], "call": ["NoOp"] } }, { "name": "assign_voters", "desc": "Assign multiple voters to the proposal.", "args": [{ "name": "voters", "type": "(address,uint64)[]", "desc": "List of voter addresses with their voting power" }], "returns": { "type": "void" }, "events": [], "actions": { "create": [], "call": ["NoOp"] } }, { "name": "vote", "desc": "Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.", "args": [{ "name": "voter", "type": "address", "desc": "Voter address" }, { "name": "approvals", "type": "uint64", "desc": "Number of approvals" }, { "name": "rejections", "type": "uint64", "desc": "Number of rejections" }], "returns": { "type": "string" }, "events": [], "actions": { "create": [], "call": ["NoOp"] } }, { "name": "scrutiny", "desc": "Scrutinize the proposal.", "args": [], "returns": { "type": "void" }, "events": [], "actions": { "create": [], "call": ["NoOp"] } }, { "name": "review", "desc": "Review the proposal.", "args": [{ "name": "block", "type": "bool", "desc": "Whether to block the proposal or not" }], "returns": { "type": "void" }, "events": [], "actions": { "create": [], "call": ["NoOp"] } }, { "name": "fund", "desc": "Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.", "args": [], "returns": { "type": "string" }, "events": [], "actions": { "create": [], "call": ["NoOp"] } }, { "name": "unassign_voters", "desc": "Unassign voters from the proposal.", "args": [{ "name": "voters", "type": "address[]", "desc": "List of voters to be unassigned" }], "returns": { "type": "void" }, "events": [], "actions": { "create": [], "call": ["NoOp"] } }, { "name": "decommission", "desc": "Decommission the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.", "args": [], "returns": { "type": "string" }, "events": [], "actions": { "create": [], "call": ["NoOp"] } }, { "name": "delete", "desc": "Delete the proposal.", "args": [], "returns": { "type": "void" }, "events": [], "actions": { "create": [], "call": ["DeleteApplication"] } }, { "name": "get_state", "desc": "Get the proposal state.", "args": [], "returns": { "type": "(address,uint64,string,uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)", "desc": "The proposal state", "struct": "ProposalTypedGlobalState" }, "events": [], "readonly": true, "actions": { "create": [], "call": ["NoOp"] } }, { "name": "op_up", "args": [], "returns": { "type": "void" }, "events": [], "actions": { "create": [], "call": ["NoOp"] } }], "state": { "schema": { "global": { "ints": 18, "bytes": 3 }, "local": { "ints": 0, "bytes": 0 } }, "keys": { "global": { "approvals": { "key": "YXBwcm92YWxz", "keyType": "AVMString", "valueType": "AVMUint64" }, "assigned_votes": { "key": "YXNzaWduZWRfdm90ZXM=", "keyType": "AVMString", "valueType": "AVMUint64" }, "committee_id": { "key": "Y29tbWl0dGVlX2lk", "keyType": "AVMString", "valueType": "AVMBytes" }, "committee_members": { "key": "Y29tbWl0dGVlX21lbWJlcnM=", "keyType": "AVMString", "valueType": "AVMUint64" }, "committee_votes": { "key": "Y29tbWl0dGVlX3ZvdGVz", "keyType": "AVMString", "valueType": "AVMUint64" }, "finalization_ts": { "key": "ZmluYWxpemF0aW9uX3RpbWVzdGFtcA==", "keyType": "AVMString", "valueType": "AVMUint64" }, "focus": { "key": "Zm9jdXM=", "keyType": "AVMString", "valueType": "AVMUint64" }, "funding_category": { "key": "ZnVuZGluZ19jYXRlZ29yeQ==", "keyType": "AVMString", "valueType": "AVMUint64" }, "funding_type": { "key": "ZnVuZGluZ190eXBl", "keyType": "AVMString", "valueType": "AVMUint64" }, "locked_amount": { "key": "bG9ja2VkX2Ftb3VudA==", "keyType": "AVMString", "valueType": "AVMUint64" }, "nulls": { "key": "bnVsbHM=", "keyType": "AVMString", "valueType": "AVMUint64" }, "proposer": { "key": "cHJvcG9zZXI=", "keyType": "AVMString", "valueType": "AVMBytes" }, "registry_app_id": { "key": "cmVnaXN0cnlfYXBwX2lk", "keyType": "AVMString", "valueType": "AVMUint64" }, "rejections": { "key": "cmVqZWN0aW9ucw==", "keyType": "AVMString", "valueType": "AVMUint64" }, "requested_amount": { "key": "cmVxdWVzdGVkX2Ftb3VudA==", "keyType": "AVMString", "valueType": "AVMUint64" }, "status": { "key": "c3RhdHVz", "keyType": "AVMString", "valueType": "AVMUint64" }, "submission_ts": { "key": "c3VibWlzc2lvbl90aW1lc3RhbXA=", "keyType": "AVMString", "valueType": "AVMUint64" }, "title": { "key": "dGl0bGU=", "keyType": "AVMString", "valueType": "AVMBytes" }, "vote_open_ts": { "key": "dm90ZV9vcGVuaW5nX3RpbWVzdGFtcA==", "keyType": "AVMString", "valueType": "AVMUint64" }, "voted_members": { "key": "dm90ZWRfbWVtYmVycw==", "keyType": "AVMString", "valueType": "AVMUint64" }, "voters_count": { "key": "dm90ZXJzX2NvdW50", "keyType": "AVMString", "valueType": "AVMUint64" } }, "local": {}, "box": {} }, "maps": { "global": {}, "local": {}, "box": {} } }, "source": { "approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K" }, "bareActions": { "create": [], "call": [] } };
class BinaryStateValue {
    value;
    constructor(value) {
        this.value = value;
    }
    asByteArray() {
        return this.value;
    }
    asString() {
        return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined;
    }
}
/**
 * Converts the ABI tuple representation of a ProposalTypedGlobalState to the struct representation
 */
export function ProposalTypedGlobalStateFromTuple(abiTuple) {
    return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalTypedGlobalState, APP_SPEC.structs);
}
/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Proposal smart contract
 */
export class ProposalParamsFactory {
    /**
     * Gets available create ABI call param factories
     */
    static get create() {
        return {
            _resolveByMethod(params) {
                switch (params.method) {
                    case 'create':
                    case 'create(address)void':
                        return ProposalParamsFactory.create.create(params);
                }
                throw new Error(`Unknown ' + verb + ' method`);
            },
            /**
             * Constructs create ABI call params for the Proposal smart contract using the create(address)void ABI method
             *
             * @param params Parameters for the call
             * @returns An `AppClientMethodCallParams` object for the call
             */
            create(params) {
                return {
                    ...params,
                    method: 'create(address)void',
                    args: Array.isArray(params.args) ? params.args : [params.args.proposer],
                };
            },
        };
    }
    /**
     * Gets available delete ABI call param factories
     */
    static get delete() {
        return {
            _resolveByMethod(params) {
                switch (params.method) {
                    case 'delete':
                    case 'delete()void':
                        return ProposalParamsFactory.delete.delete(params);
                }
                throw new Error(`Unknown ' + verb + ' method`);
            },
            /**
             * Constructs delete ABI call params for the Proposal smart contract using the delete()void ABI method
             *
             * @param params Parameters for the call
             * @returns An `AppClientMethodCallParams` object for the call
             */
            delete(params) {
                return {
                    ...params,
                    method: 'delete()void',
                    args: Array.isArray(params.args) ? params.args : [],
                };
            },
        };
    }
    /**
     * Constructs a no op call for the submit(pay,string,uint64,uint64,uint8)void ABI method
     *
     * Submit the first draft of the proposal.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static submit(params) {
        return {
            ...params,
            method: 'submit(pay,string,uint64,uint64,uint8)void',
            args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.title, params.args.fundingType, params.args.requestedAmount, params.args.focus],
        };
    }
    /**
     * Constructs a no op call for the upload_metadata(byte[],bool)void ABI method
     *
     * Upload the proposal metadata.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static uploadMetadata(params) {
        return {
            ...params,
            method: 'upload_metadata(byte[],bool)void',
            args: Array.isArray(params.args) ? params.args : [params.args.payload, params.args.isFirstInGroup],
        };
    }
    /**
     * Constructs a no op call for the drop()string ABI method
     *
     * Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static drop(params) {
        return {
            ...params,
            method: 'drop()string',
            args: Array.isArray(params.args) ? params.args : [],
        };
    }
    /**
     * Constructs a no op call for the finalize()void ABI method
     *
     * Finalize the proposal.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static finalize(params) {
        return {
            ...params,
            method: 'finalize()void',
            args: Array.isArray(params.args) ? params.args : [],
        };
    }
    /**
     * Constructs a no op call for the assign_voters((address,uint64)[])void ABI method
     *
     * Assign multiple voters to the proposal.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static assignVoters(params) {
        return {
            ...params,
            method: 'assign_voters((address,uint64)[])void',
            args: Array.isArray(params.args) ? params.args : [params.args.voters],
        };
    }
    /**
     * Constructs a no op call for the vote(address,uint64,uint64)string ABI method
     *
     * Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static vote(params) {
        return {
            ...params,
            method: 'vote(address,uint64,uint64)string',
            args: Array.isArray(params.args) ? params.args : [params.args.voter, params.args.approvals, params.args.rejections],
        };
    }
    /**
     * Constructs a no op call for the scrutiny()void ABI method
     *
     * Scrutinize the proposal.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static scrutiny(params) {
        return {
            ...params,
            method: 'scrutiny()void',
            args: Array.isArray(params.args) ? params.args : [],
        };
    }
    /**
     * Constructs a no op call for the review(bool)void ABI method
     *
     * Review the proposal.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static review(params) {
        return {
            ...params,
            method: 'review(bool)void',
            args: Array.isArray(params.args) ? params.args : [params.args.block],
        };
    }
    /**
     * Constructs a no op call for the fund()string ABI method
     *
     * Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static fund(params) {
        return {
            ...params,
            method: 'fund()string',
            args: Array.isArray(params.args) ? params.args : [],
        };
    }
    /**
     * Constructs a no op call for the unassign_voters(address[])void ABI method
     *
     * Unassign voters from the proposal.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static unassignVoters(params) {
        return {
            ...params,
            method: 'unassign_voters(address[])void',
            args: Array.isArray(params.args) ? params.args : [params.args.voters],
        };
    }
    /**
     * Constructs a no op call for the decommission()string ABI method
     *
     * Decommission the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static decommission(params) {
        return {
            ...params,
            method: 'decommission()string',
            args: Array.isArray(params.args) ? params.args : [],
        };
    }
    /**
     * Constructs a no op call for the get_state()(address,uint64,string,uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64) ABI method
     *
     * Get the proposal state.
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static getState(params) {
        return {
            ...params,
            method: 'get_state()(address,uint64,string,uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)',
            args: Array.isArray(params.args) ? params.args : [],
        };
    }
    /**
     * Constructs a no op call for the op_up()void ABI method
     *
     * @param params Parameters for the call
     * @returns An `AppClientMethodCallParams` object for the call
     */
    static opUp(params) {
        return {
            ...params,
            method: 'op_up()void',
            args: Array.isArray(params.args) ? params.args : [],
        };
    }
}
/**
 * A factory to create and deploy one or more instance of the Proposal smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ProposalFactory {
    /**
     * The underlying `AppFactory` for when you want to have more flexibility
     */
    appFactory;
    /**
     * Creates a new instance of `ProposalFactory`
     *
     * @param params The parameters to initialise the app factory with
     */
    constructor(params) {
        this.appFactory = new _AppFactory({
            ...params,
            appSpec: APP_SPEC,
        });
    }
    /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
    get appName() {
        return this.appFactory.appName;
    }
    /** The ARC-56 app spec being used */
    get appSpec() {
        return APP_SPEC;
    }
    /** A reference to the underlying `AlgorandClient` this app factory is using. */
    get algorand() {
        return this.appFactory.algorand;
    }
    /**
     * Returns a new `AppClient` client for an app instance of the given ID.
     *
     * Automatically populates appName, defaultSender and source maps from the factory
     * if not specified in the params.
     * @param params The parameters to create the app client
     * @returns The `AppClient`
     */
    getAppClientById(params) {
        return new ProposalClient(this.appFactory.getAppClientById(params));
    }
    /**
     * Returns a new `AppClient` client, resolving the app by creator address and name
     * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
     *
     * Automatically populates appName, defaultSender and source maps from the factory
     * if not specified in the params.
     * @param params The parameters to create the app client
     * @returns The `AppClient`
     */
    async getAppClientByCreatorAndName(params) {
        return new ProposalClient(await this.appFactory.getAppClientByCreatorAndName(params));
    }
    /**
     * Idempotently deploys the Proposal smart contract.
     *
     * @param params The arguments for the contract calls and any additional parameters for the call
     * @returns The deployment result
     */
    async deploy(params = {}) {
        const result = await this.appFactory.deploy({
            ...params,
            createParams: params.createParams?.method ? ProposalParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams : undefined,
            deleteParams: params.deleteParams?.method ? ProposalParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams : undefined,
        });
        return { result: result.result, appClient: new ProposalClient(result.appClient) };
    }
    /**
     * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
     */
    params = {
        /**
         * Gets available create methods
         */
        create: {
            /**
             * Creates a new instance of the Proposal smart contract using the create(address)void ABI method.
             *
             * Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
             *
             * @param params The params for the smart contract call
             * @returns The create params
             */
            create: (params) => {
                return this.appFactory.params.create(ProposalParamsFactory.create.create(params));
            },
        },
        /**
         * Gets available deployDelete methods
         */
        deployDelete: {
            /**
             * Deletes an existing instance of the Proposal smart contract using the delete()void ABI method.
             *
             * Delete the proposal.
             *
             * @param params The params for the smart contract call
             * @returns The deployDelete params
             */
            delete: (params = { args: [] }) => {
                return this.appFactory.params.deployDelete(ProposalParamsFactory.delete.delete(params));
            },
        },
    };
    /**
     * Create transactions for the current app
     */
    createTransaction = {
        /**
         * Gets available create methods
         */
        create: {
            /**
             * Creates a new instance of the Proposal smart contract using the create(address)void ABI method.
             *
             * Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
             *
             * @param params The params for the smart contract call
             * @returns The create transaction
             */
            create: (params) => {
                return this.appFactory.createTransaction.create(ProposalParamsFactory.create.create(params));
            },
        },
    };
    /**
     * Send calls to the current app
     */
    send = {
        /**
         * Gets available create methods
         */
        create: {
            /**
             * Creates a new instance of the Proposal smart contract using an ABI method call using the create(address)void ABI method.
             *
             * Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
             *
             * @param params The params for the smart contract call
             * @returns The create result
             */
            create: async (params) => {
                const result = await this.appFactory.send.create(ProposalParamsFactory.create.create(params));
                return { result: { ...result.result, return: result.result.return }, appClient: new ProposalClient(result.appClient) };
            },
        },
    };
}
/**
 * A client to make calls to the Proposal smart contract
 */
export class ProposalClient {
    /**
     * The underlying `AppClient` for when you want to have more flexibility
     */
    appClient;
    constructor(appClientOrParams) {
        this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
            ...appClientOrParams,
            appSpec: APP_SPEC,
        });
    }
    /**
     * Checks for decode errors on the given return value and maps the return value to the return type for the given method
     * @returns The typed return value or undefined if there was no value
     */
    decodeReturnValue(method, returnValue) {
        return returnValue !== undefined ? getArc56ReturnValue(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined;
    }
    /**
     * Returns a new `ProposalClient` client, resolving the app by creator address and name
     * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
     * @param params The parameters to create the app client
     */
    static async fromCreatorAndName(params) {
        return new ProposalClient(await _AppClient.fromCreatorAndName({ ...params, appSpec: APP_SPEC }));
    }
    /**
     * Returns an `ProposalClient` instance for the current network based on
     * pre-determined network-specific app IDs specified in the ARC-56 app spec.
     *
     * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
     * @param params The parameters to create the app client
     */
    static async fromNetwork(params) {
        return new ProposalClient(await _AppClient.fromNetwork({ ...params, appSpec: APP_SPEC }));
    }
    /** The ID of the app instance this client is linked to. */
    get appId() {
        return this.appClient.appId;
    }
    /** The app address of the app instance this client is linked to. */
    get appAddress() {
        return this.appClient.appAddress;
    }
    /** The name of the app. */
    get appName() {
        return this.appClient.appName;
    }
    /** The ARC-56 app spec being used */
    get appSpec() {
        return this.appClient.appSpec;
    }
    /** A reference to the underlying `AlgorandClient` this app client is using. */
    get algorand() {
        return this.appClient.algorand;
    }
    /**
     * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
     */
    params = {
        /**
         * Gets available delete methods
         */
        delete: {
            /**
             * Deletes an existing instance of the Proposal smart contract using the `delete()void` ABI method.
             *
             * Delete the proposal.
             *
             * @param params The params for the smart contract call
             * @returns The delete params
             */
            delete: (params = { args: [] }) => {
                return this.appClient.params.delete(ProposalParamsFactory.delete.delete(params));
            },
        },
        /**
         * Makes a clear_state call to an existing instance of the Proposal smart contract.
         *
         * @param params The params for the bare (raw) call
         * @returns The clearState result
         */
        clearState: (params) => {
            return this.appClient.params.bare.clearState(params);
        },
        /**
         * Makes a call to the Proposal smart contract using the `submit(pay,string,uint64,uint64,uint8)void` ABI method.
         *
         * Submit the first draft of the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        submit: (params) => {
            return this.appClient.params.call(ProposalParamsFactory.submit(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `upload_metadata(byte[],bool)void` ABI method.
         *
         * Upload the proposal metadata.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        uploadMetadata: (params) => {
            return this.appClient.params.call(ProposalParamsFactory.uploadMetadata(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `drop()string` ABI method.
         *
         * Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        drop: (params = { args: [] }) => {
            return this.appClient.params.call(ProposalParamsFactory.drop(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `finalize()void` ABI method.
         *
         * Finalize the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        finalize: (params = { args: [] }) => {
            return this.appClient.params.call(ProposalParamsFactory.finalize(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `assign_voters((address,uint64)[])void` ABI method.
         *
         * Assign multiple voters to the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        assignVoters: (params) => {
            return this.appClient.params.call(ProposalParamsFactory.assignVoters(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `vote(address,uint64,uint64)string` ABI method.
         *
         * Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        vote: (params) => {
            return this.appClient.params.call(ProposalParamsFactory.vote(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `scrutiny()void` ABI method.
         *
         * Scrutinize the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        scrutiny: (params = { args: [] }) => {
            return this.appClient.params.call(ProposalParamsFactory.scrutiny(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `review(bool)void` ABI method.
         *
         * Review the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        review: (params) => {
            return this.appClient.params.call(ProposalParamsFactory.review(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `fund()string` ABI method.
         *
         * Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        fund: (params = { args: [] }) => {
            return this.appClient.params.call(ProposalParamsFactory.fund(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `unassign_voters(address[])void` ABI method.
         *
         * Unassign voters from the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        unassignVoters: (params) => {
            return this.appClient.params.call(ProposalParamsFactory.unassignVoters(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `decommission()string` ABI method.
         *
         * Decommission the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        decommission: (params = { args: [] }) => {
            return this.appClient.params.call(ProposalParamsFactory.decommission(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `get_state()(address,uint64,string,uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
         *
         * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
         *
         * Get the proposal state.
         *
         * @param params The params for the smart contract call
         * @returns The call params: The proposal state
         */
        getState: (params = { args: [] }) => {
            return this.appClient.params.call(ProposalParamsFactory.getState(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `op_up()void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call params
         */
        opUp: (params = { args: [] }) => {
            return this.appClient.params.call(ProposalParamsFactory.opUp(params));
        },
    };
    /**
     * Create transactions for the current app
     */
    createTransaction = {
        /**
         * Gets available delete methods
         */
        delete: {
            /**
             * Deletes an existing instance of the Proposal smart contract using the `delete()void` ABI method.
             *
             * Delete the proposal.
             *
             * @param params The params for the smart contract call
             * @returns The delete transaction
             */
            delete: (params = { args: [] }) => {
                return this.appClient.createTransaction.delete(ProposalParamsFactory.delete.delete(params));
            },
        },
        /**
         * Makes a clear_state call to an existing instance of the Proposal smart contract.
         *
         * @param params The params for the bare (raw) call
         * @returns The clearState result
         */
        clearState: (params) => {
            return this.appClient.createTransaction.bare.clearState(params);
        },
        /**
         * Makes a call to the Proposal smart contract using the `submit(pay,string,uint64,uint64,uint8)void` ABI method.
         *
         * Submit the first draft of the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        submit: (params) => {
            return this.appClient.createTransaction.call(ProposalParamsFactory.submit(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `upload_metadata(byte[],bool)void` ABI method.
         *
         * Upload the proposal metadata.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        uploadMetadata: (params) => {
            return this.appClient.createTransaction.call(ProposalParamsFactory.uploadMetadata(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `drop()string` ABI method.
         *
         * Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        drop: (params = { args: [] }) => {
            return this.appClient.createTransaction.call(ProposalParamsFactory.drop(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `finalize()void` ABI method.
         *
         * Finalize the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        finalize: (params = { args: [] }) => {
            return this.appClient.createTransaction.call(ProposalParamsFactory.finalize(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `assign_voters((address,uint64)[])void` ABI method.
         *
         * Assign multiple voters to the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        assignVoters: (params) => {
            return this.appClient.createTransaction.call(ProposalParamsFactory.assignVoters(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `vote(address,uint64,uint64)string` ABI method.
         *
         * Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        vote: (params) => {
            return this.appClient.createTransaction.call(ProposalParamsFactory.vote(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `scrutiny()void` ABI method.
         *
         * Scrutinize the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        scrutiny: (params = { args: [] }) => {
            return this.appClient.createTransaction.call(ProposalParamsFactory.scrutiny(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `review(bool)void` ABI method.
         *
         * Review the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        review: (params) => {
            return this.appClient.createTransaction.call(ProposalParamsFactory.review(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `fund()string` ABI method.
         *
         * Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        fund: (params = { args: [] }) => {
            return this.appClient.createTransaction.call(ProposalParamsFactory.fund(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `unassign_voters(address[])void` ABI method.
         *
         * Unassign voters from the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        unassignVoters: (params) => {
            return this.appClient.createTransaction.call(ProposalParamsFactory.unassignVoters(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `decommission()string` ABI method.
         *
         * Decommission the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        decommission: (params = { args: [] }) => {
            return this.appClient.createTransaction.call(ProposalParamsFactory.decommission(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `get_state()(address,uint64,string,uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
         *
         * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
         *
         * Get the proposal state.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction: The proposal state
         */
        getState: (params = { args: [] }) => {
            return this.appClient.createTransaction.call(ProposalParamsFactory.getState(params));
        },
        /**
         * Makes a call to the Proposal smart contract using the `op_up()void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call transaction
         */
        opUp: (params = { args: [] }) => {
            return this.appClient.createTransaction.call(ProposalParamsFactory.opUp(params));
        },
    };
    /**
     * Send calls to the current app
     */
    send = {
        /**
         * Gets available delete methods
         */
        delete: {
            /**
             * Deletes an existing instance of the Proposal smart contract using the `delete()void` ABI method.
             *
             * Delete the proposal.
             *
             * @param params The params for the smart contract call
             * @returns The delete result
             */
            delete: async (params = { args: [] }) => {
                const result = await this.appClient.send.delete(ProposalParamsFactory.delete.delete(params));
                return { ...result, return: result.return };
            },
        },
        /**
         * Makes a clear_state call to an existing instance of the Proposal smart contract.
         *
         * @param params The params for the bare (raw) call
         * @returns The clearState result
         */
        clearState: (params) => {
            return this.appClient.send.bare.clearState(params);
        },
        /**
         * Makes a call to the Proposal smart contract using the `submit(pay,string,uint64,uint64,uint8)void` ABI method.
         *
         * Submit the first draft of the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        submit: async (params) => {
            const result = await this.appClient.send.call(ProposalParamsFactory.submit(params));
            return { ...result, return: result.return };
        },
        /**
         * Makes a call to the Proposal smart contract using the `upload_metadata(byte[],bool)void` ABI method.
         *
         * Upload the proposal metadata.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        uploadMetadata: async (params) => {
            const result = await this.appClient.send.call(ProposalParamsFactory.uploadMetadata(params));
            return { ...result, return: result.return };
        },
        /**
         * Makes a call to the Proposal smart contract using the `drop()string` ABI method.
         *
         * Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        drop: async (params = { args: [] }) => {
            const result = await this.appClient.send.call(ProposalParamsFactory.drop(params));
            return { ...result, return: result.return };
        },
        /**
         * Makes a call to the Proposal smart contract using the `finalize()void` ABI method.
         *
         * Finalize the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        finalize: async (params = { args: [] }) => {
            const result = await this.appClient.send.call(ProposalParamsFactory.finalize(params));
            return { ...result, return: result.return };
        },
        /**
         * Makes a call to the Proposal smart contract using the `assign_voters((address,uint64)[])void` ABI method.
         *
         * Assign multiple voters to the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        assignVoters: async (params) => {
            const result = await this.appClient.send.call(ProposalParamsFactory.assignVoters(params));
            return { ...result, return: result.return };
        },
        /**
         * Makes a call to the Proposal smart contract using the `vote(address,uint64,uint64)string` ABI method.
         *
         * Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        vote: async (params) => {
            const result = await this.appClient.send.call(ProposalParamsFactory.vote(params));
            return { ...result, return: result.return };
        },
        /**
         * Makes a call to the Proposal smart contract using the `scrutiny()void` ABI method.
         *
         * Scrutinize the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        scrutiny: async (params = { args: [] }) => {
            const result = await this.appClient.send.call(ProposalParamsFactory.scrutiny(params));
            return { ...result, return: result.return };
        },
        /**
         * Makes a call to the Proposal smart contract using the `review(bool)void` ABI method.
         *
         * Review the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        review: async (params) => {
            const result = await this.appClient.send.call(ProposalParamsFactory.review(params));
            return { ...result, return: result.return };
        },
        /**
         * Makes a call to the Proposal smart contract using the `fund()string` ABI method.
         *
         * Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        fund: async (params = { args: [] }) => {
            const result = await this.appClient.send.call(ProposalParamsFactory.fund(params));
            return { ...result, return: result.return };
        },
        /**
         * Makes a call to the Proposal smart contract using the `unassign_voters(address[])void` ABI method.
         *
         * Unassign voters from the proposal.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        unassignVoters: async (params) => {
            const result = await this.appClient.send.call(ProposalParamsFactory.unassignVoters(params));
            return { ...result, return: result.return };
        },
        /**
         * Makes a call to the Proposal smart contract using the `decommission()string` ABI method.
         *
         * Decommission the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        decommission: async (params = { args: [] }) => {
            const result = await this.appClient.send.call(ProposalParamsFactory.decommission(params));
            return { ...result, return: result.return };
        },
        /**
         * Makes a call to the Proposal smart contract using the `get_state()(address,uint64,string,uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
         *
         * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
         *
         * Get the proposal state.
         *
         * @param params The params for the smart contract call
         * @returns The call result: The proposal state
         */
        getState: async (params = { args: [] }) => {
            const result = await this.appClient.send.call(ProposalParamsFactory.getState(params));
            return { ...result, return: result.return };
        },
        /**
         * Makes a call to the Proposal smart contract using the `op_up()void` ABI method.
         *
         * @param params The params for the smart contract call
         * @returns The call result
         */
        opUp: async (params = { args: [] }) => {
            const result = await this.appClient.send.call(ProposalParamsFactory.opUp(params));
            return { ...result, return: result.return };
        },
    };
    /**
     * Clone this app client with different params
     *
     * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
     * @returns A new app client with the altered params
     */
    clone(params) {
        return new ProposalClient(this.appClient.clone(params));
    }
    /**
     * Makes a readonly (simulated) call to the Proposal smart contract using the `get_state()(address,uint64,string,uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the proposal state.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The proposal state
     */
    async getState(params = { args: [] }) {
        const result = await this.appClient.send.call(ProposalParamsFactory.getState(params));
        return result.return;
    }
    /**
     * Methods to access state for the current Proposal app
     */
    state = {
        /**
         * Methods to access global state for the current Proposal app
         */
        global: {
            /**
             * Get all current keyed values from global state
             */
            getAll: async () => {
                const result = await this.appClient.state.global.getAll();
                return {
                    approvals: result.approvals,
                    assignedVotes: result.assigned_votes,
                    committeeId: new BinaryStateValue(result.committee_id),
                    committeeMembers: result.committee_members,
                    committeeVotes: result.committee_votes,
                    finalizationTs: result.finalization_ts,
                    focus: result.focus,
                    fundingCategory: result.funding_category,
                    fundingType: result.funding_type,
                    lockedAmount: result.locked_amount,
                    nulls: result.nulls,
                    proposer: new BinaryStateValue(result.proposer),
                    registryAppId: result.registry_app_id,
                    rejections: result.rejections,
                    requestedAmount: result.requested_amount,
                    status: result.status,
                    submissionTs: result.submission_ts,
                    title: new BinaryStateValue(result.title),
                    voteOpenTs: result.vote_open_ts,
                    votedMembers: result.voted_members,
                    votersCount: result.voters_count,
                };
            },
            /**
             * Get the current value of the approvals key in global state
             */
            approvals: async () => { return (await this.appClient.state.global.getValue("approvals")); },
            /**
             * Get the current value of the assigned_votes key in global state
             */
            assignedVotes: async () => { return (await this.appClient.state.global.getValue("assigned_votes")); },
            /**
             * Get the current value of the committee_id key in global state
             */
            committeeId: async () => { return new BinaryStateValue((await this.appClient.state.global.getValue("committee_id"))); },
            /**
             * Get the current value of the committee_members key in global state
             */
            committeeMembers: async () => { return (await this.appClient.state.global.getValue("committee_members")); },
            /**
             * Get the current value of the committee_votes key in global state
             */
            committeeVotes: async () => { return (await this.appClient.state.global.getValue("committee_votes")); },
            /**
             * Get the current value of the finalization_ts key in global state
             */
            finalizationTs: async () => { return (await this.appClient.state.global.getValue("finalization_ts")); },
            /**
             * Get the current value of the focus key in global state
             */
            focus: async () => { return (await this.appClient.state.global.getValue("focus")); },
            /**
             * Get the current value of the funding_category key in global state
             */
            fundingCategory: async () => { return (await this.appClient.state.global.getValue("funding_category")); },
            /**
             * Get the current value of the funding_type key in global state
             */
            fundingType: async () => { return (await this.appClient.state.global.getValue("funding_type")); },
            /**
             * Get the current value of the locked_amount key in global state
             */
            lockedAmount: async () => { return (await this.appClient.state.global.getValue("locked_amount")); },
            /**
             * Get the current value of the nulls key in global state
             */
            nulls: async () => { return (await this.appClient.state.global.getValue("nulls")); },
            /**
             * Get the current value of the proposer key in global state
             */
            proposer: async () => { return new BinaryStateValue((await this.appClient.state.global.getValue("proposer"))); },
            /**
             * Get the current value of the registry_app_id key in global state
             */
            registryAppId: async () => { return (await this.appClient.state.global.getValue("registry_app_id")); },
            /**
             * Get the current value of the rejections key in global state
             */
            rejections: async () => { return (await this.appClient.state.global.getValue("rejections")); },
            /**
             * Get the current value of the requested_amount key in global state
             */
            requestedAmount: async () => { return (await this.appClient.state.global.getValue("requested_amount")); },
            /**
             * Get the current value of the status key in global state
             */
            status: async () => { return (await this.appClient.state.global.getValue("status")); },
            /**
             * Get the current value of the submission_ts key in global state
             */
            submissionTs: async () => { return (await this.appClient.state.global.getValue("submission_ts")); },
            /**
             * Get the current value of the title key in global state
             */
            title: async () => { return new BinaryStateValue((await this.appClient.state.global.getValue("title"))); },
            /**
             * Get the current value of the vote_open_ts key in global state
             */
            voteOpenTs: async () => { return (await this.appClient.state.global.getValue("vote_open_ts")); },
            /**
             * Get the current value of the voted_members key in global state
             */
            votedMembers: async () => { return (await this.appClient.state.global.getValue("voted_members")); },
            /**
             * Get the current value of the voters_count key in global state
             */
            votersCount: async () => { return (await this.appClient.state.global.getValue("voters_count")); },
        },
    };
    newGroup() {
        const client = this;
        const composer = this.algorand.newGroup();
        let promiseChain = Promise.resolve();
        const resultMappers = [];
        return {
            /**
             * Add a submit(pay,string,uint64,uint64,uint8)void method call against the Proposal contract
             */
            submit(params) {
                promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submit(params)));
                resultMappers.push(undefined);
                return this;
            },
            /**
             * Add a upload_metadata(byte[],bool)void method call against the Proposal contract
             */
            uploadMetadata(params) {
                promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.uploadMetadata(params)));
                resultMappers.push(undefined);
                return this;
            },
            /**
             * Add a drop()string method call against the Proposal contract
             */
            drop(params) {
                promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.drop(params)));
                resultMappers.push((v) => client.decodeReturnValue('drop()string', v));
                return this;
            },
            /**
             * Add a finalize()void method call against the Proposal contract
             */
            finalize(params) {
                promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.finalize(params)));
                resultMappers.push(undefined);
                return this;
            },
            /**
             * Add a assign_voters((address,uint64)[])void method call against the Proposal contract
             */
            assignVoters(params) {
                promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assignVoters(params)));
                resultMappers.push(undefined);
                return this;
            },
            /**
             * Add a vote(address,uint64,uint64)string method call against the Proposal contract
             */
            vote(params) {
                promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.vote(params)));
                resultMappers.push((v) => client.decodeReturnValue('vote(address,uint64,uint64)string', v));
                return this;
            },
            /**
             * Add a scrutiny()void method call against the Proposal contract
             */
            scrutiny(params) {
                promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.scrutiny(params)));
                resultMappers.push(undefined);
                return this;
            },
            /**
             * Add a review(bool)void method call against the Proposal contract
             */
            review(params) {
                promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.review(params)));
                resultMappers.push(undefined);
                return this;
            },
            /**
             * Add a fund()string method call against the Proposal contract
             */
            fund(params) {
                promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fund(params)));
                resultMappers.push((v) => client.decodeReturnValue('fund()string', v));
                return this;
            },
            /**
             * Add a unassign_voters(address[])void method call against the Proposal contract
             */
            unassignVoters(params) {
                promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unassignVoters(params)));
                resultMappers.push(undefined);
                return this;
            },
            /**
             * Add a decommission()string method call against the Proposal contract
             */
            decommission(params) {
                promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.decommission(params)));
                resultMappers.push((v) => client.decodeReturnValue('decommission()string', v));
                return this;
            },
            /**
             * Add a get_state()(address,uint64,string,uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64) method call against the Proposal contract
             */
            getState(params) {
                promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getState(params)));
                resultMappers.push((v) => client.decodeReturnValue('get_state()(address,uint64,string,uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)', v));
                return this;
            },
            /**
             * Add a op_up()void method call against the Proposal contract
             */
            opUp(params) {
                promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.opUp(params)));
                resultMappers.push(undefined);
                return this;
            },
            get delete() {
                return {
                    delete: (params) => {
                        promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.delete(params)));
                        resultMappers.push(undefined);
                        return this;
                    },
                };
            },
            /**
             * Add a clear state call to the Proposal contract
             */
            clearState(params) {
                promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)));
                return this;
            },
            addTransaction(txn, signer) {
                promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer));
                return this;
            },
            async composer() {
                await promiseChain;
                return composer;
            },
            async simulate(options) {
                await promiseChain;
                const result = await (!options ? composer.simulate() : composer.simulate(options));
                return {
                    ...result,
                    returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val) : val.returnValue)
                };
            },
            async send(params) {
                await promiseChain;
                const result = await composer.send(params);
                return {
                    ...result,
                    returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val) : val.returnValue)
                };
            }
        };
    }
}
