/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"XGovRegistry","structs":{"XGovRegistryConfig":[{"name":"xgovFee","type":"uint64"},{"name":"proposerFee","type":"uint64"},{"name":"proposalFee","type":"uint64"},{"name":"proposalPublishingBps","type":"uint64"},{"name":"proposalCommitmentBps","type":"uint64"},{"name":"minRequestedAmount","type":"uint64"},{"name":"maxRequestedAmount","type":"uint64[3]"},{"name":"discussionDuration","type":"uint64[4]"},{"name":"votingDuration","type":"uint64[4]"},{"name":"quorum","type":"uint64[3]"},{"name":"weightedQuorum","type":"uint64[3]"}],"TypedGlobalState":[{"name":"pausedRegistry","type":"bool"},{"name":"pausedProposals","type":"bool"},{"name":"xgovManager","type":"address"},{"name":"xgovPayor","type":"address"},{"name":"xgovReviewer","type":"address"},{"name":"xgovSubscriber","type":"address"},{"name":"kycProvider","type":"address"},{"name":"committeeManager","type":"address"},{"name":"committeePublisher","type":"address"},{"name":"xgovFee","type":"uint64"},{"name":"proposerFee","type":"uint64"},{"name":"proposalFee","type":"uint64"},{"name":"proposalPublishingBps","type":"uint64"},{"name":"proposalCommitmentBps","type":"uint64"},{"name":"minRequestedAmount","type":"uint64"},{"name":"maxRequestedAmount","type":"uint64[3]"},{"name":"discussionDuration","type":"uint64[4]"},{"name":"votingDuration","type":"uint64[4]"},{"name":"quorum","type":"uint64[3]"},{"name":"weightedQuorum","type":"uint64[3]"},{"name":"outstandingFunds","type":"uint64"},{"name":"pendingProposals","type":"uint64"},{"name":"committeeId","type":"byte[32]"},{"name":"committeeMembers","type":"uint64"},{"name":"committeeVotes","type":"uint64"}]},"methods":[{"name":"create","desc":"Create the xGov Registry.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"pause_registry","desc":"Pauses the xGov Registry non-administrative methods.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"pause_proposals","desc":"Pauses the creation of new Proposals.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"resume_registry","desc":"Resumes the xGov Registry non-administrative methods.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"resume_proposals","desc":"Resumes the creation of new Proposals.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_xgov_manager","desc":"Sets the xGov Manager.","args":[{"name":"manager","type":"address","desc":"Address of the new xGov Manager"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_payor","desc":"Sets the xGov Payor.","args":[{"name":"payor","type":"address","desc":"Address of the new xGov Payor"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_xgov_reviewer","desc":"Sets the xGov Reviewer.","args":[{"name":"reviewer","type":"address","desc":"Address of the new xGov Reviewer"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_xgov_subscriber","desc":"Sets the xGov Subscriber.","args":[{"name":"subscriber","type":"address","desc":"Address of the new xGov Subscriber"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_kyc_provider","desc":"Sets the KYC provider.","args":[{"name":"provider","type":"address","desc":"Address of the new KYC Provider"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_committee_manager","desc":"Sets the Committee Manager.","args":[{"name":"manager","type":"address","desc":"Address of the new xGov Manager"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_committee_publisher","desc":"Sets the Committee Publisher.","args":[{"name":"publisher","type":"address","desc":"Address of the new Committee Publisher"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"config_xgov_registry","desc":"Sets the configuration of the xGov Registry.","args":[{"name":"config","type":"(uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3])","desc":"Configuration class containing the field data","struct":"XGovRegistryConfig"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_xgov_registry","desc":"Updates the xGov Registry contract.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"subscribe_xgov","desc":"Subscribes the sender to being an xGov.","args":[{"name":"voting_address","type":"address","desc":"The address of the voting account for the xGov"},{"name":"payment","type":"pay","desc":"The payment transaction covering the xGov fee"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"unsubscribe_xgov","desc":"Unsubscribes the designated address from being an xGov.","args":[{"name":"xgov_address","type":"address","desc":"The address of the xGov to unsubscribe"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"subscribe_xgov_app","desc":"The App Creator subscribes the App to being an xGov.","args":[{"name":"app_id","type":"uint64","desc":"The id of the application to subscribe"},{"name":"voting_address","type":"address","desc":"The address of the voting account for the xGov"},{"name":"payment","type":"pay","desc":"The payment transaction covering the xGov fee"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"unsubscribe_xgov_app","desc":"Unsubscribes the designated App from being an xGov.","args":[{"name":"app_id","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"request_subscribe_xgov","desc":"Requests to subscribe to the xGov.","args":[{"name":"xgov_address","type":"address","desc":"The address of the xGov"},{"name":"owner_address","type":"address","desc":"The address of the xGov Address owner/controller (Voting Address)"},{"name":"relation_type","type":"uint64","desc":"The type of relationship enum"},{"name":"payment","type":"pay","desc":"The payment transaction covering the xGov fee"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"approve_subscribe_xgov","desc":"Approves a subscribe request to xGov.","args":[{"name":"request_id","type":"uint64","desc":"The ID of the request to approve"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reject_subscribe_xgov","desc":"Rejects a subscribe request to xGov.","args":[{"name":"request_id","type":"uint64","desc":"The ID of the request to reject"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_voting_account","desc":"Sets the Voting Address for the xGov.","args":[{"name":"xgov_address","type":"address"},{"name":"voting_address","type":"address","desc":"The voting account address to delegate voting power to"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"subscribe_proposer","desc":"Subscribes the sender to being a Proposer.","args":[{"name":"payment","type":"pay","desc":"The payment transaction covering the Proposer fee"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_proposer_kyc","desc":"Sets a proposer's KYC status.","args":[{"name":"proposer","type":"address","desc":"The address of the Proposer"},{"name":"kyc_status","type":"bool","desc":"The new status of the Proposer"},{"name":"kyc_expiring","type":"uint64","desc":"The expiration date as a unix timestamp of the time the KYC expires"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"declare_committee","desc":"Sets the xGov Committee in charge.","args":[{"name":"committee_id","type":"byte[32]","desc":"The ID of the xGov Committee"},{"name":"size","type":"uint64","desc":"The size of the xGov Committee"},{"name":"votes","type":"uint64","desc":"The voting power of the xGov Committee"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"open_proposal","desc":"Creates a new Proposal.","args":[{"name":"payment","type":"pay","desc":"payment for covering the proposal fee (includes child contract MBR)"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"vote_proposal","desc":"Votes on a Proposal.","args":[{"name":"proposal_id","type":"uint64","desc":"The application ID of the Proposal app being voted on"},{"name":"xgov_address","type":"address","desc":"(arc4.Address): The address of the xGov being voted on behalf of"},{"name":"approval_votes","type":"uint64","desc":"(arc4.UInt64): The number of approvals votes allocated"},{"name":"rejection_votes","type":"uint64","desc":"(arc4.UInt64): The number of rejections votes allocated"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"pay_grant_proposal","desc":"Disburses the funds for an approved Proposal.","args":[{"name":"proposal_id","type":"uint64","desc":"The application ID of the approved Proposal"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"decommission_proposal","desc":"Decommissions a Proposal.","args":[{"name":"proposal_id","type":"uint64","desc":"The application ID of the Proposal app to decommission"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"drop_proposal","desc":"Drops a Proposal.","args":[{"name":"proposal_id","type":"uint64","desc":"The application ID of the Proposal app to drop"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"deposit_funds","desc":"Deposits xGov program funds into the xGov Treasury (xGov Registry Account).","args":[{"name":"payment","type":"pay","desc":"the deposit transaction"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"withdraw_funds","desc":"Remove xGov program funds from the xGov Treasury (xGov Registry Account).","args":[{"name":"amount","type":"uint64","desc":"the amount to remove"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_state","desc":"Returns the xGov Registry state.","args":[],"returns":{"type":"(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)","struct":"TypedGlobalState"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":36,"bytes":28},"local":{"ints":0,"bytes":0}},"keys":{"global":{"committee_id":{"key":"Y29tbWl0dGVlX2lk","keyType":"AVMString","valueType":"AVMBytes"},"committee_manager":{"key":"Y29tbWl0dGVlX21hbmFnZXI=","keyType":"AVMString","valueType":"AVMBytes"},"committee_members":{"key":"Y29tbWl0dGVlX21lbWJlcnM=","keyType":"AVMString","valueType":"AVMUint64"},"committee_publisher":{"key":"Y29tbWl0dGVlX3B1Ymxpc2hlcg==","keyType":"AVMString","valueType":"AVMBytes"},"committee_votes":{"key":"Y29tbWl0dGVlX3ZvdGVz","keyType":"AVMString","valueType":"AVMUint64"},"discussion_duration_large":{"key":"ZGlzY3Vzc2lvbl9kdXJhdGlvbl9sYXJnZQ==","keyType":"AVMString","valueType":"AVMUint64"},"discussion_duration_medium":{"key":"ZGlzY3Vzc2lvbl9kdXJhdGlvbl9tZWRpdW0=","keyType":"AVMString","valueType":"AVMUint64"},"discussion_duration_small":{"key":"ZGlzY3Vzc2lvbl9kdXJhdGlvbl9zbWFsbA==","keyType":"AVMString","valueType":"AVMUint64"},"discussion_duration_xlarge":{"key":"ZGlzY3Vzc2lvbl9kdXJhdGlvbl94bGFyZ2U=","keyType":"AVMString","valueType":"AVMUint64"},"kyc_provider":{"key":"a3ljX3Byb3ZpZGVy","keyType":"AVMString","valueType":"AVMBytes"},"max_requested_amount_large":{"key":"bWF4X3JlcXVlc3RlZF9hbW91bnRfbGFyZ2U=","keyType":"AVMString","valueType":"AVMUint64"},"max_requested_amount_medium":{"key":"bWF4X3JlcXVlc3RlZF9hbW91bnRfbWVkaXVt","keyType":"AVMString","valueType":"AVMUint64"},"max_requested_amount_small":{"key":"bWF4X3JlcXVlc3RlZF9hbW91bnRfc21hbGw=","keyType":"AVMString","valueType":"AVMUint64"},"min_requested_amount":{"key":"bWluX3JlcXVlc3RlZF9hbW91bnQ=","keyType":"AVMString","valueType":"AVMUint64"},"outstanding_funds":{"key":"b3V0c3RhbmRpbmdfZnVuZHM=","keyType":"AVMString","valueType":"AVMUint64"},"paused_proposals":{"key":"cGF1c2VkX3Byb3Bvc2Fscw==","keyType":"AVMString","valueType":"AVMUint64"},"paused_registry":{"key":"cGF1c2VkX3JlZ2lzdHJ5","keyType":"AVMString","valueType":"AVMUint64"},"pending_proposals":{"key":"cGVuZGluZ19wcm9wb3NhbHM=","keyType":"AVMString","valueType":"AVMUint64"},"proposal_commitment_bps":{"key":"cHJvcG9zYWxfY29tbWl0bWVudF9icHM=","keyType":"AVMString","valueType":"AVMUint64"},"proposal_fee":{"key":"cHJvcG9zYWxfZmVl","keyType":"AVMString","valueType":"AVMUint64"},"proposal_publishing_bps":{"key":"cHJvcG9zYWxfcHVibGlzaGluZ19icHM=","keyType":"AVMString","valueType":"AVMUint64"},"proposer_fee":{"key":"cHJvcG9zZXJfZmVl","keyType":"AVMString","valueType":"AVMUint64"},"quorum_large":{"key":"cXVvcnVtX2xhcmdl","keyType":"AVMString","valueType":"AVMUint64"},"quorum_medium":{"key":"cXVvcnVtX21lZGl1bQ==","keyType":"AVMString","valueType":"AVMUint64"},"quorum_small":{"key":"cXVvcnVtX3NtYWxs","keyType":"AVMString","valueType":"AVMUint64"},"request_id":{"key":"cmVxdWVzdF9pZA==","keyType":"AVMString","valueType":"AVMUint64"},"voting_duration_large":{"key":"dm90aW5nX2R1cmF0aW9uX2xhcmdl","keyType":"AVMString","valueType":"AVMUint64"},"voting_duration_medium":{"key":"dm90aW5nX2R1cmF0aW9uX21lZGl1bQ==","keyType":"AVMString","valueType":"AVMUint64"},"voting_duration_small":{"key":"dm90aW5nX2R1cmF0aW9uX3NtYWxs","keyType":"AVMString","valueType":"AVMUint64"},"voting_duration_xlarge":{"key":"dm90aW5nX2R1cmF0aW9uX3hsYXJnZQ==","keyType":"AVMString","valueType":"AVMUint64"},"weighted_quorum_large":{"key":"d2VpZ2h0ZWRfcXVvcnVtX2xhcmdl","keyType":"AVMString","valueType":"AVMUint64"},"weighted_quorum_medium":{"key":"d2VpZ2h0ZWRfcXVvcnVtX21lZGl1bQ==","keyType":"AVMString","valueType":"AVMUint64"},"weighted_quorum_small":{"key":"d2VpZ2h0ZWRfcXVvcnVtX3NtYWxs","keyType":"AVMString","valueType":"AVMUint64"},"xgov_fee":{"key":"eGdvdl9mZWU=","keyType":"AVMString","valueType":"AVMUint64"},"xgov_manager":{"key":"eGdvdl9tYW5hZ2Vy","keyType":"AVMString","valueType":"AVMBytes"},"xgov_payor":{"key":"eGdvdl9wYXlvcg==","keyType":"AVMString","valueType":"AVMBytes"},"xgov_reviewer":{"key":"eGdvdl9yZXZpZXdlcg==","keyType":"AVMString","valueType":"AVMBytes"},"xgov_subscriber":{"key":"eGdvdl9zdWJzY3JpYmVy","keyType":"AVMString","valueType":"AVMBytes"},"xgovs":{"key":"eGdvdnM=","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type XGovRegistryConfig = {
  xgovFee: bigint,
  proposerFee: bigint,
  proposalFee: bigint,
  proposalPublishingBps: bigint,
  proposalCommitmentBps: bigint,
  minRequestedAmount: bigint,
  maxRequestedAmount: [bigint, bigint, bigint],
  discussionDuration: [bigint, bigint, bigint, bigint],
  votingDuration: [bigint, bigint, bigint, bigint],
  quorum: [bigint, bigint, bigint],
  weightedQuorum: [bigint, bigint, bigint]
}


/**
 * Converts the ABI tuple representation of a XGovRegistryConfig to the struct representation
 */
export function XGovRegistryConfigFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, bigint, [bigint, bigint, bigint], [bigint, bigint, bigint, bigint], [bigint, bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.XGovRegistryConfig, APP_SPEC.structs) as XGovRegistryConfig
}

export type TypedGlobalState = {
  pausedRegistry: boolean,
  pausedProposals: boolean,
  xgovManager: string,
  xgovPayor: string,
  xgovReviewer: string,
  xgovSubscriber: string,
  kycProvider: string,
  committeeManager: string,
  committeePublisher: string,
  xgovFee: bigint,
  proposerFee: bigint,
  proposalFee: bigint,
  proposalPublishingBps: bigint,
  proposalCommitmentBps: bigint,
  minRequestedAmount: bigint,
  maxRequestedAmount: [bigint, bigint, bigint],
  discussionDuration: [bigint, bigint, bigint, bigint],
  votingDuration: [bigint, bigint, bigint, bigint],
  quorum: [bigint, bigint, bigint],
  weightedQuorum: [bigint, bigint, bigint],
  outstandingFunds: bigint,
  pendingProposals: bigint,
  committeeId: Uint8Array,
  committeeMembers: bigint,
  committeeVotes: bigint
}


/**
 * Converts the ABI tuple representation of a TypedGlobalState to the struct representation
 */
export function TypedGlobalStateFromTuple(abiTuple: [boolean, boolean, string, string, string, string, string, string, string, bigint, bigint, bigint, bigint, bigint, bigint, [bigint, bigint, bigint], [bigint, bigint, bigint, bigint], [bigint, bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], bigint, bigint, Uint8Array, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.TypedGlobalState, APP_SPEC.structs) as TypedGlobalState
}

/**
 * The argument types for the XGovRegistry contract
 */
export type XGovRegistryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create()void': Record<string, never>
    'pause_registry()void': Record<string, never>
    'pause_proposals()void': Record<string, never>
    'resume_registry()void': Record<string, never>
    'resume_proposals()void': Record<string, never>
    'set_xgov_manager(address)void': {
      /**
       * Address of the new xGov Manager
       */
      manager: string
    }
    'set_payor(address)void': {
      /**
       * Address of the new xGov Payor
       */
      payor: string
    }
    'set_xgov_reviewer(address)void': {
      /**
       * Address of the new xGov Reviewer
       */
      reviewer: string
    }
    'set_xgov_subscriber(address)void': {
      /**
       * Address of the new xGov Subscriber
       */
      subscriber: string
    }
    'set_kyc_provider(address)void': {
      /**
       * Address of the new KYC Provider
       */
      provider: string
    }
    'set_committee_manager(address)void': {
      /**
       * Address of the new xGov Manager
       */
      manager: string
    }
    'set_committee_publisher(address)void': {
      /**
       * Address of the new Committee Publisher
       */
      publisher: string
    }
    'config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void': {
      /**
       * Configuration class containing the field data
       */
      config: XGovRegistryConfig
    }
    'update_xgov_registry()void': Record<string, never>
    'subscribe_xgov(address,pay)void': {
      /**
       * The address of the voting account for the xGov
       */
      votingAddress: string
      /**
       * The payment transaction covering the xGov fee
       */
      payment: AppMethodCallTransactionArgument
    }
    'unsubscribe_xgov(address)void': {
      /**
       * The address of the xGov to unsubscribe
       */
      xgovAddress: string
    }
    'subscribe_xgov_app(uint64,address,pay)void': {
      /**
       * The id of the application to subscribe
       */
      appId: bigint | number
      /**
       * The address of the voting account for the xGov
       */
      votingAddress: string
      /**
       * The payment transaction covering the xGov fee
       */
      payment: AppMethodCallTransactionArgument
    }
    'unsubscribe_xgov_app(uint64)void': {
      appId: bigint | number
    }
    'request_subscribe_xgov(address,address,uint64,pay)void': {
      /**
       * The address of the xGov
       */
      xgovAddress: string
      /**
       * The address of the xGov Address owner/controller (Voting Address)
       */
      ownerAddress: string
      /**
       * The type of relationship enum
       */
      relationType: bigint | number
      /**
       * The payment transaction covering the xGov fee
       */
      payment: AppMethodCallTransactionArgument
    }
    'approve_subscribe_xgov(uint64)void': {
      /**
       * The ID of the request to approve
       */
      requestId: bigint | number
    }
    'reject_subscribe_xgov(uint64)void': {
      /**
       * The ID of the request to reject
       */
      requestId: bigint | number
    }
    'set_voting_account(address,address)void': {
      xgovAddress: string
      /**
       * The voting account address to delegate voting power to
       */
      votingAddress: string
    }
    'subscribe_proposer(pay)void': {
      /**
       * The payment transaction covering the Proposer fee
       */
      payment: AppMethodCallTransactionArgument
    }
    'set_proposer_kyc(address,bool,uint64)void': {
      /**
       * The address of the Proposer
       */
      proposer: string
      /**
       * The new status of the Proposer
       */
      kycStatus: boolean
      /**
       * The expiration date as a unix timestamp of the time the KYC expires
       */
      kycExpiring: bigint | number
    }
    'declare_committee(byte[32],uint64,uint64)void': {
      /**
       * The ID of the xGov Committee
       */
      committeeId: Uint8Array
      /**
       * The size of the xGov Committee
       */
      size: bigint | number
      /**
       * The voting power of the xGov Committee
       */
      votes: bigint | number
    }
    'open_proposal(pay)uint64': {
      /**
       * payment for covering the proposal fee (includes child contract MBR)
       */
      payment: AppMethodCallTransactionArgument
    }
    'vote_proposal(uint64,address,uint64,uint64)void': {
      /**
       * The application ID of the Proposal app being voted on
       */
      proposalId: bigint | number
      /**
       * (arc4.Address): The address of the xGov being voted on behalf of
       */
      xgovAddress: string
      /**
       * (arc4.UInt64): The number of approvals votes allocated
       */
      approvalVotes: bigint | number
      /**
       * (arc4.UInt64): The number of rejections votes allocated
       */
      rejectionVotes: bigint | number
    }
    'pay_grant_proposal(uint64)void': {
      /**
       * The application ID of the approved Proposal
       */
      proposalId: bigint | number
    }
    'decommission_proposal(uint64)void': {
      /**
       * The application ID of the Proposal app to decommission
       */
      proposalId: bigint | number
    }
    'drop_proposal(uint64)void': {
      /**
       * The application ID of the Proposal app to drop
       */
      proposalId: bigint | number
    }
    'deposit_funds(pay)void': {
      /**
       * the deposit transaction
       */
      payment: AppMethodCallTransactionArgument
    }
    'withdraw_funds(uint64)void': {
      /**
       * the amount to remove
       */
      amount: bigint | number
    }
    'get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create()void': []
    'pause_registry()void': []
    'pause_proposals()void': []
    'resume_registry()void': []
    'resume_proposals()void': []
    'set_xgov_manager(address)void': [manager: string]
    'set_payor(address)void': [payor: string]
    'set_xgov_reviewer(address)void': [reviewer: string]
    'set_xgov_subscriber(address)void': [subscriber: string]
    'set_kyc_provider(address)void': [provider: string]
    'set_committee_manager(address)void': [manager: string]
    'set_committee_publisher(address)void': [publisher: string]
    'config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void': [config: XGovRegistryConfig]
    'update_xgov_registry()void': []
    'subscribe_xgov(address,pay)void': [votingAddress: string, payment: AppMethodCallTransactionArgument]
    'unsubscribe_xgov(address)void': [xgovAddress: string]
    'subscribe_xgov_app(uint64,address,pay)void': [appId: bigint | number, votingAddress: string, payment: AppMethodCallTransactionArgument]
    'unsubscribe_xgov_app(uint64)void': [appId: bigint | number]
    'request_subscribe_xgov(address,address,uint64,pay)void': [xgovAddress: string, ownerAddress: string, relationType: bigint | number, payment: AppMethodCallTransactionArgument]
    'approve_subscribe_xgov(uint64)void': [requestId: bigint | number]
    'reject_subscribe_xgov(uint64)void': [requestId: bigint | number]
    'set_voting_account(address,address)void': [xgovAddress: string, votingAddress: string]
    'subscribe_proposer(pay)void': [payment: AppMethodCallTransactionArgument]
    'set_proposer_kyc(address,bool,uint64)void': [proposer: string, kycStatus: boolean, kycExpiring: bigint | number]
    'declare_committee(byte[32],uint64,uint64)void': [committeeId: Uint8Array, size: bigint | number, votes: bigint | number]
    'open_proposal(pay)uint64': [payment: AppMethodCallTransactionArgument]
    'vote_proposal(uint64,address,uint64,uint64)void': [proposalId: bigint | number, xgovAddress: string, approvalVotes: bigint | number, rejectionVotes: bigint | number]
    'pay_grant_proposal(uint64)void': [proposalId: bigint | number]
    'decommission_proposal(uint64)void': [proposalId: bigint | number]
    'drop_proposal(uint64)void': [proposalId: bigint | number]
    'deposit_funds(pay)void': [payment: AppMethodCallTransactionArgument]
    'withdraw_funds(uint64)void': [amount: bigint | number]
    'get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)': []
  }
}

/**
 * The return type for each method
 */
export type XGovRegistryReturns = {
  'create()void': void
  'pause_registry()void': void
  'pause_proposals()void': void
  'resume_registry()void': void
  'resume_proposals()void': void
  'set_xgov_manager(address)void': void
  'set_payor(address)void': void
  'set_xgov_reviewer(address)void': void
  'set_xgov_subscriber(address)void': void
  'set_kyc_provider(address)void': void
  'set_committee_manager(address)void': void
  'set_committee_publisher(address)void': void
  'config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void': void
  'update_xgov_registry()void': void
  'subscribe_xgov(address,pay)void': void
  'unsubscribe_xgov(address)void': void
  'subscribe_xgov_app(uint64,address,pay)void': void
  'unsubscribe_xgov_app(uint64)void': void
  'request_subscribe_xgov(address,address,uint64,pay)void': void
  'approve_subscribe_xgov(uint64)void': void
  'reject_subscribe_xgov(uint64)void': void
  'set_voting_account(address,address)void': void
  'subscribe_proposer(pay)void': void
  'set_proposer_kyc(address,bool,uint64)void': void
  'declare_committee(byte[32],uint64,uint64)void': void
  'open_proposal(pay)uint64': bigint
  'vote_proposal(uint64,address,uint64,uint64)void': void
  'pay_grant_proposal(uint64)void': void
  'decommission_proposal(uint64)void': void
  'drop_proposal(uint64)void': void
  'deposit_funds(pay)void': void
  'withdraw_funds(uint64)void': void
  'get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)': TypedGlobalState
}

/**
 * Defines the types of available calls and state of the XGovRegistry smart contract.
 */
export type XGovRegistryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create()void' | 'create', {
      argsObj: XGovRegistryArgs['obj']['create()void']
      argsTuple: XGovRegistryArgs['tuple']['create()void']
      returns: XGovRegistryReturns['create()void']
    }>
    & Record<'pause_registry()void' | 'pause_registry', {
      argsObj: XGovRegistryArgs['obj']['pause_registry()void']
      argsTuple: XGovRegistryArgs['tuple']['pause_registry()void']
      returns: XGovRegistryReturns['pause_registry()void']
    }>
    & Record<'pause_proposals()void' | 'pause_proposals', {
      argsObj: XGovRegistryArgs['obj']['pause_proposals()void']
      argsTuple: XGovRegistryArgs['tuple']['pause_proposals()void']
      returns: XGovRegistryReturns['pause_proposals()void']
    }>
    & Record<'resume_registry()void' | 'resume_registry', {
      argsObj: XGovRegistryArgs['obj']['resume_registry()void']
      argsTuple: XGovRegistryArgs['tuple']['resume_registry()void']
      returns: XGovRegistryReturns['resume_registry()void']
    }>
    & Record<'resume_proposals()void' | 'resume_proposals', {
      argsObj: XGovRegistryArgs['obj']['resume_proposals()void']
      argsTuple: XGovRegistryArgs['tuple']['resume_proposals()void']
      returns: XGovRegistryReturns['resume_proposals()void']
    }>
    & Record<'set_xgov_manager(address)void' | 'set_xgov_manager', {
      argsObj: XGovRegistryArgs['obj']['set_xgov_manager(address)void']
      argsTuple: XGovRegistryArgs['tuple']['set_xgov_manager(address)void']
      returns: XGovRegistryReturns['set_xgov_manager(address)void']
    }>
    & Record<'set_payor(address)void' | 'set_payor', {
      argsObj: XGovRegistryArgs['obj']['set_payor(address)void']
      argsTuple: XGovRegistryArgs['tuple']['set_payor(address)void']
      returns: XGovRegistryReturns['set_payor(address)void']
    }>
    & Record<'set_xgov_reviewer(address)void' | 'set_xgov_reviewer', {
      argsObj: XGovRegistryArgs['obj']['set_xgov_reviewer(address)void']
      argsTuple: XGovRegistryArgs['tuple']['set_xgov_reviewer(address)void']
      returns: XGovRegistryReturns['set_xgov_reviewer(address)void']
    }>
    & Record<'set_xgov_subscriber(address)void' | 'set_xgov_subscriber', {
      argsObj: XGovRegistryArgs['obj']['set_xgov_subscriber(address)void']
      argsTuple: XGovRegistryArgs['tuple']['set_xgov_subscriber(address)void']
      returns: XGovRegistryReturns['set_xgov_subscriber(address)void']
    }>
    & Record<'set_kyc_provider(address)void' | 'set_kyc_provider', {
      argsObj: XGovRegistryArgs['obj']['set_kyc_provider(address)void']
      argsTuple: XGovRegistryArgs['tuple']['set_kyc_provider(address)void']
      returns: XGovRegistryReturns['set_kyc_provider(address)void']
    }>
    & Record<'set_committee_manager(address)void' | 'set_committee_manager', {
      argsObj: XGovRegistryArgs['obj']['set_committee_manager(address)void']
      argsTuple: XGovRegistryArgs['tuple']['set_committee_manager(address)void']
      returns: XGovRegistryReturns['set_committee_manager(address)void']
    }>
    & Record<'set_committee_publisher(address)void' | 'set_committee_publisher', {
      argsObj: XGovRegistryArgs['obj']['set_committee_publisher(address)void']
      argsTuple: XGovRegistryArgs['tuple']['set_committee_publisher(address)void']
      returns: XGovRegistryReturns['set_committee_publisher(address)void']
    }>
    & Record<'config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void' | 'config_xgov_registry', {
      argsObj: XGovRegistryArgs['obj']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void']
      argsTuple: XGovRegistryArgs['tuple']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void']
      returns: XGovRegistryReturns['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void']
    }>
    & Record<'update_xgov_registry()void' | 'update_xgov_registry', {
      argsObj: XGovRegistryArgs['obj']['update_xgov_registry()void']
      argsTuple: XGovRegistryArgs['tuple']['update_xgov_registry()void']
      returns: XGovRegistryReturns['update_xgov_registry()void']
    }>
    & Record<'subscribe_xgov(address,pay)void' | 'subscribe_xgov', {
      argsObj: XGovRegistryArgs['obj']['subscribe_xgov(address,pay)void']
      argsTuple: XGovRegistryArgs['tuple']['subscribe_xgov(address,pay)void']
      returns: XGovRegistryReturns['subscribe_xgov(address,pay)void']
    }>
    & Record<'unsubscribe_xgov(address)void' | 'unsubscribe_xgov', {
      argsObj: XGovRegistryArgs['obj']['unsubscribe_xgov(address)void']
      argsTuple: XGovRegistryArgs['tuple']['unsubscribe_xgov(address)void']
      returns: XGovRegistryReturns['unsubscribe_xgov(address)void']
    }>
    & Record<'subscribe_xgov_app(uint64,address,pay)void' | 'subscribe_xgov_app', {
      argsObj: XGovRegistryArgs['obj']['subscribe_xgov_app(uint64,address,pay)void']
      argsTuple: XGovRegistryArgs['tuple']['subscribe_xgov_app(uint64,address,pay)void']
      returns: XGovRegistryReturns['subscribe_xgov_app(uint64,address,pay)void']
    }>
    & Record<'unsubscribe_xgov_app(uint64)void' | 'unsubscribe_xgov_app', {
      argsObj: XGovRegistryArgs['obj']['unsubscribe_xgov_app(uint64)void']
      argsTuple: XGovRegistryArgs['tuple']['unsubscribe_xgov_app(uint64)void']
      returns: XGovRegistryReturns['unsubscribe_xgov_app(uint64)void']
    }>
    & Record<'request_subscribe_xgov(address,address,uint64,pay)void' | 'request_subscribe_xgov', {
      argsObj: XGovRegistryArgs['obj']['request_subscribe_xgov(address,address,uint64,pay)void']
      argsTuple: XGovRegistryArgs['tuple']['request_subscribe_xgov(address,address,uint64,pay)void']
      returns: XGovRegistryReturns['request_subscribe_xgov(address,address,uint64,pay)void']
    }>
    & Record<'approve_subscribe_xgov(uint64)void' | 'approve_subscribe_xgov', {
      argsObj: XGovRegistryArgs['obj']['approve_subscribe_xgov(uint64)void']
      argsTuple: XGovRegistryArgs['tuple']['approve_subscribe_xgov(uint64)void']
      returns: XGovRegistryReturns['approve_subscribe_xgov(uint64)void']
    }>
    & Record<'reject_subscribe_xgov(uint64)void' | 'reject_subscribe_xgov', {
      argsObj: XGovRegistryArgs['obj']['reject_subscribe_xgov(uint64)void']
      argsTuple: XGovRegistryArgs['tuple']['reject_subscribe_xgov(uint64)void']
      returns: XGovRegistryReturns['reject_subscribe_xgov(uint64)void']
    }>
    & Record<'set_voting_account(address,address)void' | 'set_voting_account', {
      argsObj: XGovRegistryArgs['obj']['set_voting_account(address,address)void']
      argsTuple: XGovRegistryArgs['tuple']['set_voting_account(address,address)void']
      returns: XGovRegistryReturns['set_voting_account(address,address)void']
    }>
    & Record<'subscribe_proposer(pay)void' | 'subscribe_proposer', {
      argsObj: XGovRegistryArgs['obj']['subscribe_proposer(pay)void']
      argsTuple: XGovRegistryArgs['tuple']['subscribe_proposer(pay)void']
      returns: XGovRegistryReturns['subscribe_proposer(pay)void']
    }>
    & Record<'set_proposer_kyc(address,bool,uint64)void' | 'set_proposer_kyc', {
      argsObj: XGovRegistryArgs['obj']['set_proposer_kyc(address,bool,uint64)void']
      argsTuple: XGovRegistryArgs['tuple']['set_proposer_kyc(address,bool,uint64)void']
      returns: XGovRegistryReturns['set_proposer_kyc(address,bool,uint64)void']
    }>
    & Record<'declare_committee(byte[32],uint64,uint64)void' | 'declare_committee', {
      argsObj: XGovRegistryArgs['obj']['declare_committee(byte[32],uint64,uint64)void']
      argsTuple: XGovRegistryArgs['tuple']['declare_committee(byte[32],uint64,uint64)void']
      returns: XGovRegistryReturns['declare_committee(byte[32],uint64,uint64)void']
    }>
    & Record<'open_proposal(pay)uint64' | 'open_proposal', {
      argsObj: XGovRegistryArgs['obj']['open_proposal(pay)uint64']
      argsTuple: XGovRegistryArgs['tuple']['open_proposal(pay)uint64']
      returns: XGovRegistryReturns['open_proposal(pay)uint64']
    }>
    & Record<'vote_proposal(uint64,address,uint64,uint64)void' | 'vote_proposal', {
      argsObj: XGovRegistryArgs['obj']['vote_proposal(uint64,address,uint64,uint64)void']
      argsTuple: XGovRegistryArgs['tuple']['vote_proposal(uint64,address,uint64,uint64)void']
      returns: XGovRegistryReturns['vote_proposal(uint64,address,uint64,uint64)void']
    }>
    & Record<'pay_grant_proposal(uint64)void' | 'pay_grant_proposal', {
      argsObj: XGovRegistryArgs['obj']['pay_grant_proposal(uint64)void']
      argsTuple: XGovRegistryArgs['tuple']['pay_grant_proposal(uint64)void']
      returns: XGovRegistryReturns['pay_grant_proposal(uint64)void']
    }>
    & Record<'decommission_proposal(uint64)void' | 'decommission_proposal', {
      argsObj: XGovRegistryArgs['obj']['decommission_proposal(uint64)void']
      argsTuple: XGovRegistryArgs['tuple']['decommission_proposal(uint64)void']
      returns: XGovRegistryReturns['decommission_proposal(uint64)void']
    }>
    & Record<'drop_proposal(uint64)void' | 'drop_proposal', {
      argsObj: XGovRegistryArgs['obj']['drop_proposal(uint64)void']
      argsTuple: XGovRegistryArgs['tuple']['drop_proposal(uint64)void']
      returns: XGovRegistryReturns['drop_proposal(uint64)void']
    }>
    & Record<'deposit_funds(pay)void' | 'deposit_funds', {
      argsObj: XGovRegistryArgs['obj']['deposit_funds(pay)void']
      argsTuple: XGovRegistryArgs['tuple']['deposit_funds(pay)void']
      returns: XGovRegistryReturns['deposit_funds(pay)void']
    }>
    & Record<'withdraw_funds(uint64)void' | 'withdraw_funds', {
      argsObj: XGovRegistryArgs['obj']['withdraw_funds(uint64)void']
      argsTuple: XGovRegistryArgs['tuple']['withdraw_funds(uint64)void']
      returns: XGovRegistryReturns['withdraw_funds(uint64)void']
    }>
    & Record<'get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)' | 'get_state', {
      argsObj: XGovRegistryArgs['obj']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)']
      argsTuple: XGovRegistryArgs['tuple']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)']
      returns: XGovRegistryReturns['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        committeeId: BinaryState
        committeeManager: BinaryState
        committeeMembers: bigint
        committeePublisher: BinaryState
        committeeVotes: bigint
        discussionDurationLarge: bigint
        discussionDurationMedium: bigint
        discussionDurationSmall: bigint
        discussionDurationXlarge: bigint
        kycProvider: BinaryState
        maxRequestedAmountLarge: bigint
        maxRequestedAmountMedium: bigint
        maxRequestedAmountSmall: bigint
        minRequestedAmount: bigint
        outstandingFunds: bigint
        pausedProposals: bigint
        pausedRegistry: bigint
        pendingProposals: bigint
        proposalCommitmentBps: bigint
        proposalFee: bigint
        proposalPublishingBps: bigint
        proposerFee: bigint
        quorumLarge: bigint
        quorumMedium: bigint
        quorumSmall: bigint
        requestId: bigint
        votingDurationLarge: bigint
        votingDurationMedium: bigint
        votingDurationSmall: bigint
        votingDurationXlarge: bigint
        weightedQuorumLarge: bigint
        weightedQuorumMedium: bigint
        weightedQuorumSmall: bigint
        xgovFee: bigint
        xgovManager: BinaryState
        xgovPayor: BinaryState
        xgovReviewer: BinaryState
        xgovSubscriber: BinaryState
        xgovs: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type XGovRegistrySignatures = keyof XGovRegistryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type XGovRegistryNonVoidMethodSignatures = keyof XGovRegistryTypes['methods'] extends infer T ? T extends keyof XGovRegistryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the XGovRegistry smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends XGovRegistrySignatures> = XGovRegistryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the XGovRegistry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends XGovRegistrySignatures> = XGovRegistryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = XGovRegistryTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type XGovRegistryCreateCallParams =
  | Expand<CallParams<XGovRegistryArgs['obj']['create()void'] | XGovRegistryArgs['tuple']['create()void']> & {method: 'create'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<XGovRegistryArgs['obj']['create()void'] | XGovRegistryArgs['tuple']['create()void']> & {method: 'create()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type XGovRegistryUpdateCallParams =
  | Expand<CallParams<XGovRegistryArgs['obj']['update_xgov_registry()void'] | XGovRegistryArgs['tuple']['update_xgov_registry()void']> & {method: 'update_xgov_registry'}>
  | Expand<CallParams<XGovRegistryArgs['obj']['update_xgov_registry()void'] | XGovRegistryArgs['tuple']['update_xgov_registry()void']> & {method: 'update_xgov_registry()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type XGovRegistryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: XGovRegistryCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: XGovRegistryUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the XGovRegistry smart contract
 */
export abstract class XGovRegistryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends XGovRegistryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create':
          case 'create()void':
            return XGovRegistryParamsFactory.create.create(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the XGovRegistry smart contract using the create()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      create(params: CallParams<XGovRegistryArgs['obj']['create()void'] | XGovRegistryArgs['tuple']['create()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends XGovRegistryUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'update_xgov_registry':
          case 'update_xgov_registry()void':
            return XGovRegistryParamsFactory.update.updateXgovRegistry(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the XGovRegistry smart contract using the update_xgov_registry()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateXgovRegistry(params: CallParams<XGovRegistryArgs['obj']['update_xgov_registry()void'] | XGovRegistryArgs['tuple']['update_xgov_registry()void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'update_xgov_registry()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the pause_registry()void ABI method
   *
   * Pauses the xGov Registry non-administrative methods.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauseRegistry(params: CallParams<XGovRegistryArgs['obj']['pause_registry()void'] | XGovRegistryArgs['tuple']['pause_registry()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pause_registry()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the pause_proposals()void ABI method
   *
   * Pauses the creation of new Proposals.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauseProposals(params: CallParams<XGovRegistryArgs['obj']['pause_proposals()void'] | XGovRegistryArgs['tuple']['pause_proposals()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pause_proposals()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the resume_registry()void ABI method
   *
   * Resumes the xGov Registry non-administrative methods.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resumeRegistry(params: CallParams<XGovRegistryArgs['obj']['resume_registry()void'] | XGovRegistryArgs['tuple']['resume_registry()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resume_registry()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the resume_proposals()void ABI method
   *
   * Resumes the creation of new Proposals.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resumeProposals(params: CallParams<XGovRegistryArgs['obj']['resume_proposals()void'] | XGovRegistryArgs['tuple']['resume_proposals()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resume_proposals()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the set_xgov_manager(address)void ABI method
   *
   * Sets the xGov Manager.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setXgovManager(params: CallParams<XGovRegistryArgs['obj']['set_xgov_manager(address)void'] | XGovRegistryArgs['tuple']['set_xgov_manager(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_xgov_manager(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.manager],
    }
  }
  /**
   * Constructs a no op call for the set_payor(address)void ABI method
   *
   * Sets the xGov Payor.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setPayor(params: CallParams<XGovRegistryArgs['obj']['set_payor(address)void'] | XGovRegistryArgs['tuple']['set_payor(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_payor(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payor],
    }
  }
  /**
   * Constructs a no op call for the set_xgov_reviewer(address)void ABI method
   *
   * Sets the xGov Reviewer.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setXgovReviewer(params: CallParams<XGovRegistryArgs['obj']['set_xgov_reviewer(address)void'] | XGovRegistryArgs['tuple']['set_xgov_reviewer(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_xgov_reviewer(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.reviewer],
    }
  }
  /**
   * Constructs a no op call for the set_xgov_subscriber(address)void ABI method
   *
   * Sets the xGov Subscriber.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setXgovSubscriber(params: CallParams<XGovRegistryArgs['obj']['set_xgov_subscriber(address)void'] | XGovRegistryArgs['tuple']['set_xgov_subscriber(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_xgov_subscriber(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.subscriber],
    }
  }
  /**
   * Constructs a no op call for the set_kyc_provider(address)void ABI method
   *
   * Sets the KYC provider.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setKycProvider(params: CallParams<XGovRegistryArgs['obj']['set_kyc_provider(address)void'] | XGovRegistryArgs['tuple']['set_kyc_provider(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_kyc_provider(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.provider],
    }
  }
  /**
   * Constructs a no op call for the set_committee_manager(address)void ABI method
   *
   * Sets the Committee Manager.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setCommitteeManager(params: CallParams<XGovRegistryArgs['obj']['set_committee_manager(address)void'] | XGovRegistryArgs['tuple']['set_committee_manager(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_committee_manager(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.manager],
    }
  }
  /**
   * Constructs a no op call for the set_committee_publisher(address)void ABI method
   *
   * Sets the Committee Publisher.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setCommitteePublisher(params: CallParams<XGovRegistryArgs['obj']['set_committee_publisher(address)void'] | XGovRegistryArgs['tuple']['set_committee_publisher(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_committee_publisher(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.publisher],
    }
  }
  /**
   * Constructs a no op call for the config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void ABI method
   *
   * Sets the configuration of the xGov Registry.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static configXgovRegistry(params: CallParams<XGovRegistryArgs['obj']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void'] | XGovRegistryArgs['tuple']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.config],
    }
  }
  /**
   * Constructs a no op call for the subscribe_xgov(address,pay)void ABI method
   *
   * Subscribes the sender to being an xGov.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static subscribeXgov(params: CallParams<XGovRegistryArgs['obj']['subscribe_xgov(address,pay)void'] | XGovRegistryArgs['tuple']['subscribe_xgov(address,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'subscribe_xgov(address,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.votingAddress, params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the unsubscribe_xgov(address)void ABI method
   *
   * Unsubscribes the designated address from being an xGov.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unsubscribeXgov(params: CallParams<XGovRegistryArgs['obj']['unsubscribe_xgov(address)void'] | XGovRegistryArgs['tuple']['unsubscribe_xgov(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unsubscribe_xgov(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.xgovAddress],
    }
  }
  /**
   * Constructs a no op call for the subscribe_xgov_app(uint64,address,pay)void ABI method
   *
   * The App Creator subscribes the App to being an xGov.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static subscribeXgovApp(params: CallParams<XGovRegistryArgs['obj']['subscribe_xgov_app(uint64,address,pay)void'] | XGovRegistryArgs['tuple']['subscribe_xgov_app(uint64,address,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'subscribe_xgov_app(uint64,address,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId, params.args.votingAddress, params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the unsubscribe_xgov_app(uint64)void ABI method
   *
   * Unsubscribes the designated App from being an xGov.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unsubscribeXgovApp(params: CallParams<XGovRegistryArgs['obj']['unsubscribe_xgov_app(uint64)void'] | XGovRegistryArgs['tuple']['unsubscribe_xgov_app(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unsubscribe_xgov_app(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId],
    }
  }
  /**
   * Constructs a no op call for the request_subscribe_xgov(address,address,uint64,pay)void ABI method
   *
   * Requests to subscribe to the xGov.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static requestSubscribeXgov(params: CallParams<XGovRegistryArgs['obj']['request_subscribe_xgov(address,address,uint64,pay)void'] | XGovRegistryArgs['tuple']['request_subscribe_xgov(address,address,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'request_subscribe_xgov(address,address,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.xgovAddress, params.args.ownerAddress, params.args.relationType, params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the approve_subscribe_xgov(uint64)void ABI method
   *
   * Approves a subscribe request to xGov.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approveSubscribeXgov(params: CallParams<XGovRegistryArgs['obj']['approve_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['approve_subscribe_xgov(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approve_subscribe_xgov(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.requestId],
    }
  }
  /**
   * Constructs a no op call for the reject_subscribe_xgov(uint64)void ABI method
   *
   * Rejects a subscribe request to xGov.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static rejectSubscribeXgov(params: CallParams<XGovRegistryArgs['obj']['reject_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['reject_subscribe_xgov(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reject_subscribe_xgov(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.requestId],
    }
  }
  /**
   * Constructs a no op call for the set_voting_account(address,address)void ABI method
   *
   * Sets the Voting Address for the xGov.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setVotingAccount(params: CallParams<XGovRegistryArgs['obj']['set_voting_account(address,address)void'] | XGovRegistryArgs['tuple']['set_voting_account(address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_voting_account(address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.xgovAddress, params.args.votingAddress],
    }
  }
  /**
   * Constructs a no op call for the subscribe_proposer(pay)void ABI method
   *
   * Subscribes the sender to being a Proposer.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static subscribeProposer(params: CallParams<XGovRegistryArgs['obj']['subscribe_proposer(pay)void'] | XGovRegistryArgs['tuple']['subscribe_proposer(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'subscribe_proposer(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the set_proposer_kyc(address,bool,uint64)void ABI method
   *
   * Sets a proposer's KYC status.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setProposerKyc(params: CallParams<XGovRegistryArgs['obj']['set_proposer_kyc(address,bool,uint64)void'] | XGovRegistryArgs['tuple']['set_proposer_kyc(address,bool,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_proposer_kyc(address,bool,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposer, params.args.kycStatus, params.args.kycExpiring],
    }
  }
  /**
   * Constructs a no op call for the declare_committee(byte[32],uint64,uint64)void ABI method
   *
   * Sets the xGov Committee in charge.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static declareCommittee(params: CallParams<XGovRegistryArgs['obj']['declare_committee(byte[32],uint64,uint64)void'] | XGovRegistryArgs['tuple']['declare_committee(byte[32],uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'declare_committee(byte[32],uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.committeeId, params.args.size, params.args.votes],
    }
  }
  /**
   * Constructs a no op call for the open_proposal(pay)uint64 ABI method
   *
   * Creates a new Proposal.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static openProposal(params: CallParams<XGovRegistryArgs['obj']['open_proposal(pay)uint64'] | XGovRegistryArgs['tuple']['open_proposal(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'open_proposal(pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the vote_proposal(uint64,address,uint64,uint64)void ABI method
   *
   * Votes on a Proposal.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteProposal(params: CallParams<XGovRegistryArgs['obj']['vote_proposal(uint64,address,uint64,uint64)void'] | XGovRegistryArgs['tuple']['vote_proposal(uint64,address,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote_proposal(uint64,address,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.xgovAddress, params.args.approvalVotes, params.args.rejectionVotes],
    }
  }
  /**
   * Constructs a no op call for the pay_grant_proposal(uint64)void ABI method
   *
   * Disburses the funds for an approved Proposal.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static payGrantProposal(params: CallParams<XGovRegistryArgs['obj']['pay_grant_proposal(uint64)void'] | XGovRegistryArgs['tuple']['pay_grant_proposal(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pay_grant_proposal(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
  /**
   * Constructs a no op call for the decommission_proposal(uint64)void ABI method
   *
   * Decommissions a Proposal.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static decommissionProposal(params: CallParams<XGovRegistryArgs['obj']['decommission_proposal(uint64)void'] | XGovRegistryArgs['tuple']['decommission_proposal(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'decommission_proposal(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
  /**
   * Constructs a no op call for the drop_proposal(uint64)void ABI method
   *
   * Drops a Proposal.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dropProposal(params: CallParams<XGovRegistryArgs['obj']['drop_proposal(uint64)void'] | XGovRegistryArgs['tuple']['drop_proposal(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'drop_proposal(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
  /**
   * Constructs a no op call for the deposit_funds(pay)void ABI method
   *
   * Deposits xGov program funds into the xGov Treasury (xGov Registry Account).
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static depositFunds(params: CallParams<XGovRegistryArgs['obj']['deposit_funds(pay)void'] | XGovRegistryArgs['tuple']['deposit_funds(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deposit_funds(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the withdraw_funds(uint64)void ABI method
   *
   * Remove xGov program funds from the xGov Treasury (xGov Registry Account).
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawFunds(params: CallParams<XGovRegistryArgs['obj']['withdraw_funds(uint64)void'] | XGovRegistryArgs['tuple']['withdraw_funds(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw_funds(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64) ABI method
   *
   * Returns the xGov Registry state.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getState(params: CallParams<XGovRegistryArgs['obj']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'] | XGovRegistryArgs['tuple']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the XGovRegistry smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class XGovRegistryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `XGovRegistryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new XGovRegistryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new XGovRegistryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the XGovRegistry smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: XGovRegistryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? XGovRegistryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (XGovRegistryCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? XGovRegistryParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (XGovRegistryUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new XGovRegistryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the XGovRegistry smart contract using the create()void ABI method.
       *
       * Create the xGov Registry.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      create: (params: CallParams<XGovRegistryArgs['obj']['create()void'] | XGovRegistryArgs['tuple']['create()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(XGovRegistryParamsFactory.create.create(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the XGovRegistry smart contract using the update_xgov_registry()void ABI method.
       *
       * Updates the xGov Registry contract.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateXgovRegistry: (params: CallParams<XGovRegistryArgs['obj']['update_xgov_registry()void'] | XGovRegistryArgs['tuple']['update_xgov_registry()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appFactory.params.deployUpdate(XGovRegistryParamsFactory.update.updateXgovRegistry(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the XGovRegistry smart contract using the create()void ABI method.
       *
       * Create the xGov Registry.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      create: (params: CallParams<XGovRegistryArgs['obj']['create()void'] | XGovRegistryArgs['tuple']['create()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(XGovRegistryParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the XGovRegistry smart contract using an ABI method call using the create()void ABI method.
       *
       * Create the xGov Registry.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      create: async (params: CallParams<XGovRegistryArgs['obj']['create()void'] | XGovRegistryArgs['tuple']['create()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(XGovRegistryParamsFactory.create.create(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | XGovRegistryReturns['create()void']) }, appClient: new XGovRegistryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the XGovRegistry smart contract
 */
export class XGovRegistryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `XGovRegistryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the XGovRegistry app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `XGovRegistryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends XGovRegistryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `XGovRegistryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<XGovRegistryClient> {
    return new XGovRegistryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `XGovRegistryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<XGovRegistryClient> {
    return new XGovRegistryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the XGovRegistry smart contract using the `update_xgov_registry()void` ABI method.
       *
       * Updates the xGov Registry contract.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateXgovRegistry: (params: CallParams<XGovRegistryArgs['obj']['update_xgov_registry()void'] | XGovRegistryArgs['tuple']['update_xgov_registry()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.params.update(XGovRegistryParamsFactory.update.updateXgovRegistry(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the XGovRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `pause_registry()void` ABI method.
     *
     * Pauses the xGov Registry non-administrative methods.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pauseRegistry: (params: CallParams<XGovRegistryArgs['obj']['pause_registry()void'] | XGovRegistryArgs['tuple']['pause_registry()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.pauseRegistry(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `pause_proposals()void` ABI method.
     *
     * Pauses the creation of new Proposals.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pauseProposals: (params: CallParams<XGovRegistryArgs['obj']['pause_proposals()void'] | XGovRegistryArgs['tuple']['pause_proposals()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.pauseProposals(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `resume_registry()void` ABI method.
     *
     * Resumes the xGov Registry non-administrative methods.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resumeRegistry: (params: CallParams<XGovRegistryArgs['obj']['resume_registry()void'] | XGovRegistryArgs['tuple']['resume_registry()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.resumeRegistry(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `resume_proposals()void` ABI method.
     *
     * Resumes the creation of new Proposals.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resumeProposals: (params: CallParams<XGovRegistryArgs['obj']['resume_proposals()void'] | XGovRegistryArgs['tuple']['resume_proposals()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.resumeProposals(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_xgov_manager(address)void` ABI method.
     *
     * Sets the xGov Manager.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setXgovManager: (params: CallParams<XGovRegistryArgs['obj']['set_xgov_manager(address)void'] | XGovRegistryArgs['tuple']['set_xgov_manager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.setXgovManager(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_payor(address)void` ABI method.
     *
     * Sets the xGov Payor.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setPayor: (params: CallParams<XGovRegistryArgs['obj']['set_payor(address)void'] | XGovRegistryArgs['tuple']['set_payor(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.setPayor(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_xgov_reviewer(address)void` ABI method.
     *
     * Sets the xGov Reviewer.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setXgovReviewer: (params: CallParams<XGovRegistryArgs['obj']['set_xgov_reviewer(address)void'] | XGovRegistryArgs['tuple']['set_xgov_reviewer(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.setXgovReviewer(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_xgov_subscriber(address)void` ABI method.
     *
     * Sets the xGov Subscriber.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setXgovSubscriber: (params: CallParams<XGovRegistryArgs['obj']['set_xgov_subscriber(address)void'] | XGovRegistryArgs['tuple']['set_xgov_subscriber(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.setXgovSubscriber(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_kyc_provider(address)void` ABI method.
     *
     * Sets the KYC provider.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setKycProvider: (params: CallParams<XGovRegistryArgs['obj']['set_kyc_provider(address)void'] | XGovRegistryArgs['tuple']['set_kyc_provider(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.setKycProvider(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_committee_manager(address)void` ABI method.
     *
     * Sets the Committee Manager.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setCommitteeManager: (params: CallParams<XGovRegistryArgs['obj']['set_committee_manager(address)void'] | XGovRegistryArgs['tuple']['set_committee_manager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.setCommitteeManager(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_committee_publisher(address)void` ABI method.
     *
     * Sets the Committee Publisher.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setCommitteePublisher: (params: CallParams<XGovRegistryArgs['obj']['set_committee_publisher(address)void'] | XGovRegistryArgs['tuple']['set_committee_publisher(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.setCommitteePublisher(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void` ABI method.
     *
     * Sets the configuration of the xGov Registry.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    configXgovRegistry: (params: CallParams<XGovRegistryArgs['obj']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void'] | XGovRegistryArgs['tuple']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.configXgovRegistry(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `subscribe_xgov(address,pay)void` ABI method.
     *
     * Subscribes the sender to being an xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    subscribeXgov: (params: CallParams<XGovRegistryArgs['obj']['subscribe_xgov(address,pay)void'] | XGovRegistryArgs['tuple']['subscribe_xgov(address,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.subscribeXgov(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `unsubscribe_xgov(address)void` ABI method.
     *
     * Unsubscribes the designated address from being an xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unsubscribeXgov: (params: CallParams<XGovRegistryArgs['obj']['unsubscribe_xgov(address)void'] | XGovRegistryArgs['tuple']['unsubscribe_xgov(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.unsubscribeXgov(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `subscribe_xgov_app(uint64,address,pay)void` ABI method.
     *
     * The App Creator subscribes the App to being an xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    subscribeXgovApp: (params: CallParams<XGovRegistryArgs['obj']['subscribe_xgov_app(uint64,address,pay)void'] | XGovRegistryArgs['tuple']['subscribe_xgov_app(uint64,address,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.subscribeXgovApp(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `unsubscribe_xgov_app(uint64)void` ABI method.
     *
     * Unsubscribes the designated App from being an xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unsubscribeXgovApp: (params: CallParams<XGovRegistryArgs['obj']['unsubscribe_xgov_app(uint64)void'] | XGovRegistryArgs['tuple']['unsubscribe_xgov_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.unsubscribeXgovApp(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `request_subscribe_xgov(address,address,uint64,pay)void` ABI method.
     *
     * Requests to subscribe to the xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    requestSubscribeXgov: (params: CallParams<XGovRegistryArgs['obj']['request_subscribe_xgov(address,address,uint64,pay)void'] | XGovRegistryArgs['tuple']['request_subscribe_xgov(address,address,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.requestSubscribeXgov(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `approve_subscribe_xgov(uint64)void` ABI method.
     *
     * Approves a subscribe request to xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approveSubscribeXgov: (params: CallParams<XGovRegistryArgs['obj']['approve_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['approve_subscribe_xgov(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.approveSubscribeXgov(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `reject_subscribe_xgov(uint64)void` ABI method.
     *
     * Rejects a subscribe request to xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    rejectSubscribeXgov: (params: CallParams<XGovRegistryArgs['obj']['reject_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['reject_subscribe_xgov(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.rejectSubscribeXgov(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_voting_account(address,address)void` ABI method.
     *
     * Sets the Voting Address for the xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setVotingAccount: (params: CallParams<XGovRegistryArgs['obj']['set_voting_account(address,address)void'] | XGovRegistryArgs['tuple']['set_voting_account(address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.setVotingAccount(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `subscribe_proposer(pay)void` ABI method.
     *
     * Subscribes the sender to being a Proposer.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    subscribeProposer: (params: CallParams<XGovRegistryArgs['obj']['subscribe_proposer(pay)void'] | XGovRegistryArgs['tuple']['subscribe_proposer(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.subscribeProposer(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_proposer_kyc(address,bool,uint64)void` ABI method.
     *
     * Sets a proposer's KYC status.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setProposerKyc: (params: CallParams<XGovRegistryArgs['obj']['set_proposer_kyc(address,bool,uint64)void'] | XGovRegistryArgs['tuple']['set_proposer_kyc(address,bool,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.setProposerKyc(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `declare_committee(byte[32],uint64,uint64)void` ABI method.
     *
     * Sets the xGov Committee in charge.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    declareCommittee: (params: CallParams<XGovRegistryArgs['obj']['declare_committee(byte[32],uint64,uint64)void'] | XGovRegistryArgs['tuple']['declare_committee(byte[32],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.declareCommittee(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `open_proposal(pay)uint64` ABI method.
     *
     * Creates a new Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    openProposal: (params: CallParams<XGovRegistryArgs['obj']['open_proposal(pay)uint64'] | XGovRegistryArgs['tuple']['open_proposal(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.openProposal(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `vote_proposal(uint64,address,uint64,uint64)void` ABI method.
     *
     * Votes on a Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    voteProposal: (params: CallParams<XGovRegistryArgs['obj']['vote_proposal(uint64,address,uint64,uint64)void'] | XGovRegistryArgs['tuple']['vote_proposal(uint64,address,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.voteProposal(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `pay_grant_proposal(uint64)void` ABI method.
     *
     * Disburses the funds for an approved Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    payGrantProposal: (params: CallParams<XGovRegistryArgs['obj']['pay_grant_proposal(uint64)void'] | XGovRegistryArgs['tuple']['pay_grant_proposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.payGrantProposal(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `decommission_proposal(uint64)void` ABI method.
     *
     * Decommissions a Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    decommissionProposal: (params: CallParams<XGovRegistryArgs['obj']['decommission_proposal(uint64)void'] | XGovRegistryArgs['tuple']['decommission_proposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.decommissionProposal(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `drop_proposal(uint64)void` ABI method.
     *
     * Drops a Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    dropProposal: (params: CallParams<XGovRegistryArgs['obj']['drop_proposal(uint64)void'] | XGovRegistryArgs['tuple']['drop_proposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.dropProposal(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `deposit_funds(pay)void` ABI method.
     *
     * Deposits xGov program funds into the xGov Treasury (xGov Registry Account).
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    depositFunds: (params: CallParams<XGovRegistryArgs['obj']['deposit_funds(pay)void'] | XGovRegistryArgs['tuple']['deposit_funds(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.depositFunds(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `withdraw_funds(uint64)void` ABI method.
     *
     * Remove xGov program funds from the xGov Treasury (xGov Registry Account).
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawFunds: (params: CallParams<XGovRegistryArgs['obj']['withdraw_funds(uint64)void'] | XGovRegistryArgs['tuple']['withdraw_funds(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.withdrawFunds(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the xGov Registry state.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getState: (params: CallParams<XGovRegistryArgs['obj']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'] | XGovRegistryArgs['tuple']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(XGovRegistryParamsFactory.getState(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the XGovRegistry smart contract using the `update_xgov_registry()void` ABI method.
       *
       * Updates the xGov Registry contract.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateXgovRegistry: (params: CallParams<XGovRegistryArgs['obj']['update_xgov_registry()void'] | XGovRegistryArgs['tuple']['update_xgov_registry()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.createTransaction.update(XGovRegistryParamsFactory.update.updateXgovRegistry(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the XGovRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `pause_registry()void` ABI method.
     *
     * Pauses the xGov Registry non-administrative methods.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pauseRegistry: (params: CallParams<XGovRegistryArgs['obj']['pause_registry()void'] | XGovRegistryArgs['tuple']['pause_registry()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.pauseRegistry(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `pause_proposals()void` ABI method.
     *
     * Pauses the creation of new Proposals.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pauseProposals: (params: CallParams<XGovRegistryArgs['obj']['pause_proposals()void'] | XGovRegistryArgs['tuple']['pause_proposals()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.pauseProposals(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `resume_registry()void` ABI method.
     *
     * Resumes the xGov Registry non-administrative methods.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resumeRegistry: (params: CallParams<XGovRegistryArgs['obj']['resume_registry()void'] | XGovRegistryArgs['tuple']['resume_registry()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.resumeRegistry(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `resume_proposals()void` ABI method.
     *
     * Resumes the creation of new Proposals.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resumeProposals: (params: CallParams<XGovRegistryArgs['obj']['resume_proposals()void'] | XGovRegistryArgs['tuple']['resume_proposals()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.resumeProposals(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_xgov_manager(address)void` ABI method.
     *
     * Sets the xGov Manager.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setXgovManager: (params: CallParams<XGovRegistryArgs['obj']['set_xgov_manager(address)void'] | XGovRegistryArgs['tuple']['set_xgov_manager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.setXgovManager(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_payor(address)void` ABI method.
     *
     * Sets the xGov Payor.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setPayor: (params: CallParams<XGovRegistryArgs['obj']['set_payor(address)void'] | XGovRegistryArgs['tuple']['set_payor(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.setPayor(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_xgov_reviewer(address)void` ABI method.
     *
     * Sets the xGov Reviewer.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setXgovReviewer: (params: CallParams<XGovRegistryArgs['obj']['set_xgov_reviewer(address)void'] | XGovRegistryArgs['tuple']['set_xgov_reviewer(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.setXgovReviewer(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_xgov_subscriber(address)void` ABI method.
     *
     * Sets the xGov Subscriber.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setXgovSubscriber: (params: CallParams<XGovRegistryArgs['obj']['set_xgov_subscriber(address)void'] | XGovRegistryArgs['tuple']['set_xgov_subscriber(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.setXgovSubscriber(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_kyc_provider(address)void` ABI method.
     *
     * Sets the KYC provider.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setKycProvider: (params: CallParams<XGovRegistryArgs['obj']['set_kyc_provider(address)void'] | XGovRegistryArgs['tuple']['set_kyc_provider(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.setKycProvider(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_committee_manager(address)void` ABI method.
     *
     * Sets the Committee Manager.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setCommitteeManager: (params: CallParams<XGovRegistryArgs['obj']['set_committee_manager(address)void'] | XGovRegistryArgs['tuple']['set_committee_manager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.setCommitteeManager(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_committee_publisher(address)void` ABI method.
     *
     * Sets the Committee Publisher.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setCommitteePublisher: (params: CallParams<XGovRegistryArgs['obj']['set_committee_publisher(address)void'] | XGovRegistryArgs['tuple']['set_committee_publisher(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.setCommitteePublisher(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void` ABI method.
     *
     * Sets the configuration of the xGov Registry.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    configXgovRegistry: (params: CallParams<XGovRegistryArgs['obj']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void'] | XGovRegistryArgs['tuple']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.configXgovRegistry(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `subscribe_xgov(address,pay)void` ABI method.
     *
     * Subscribes the sender to being an xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    subscribeXgov: (params: CallParams<XGovRegistryArgs['obj']['subscribe_xgov(address,pay)void'] | XGovRegistryArgs['tuple']['subscribe_xgov(address,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.subscribeXgov(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `unsubscribe_xgov(address)void` ABI method.
     *
     * Unsubscribes the designated address from being an xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unsubscribeXgov: (params: CallParams<XGovRegistryArgs['obj']['unsubscribe_xgov(address)void'] | XGovRegistryArgs['tuple']['unsubscribe_xgov(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.unsubscribeXgov(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `subscribe_xgov_app(uint64,address,pay)void` ABI method.
     *
     * The App Creator subscribes the App to being an xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    subscribeXgovApp: (params: CallParams<XGovRegistryArgs['obj']['subscribe_xgov_app(uint64,address,pay)void'] | XGovRegistryArgs['tuple']['subscribe_xgov_app(uint64,address,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.subscribeXgovApp(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `unsubscribe_xgov_app(uint64)void` ABI method.
     *
     * Unsubscribes the designated App from being an xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unsubscribeXgovApp: (params: CallParams<XGovRegistryArgs['obj']['unsubscribe_xgov_app(uint64)void'] | XGovRegistryArgs['tuple']['unsubscribe_xgov_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.unsubscribeXgovApp(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `request_subscribe_xgov(address,address,uint64,pay)void` ABI method.
     *
     * Requests to subscribe to the xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    requestSubscribeXgov: (params: CallParams<XGovRegistryArgs['obj']['request_subscribe_xgov(address,address,uint64,pay)void'] | XGovRegistryArgs['tuple']['request_subscribe_xgov(address,address,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.requestSubscribeXgov(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `approve_subscribe_xgov(uint64)void` ABI method.
     *
     * Approves a subscribe request to xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approveSubscribeXgov: (params: CallParams<XGovRegistryArgs['obj']['approve_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['approve_subscribe_xgov(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.approveSubscribeXgov(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `reject_subscribe_xgov(uint64)void` ABI method.
     *
     * Rejects a subscribe request to xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    rejectSubscribeXgov: (params: CallParams<XGovRegistryArgs['obj']['reject_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['reject_subscribe_xgov(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.rejectSubscribeXgov(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_voting_account(address,address)void` ABI method.
     *
     * Sets the Voting Address for the xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setVotingAccount: (params: CallParams<XGovRegistryArgs['obj']['set_voting_account(address,address)void'] | XGovRegistryArgs['tuple']['set_voting_account(address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.setVotingAccount(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `subscribe_proposer(pay)void` ABI method.
     *
     * Subscribes the sender to being a Proposer.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    subscribeProposer: (params: CallParams<XGovRegistryArgs['obj']['subscribe_proposer(pay)void'] | XGovRegistryArgs['tuple']['subscribe_proposer(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.subscribeProposer(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_proposer_kyc(address,bool,uint64)void` ABI method.
     *
     * Sets a proposer's KYC status.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setProposerKyc: (params: CallParams<XGovRegistryArgs['obj']['set_proposer_kyc(address,bool,uint64)void'] | XGovRegistryArgs['tuple']['set_proposer_kyc(address,bool,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.setProposerKyc(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `declare_committee(byte[32],uint64,uint64)void` ABI method.
     *
     * Sets the xGov Committee in charge.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    declareCommittee: (params: CallParams<XGovRegistryArgs['obj']['declare_committee(byte[32],uint64,uint64)void'] | XGovRegistryArgs['tuple']['declare_committee(byte[32],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.declareCommittee(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `open_proposal(pay)uint64` ABI method.
     *
     * Creates a new Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    openProposal: (params: CallParams<XGovRegistryArgs['obj']['open_proposal(pay)uint64'] | XGovRegistryArgs['tuple']['open_proposal(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.openProposal(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `vote_proposal(uint64,address,uint64,uint64)void` ABI method.
     *
     * Votes on a Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    voteProposal: (params: CallParams<XGovRegistryArgs['obj']['vote_proposal(uint64,address,uint64,uint64)void'] | XGovRegistryArgs['tuple']['vote_proposal(uint64,address,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.voteProposal(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `pay_grant_proposal(uint64)void` ABI method.
     *
     * Disburses the funds for an approved Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    payGrantProposal: (params: CallParams<XGovRegistryArgs['obj']['pay_grant_proposal(uint64)void'] | XGovRegistryArgs['tuple']['pay_grant_proposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.payGrantProposal(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `decommission_proposal(uint64)void` ABI method.
     *
     * Decommissions a Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    decommissionProposal: (params: CallParams<XGovRegistryArgs['obj']['decommission_proposal(uint64)void'] | XGovRegistryArgs['tuple']['decommission_proposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.decommissionProposal(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `drop_proposal(uint64)void` ABI method.
     *
     * Drops a Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    dropProposal: (params: CallParams<XGovRegistryArgs['obj']['drop_proposal(uint64)void'] | XGovRegistryArgs['tuple']['drop_proposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.dropProposal(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `deposit_funds(pay)void` ABI method.
     *
     * Deposits xGov program funds into the xGov Treasury (xGov Registry Account).
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    depositFunds: (params: CallParams<XGovRegistryArgs['obj']['deposit_funds(pay)void'] | XGovRegistryArgs['tuple']['deposit_funds(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.depositFunds(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `withdraw_funds(uint64)void` ABI method.
     *
     * Remove xGov program funds from the xGov Treasury (xGov Registry Account).
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawFunds: (params: CallParams<XGovRegistryArgs['obj']['withdraw_funds(uint64)void'] | XGovRegistryArgs['tuple']['withdraw_funds(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.withdrawFunds(params))
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the xGov Registry state.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getState: (params: CallParams<XGovRegistryArgs['obj']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'] | XGovRegistryArgs['tuple']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(XGovRegistryParamsFactory.getState(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the XGovRegistry smart contract using the `update_xgov_registry()void` ABI method.
       *
       * Updates the xGov Registry contract.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateXgovRegistry: async (params: CallParams<XGovRegistryArgs['obj']['update_xgov_registry()void'] | XGovRegistryArgs['tuple']['update_xgov_registry()void']> & AppClientCompilationParams & SendParams = {args: []}) => {
        const result = await this.appClient.send.update(XGovRegistryParamsFactory.update.updateXgovRegistry(params))
        return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['update_xgov_registry()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the XGovRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `pause_registry()void` ABI method.
     *
     * Pauses the xGov Registry non-administrative methods.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pauseRegistry: async (params: CallParams<XGovRegistryArgs['obj']['pause_registry()void'] | XGovRegistryArgs['tuple']['pause_registry()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.pauseRegistry(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['pause_registry()void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `pause_proposals()void` ABI method.
     *
     * Pauses the creation of new Proposals.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pauseProposals: async (params: CallParams<XGovRegistryArgs['obj']['pause_proposals()void'] | XGovRegistryArgs['tuple']['pause_proposals()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.pauseProposals(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['pause_proposals()void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `resume_registry()void` ABI method.
     *
     * Resumes the xGov Registry non-administrative methods.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resumeRegistry: async (params: CallParams<XGovRegistryArgs['obj']['resume_registry()void'] | XGovRegistryArgs['tuple']['resume_registry()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.resumeRegistry(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['resume_registry()void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `resume_proposals()void` ABI method.
     *
     * Resumes the creation of new Proposals.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resumeProposals: async (params: CallParams<XGovRegistryArgs['obj']['resume_proposals()void'] | XGovRegistryArgs['tuple']['resume_proposals()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.resumeProposals(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['resume_proposals()void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_xgov_manager(address)void` ABI method.
     *
     * Sets the xGov Manager.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setXgovManager: async (params: CallParams<XGovRegistryArgs['obj']['set_xgov_manager(address)void'] | XGovRegistryArgs['tuple']['set_xgov_manager(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.setXgovManager(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['set_xgov_manager(address)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_payor(address)void` ABI method.
     *
     * Sets the xGov Payor.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setPayor: async (params: CallParams<XGovRegistryArgs['obj']['set_payor(address)void'] | XGovRegistryArgs['tuple']['set_payor(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.setPayor(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['set_payor(address)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_xgov_reviewer(address)void` ABI method.
     *
     * Sets the xGov Reviewer.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setXgovReviewer: async (params: CallParams<XGovRegistryArgs['obj']['set_xgov_reviewer(address)void'] | XGovRegistryArgs['tuple']['set_xgov_reviewer(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.setXgovReviewer(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['set_xgov_reviewer(address)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_xgov_subscriber(address)void` ABI method.
     *
     * Sets the xGov Subscriber.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setXgovSubscriber: async (params: CallParams<XGovRegistryArgs['obj']['set_xgov_subscriber(address)void'] | XGovRegistryArgs['tuple']['set_xgov_subscriber(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.setXgovSubscriber(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['set_xgov_subscriber(address)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_kyc_provider(address)void` ABI method.
     *
     * Sets the KYC provider.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setKycProvider: async (params: CallParams<XGovRegistryArgs['obj']['set_kyc_provider(address)void'] | XGovRegistryArgs['tuple']['set_kyc_provider(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.setKycProvider(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['set_kyc_provider(address)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_committee_manager(address)void` ABI method.
     *
     * Sets the Committee Manager.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setCommitteeManager: async (params: CallParams<XGovRegistryArgs['obj']['set_committee_manager(address)void'] | XGovRegistryArgs['tuple']['set_committee_manager(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.setCommitteeManager(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['set_committee_manager(address)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_committee_publisher(address)void` ABI method.
     *
     * Sets the Committee Publisher.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setCommitteePublisher: async (params: CallParams<XGovRegistryArgs['obj']['set_committee_publisher(address)void'] | XGovRegistryArgs['tuple']['set_committee_publisher(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.setCommitteePublisher(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['set_committee_publisher(address)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void` ABI method.
     *
     * Sets the configuration of the xGov Registry.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    configXgovRegistry: async (params: CallParams<XGovRegistryArgs['obj']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void'] | XGovRegistryArgs['tuple']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.configXgovRegistry(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `subscribe_xgov(address,pay)void` ABI method.
     *
     * Subscribes the sender to being an xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    subscribeXgov: async (params: CallParams<XGovRegistryArgs['obj']['subscribe_xgov(address,pay)void'] | XGovRegistryArgs['tuple']['subscribe_xgov(address,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.subscribeXgov(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['subscribe_xgov(address,pay)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `unsubscribe_xgov(address)void` ABI method.
     *
     * Unsubscribes the designated address from being an xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unsubscribeXgov: async (params: CallParams<XGovRegistryArgs['obj']['unsubscribe_xgov(address)void'] | XGovRegistryArgs['tuple']['unsubscribe_xgov(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.unsubscribeXgov(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['unsubscribe_xgov(address)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `subscribe_xgov_app(uint64,address,pay)void` ABI method.
     *
     * The App Creator subscribes the App to being an xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    subscribeXgovApp: async (params: CallParams<XGovRegistryArgs['obj']['subscribe_xgov_app(uint64,address,pay)void'] | XGovRegistryArgs['tuple']['subscribe_xgov_app(uint64,address,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.subscribeXgovApp(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['subscribe_xgov_app(uint64,address,pay)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `unsubscribe_xgov_app(uint64)void` ABI method.
     *
     * Unsubscribes the designated App from being an xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unsubscribeXgovApp: async (params: CallParams<XGovRegistryArgs['obj']['unsubscribe_xgov_app(uint64)void'] | XGovRegistryArgs['tuple']['unsubscribe_xgov_app(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.unsubscribeXgovApp(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['unsubscribe_xgov_app(uint64)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `request_subscribe_xgov(address,address,uint64,pay)void` ABI method.
     *
     * Requests to subscribe to the xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    requestSubscribeXgov: async (params: CallParams<XGovRegistryArgs['obj']['request_subscribe_xgov(address,address,uint64,pay)void'] | XGovRegistryArgs['tuple']['request_subscribe_xgov(address,address,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.requestSubscribeXgov(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['request_subscribe_xgov(address,address,uint64,pay)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `approve_subscribe_xgov(uint64)void` ABI method.
     *
     * Approves a subscribe request to xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approveSubscribeXgov: async (params: CallParams<XGovRegistryArgs['obj']['approve_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['approve_subscribe_xgov(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.approveSubscribeXgov(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['approve_subscribe_xgov(uint64)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `reject_subscribe_xgov(uint64)void` ABI method.
     *
     * Rejects a subscribe request to xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    rejectSubscribeXgov: async (params: CallParams<XGovRegistryArgs['obj']['reject_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['reject_subscribe_xgov(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.rejectSubscribeXgov(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['reject_subscribe_xgov(uint64)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_voting_account(address,address)void` ABI method.
     *
     * Sets the Voting Address for the xGov.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setVotingAccount: async (params: CallParams<XGovRegistryArgs['obj']['set_voting_account(address,address)void'] | XGovRegistryArgs['tuple']['set_voting_account(address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.setVotingAccount(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['set_voting_account(address,address)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `subscribe_proposer(pay)void` ABI method.
     *
     * Subscribes the sender to being a Proposer.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    subscribeProposer: async (params: CallParams<XGovRegistryArgs['obj']['subscribe_proposer(pay)void'] | XGovRegistryArgs['tuple']['subscribe_proposer(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.subscribeProposer(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['subscribe_proposer(pay)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `set_proposer_kyc(address,bool,uint64)void` ABI method.
     *
     * Sets a proposer's KYC status.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setProposerKyc: async (params: CallParams<XGovRegistryArgs['obj']['set_proposer_kyc(address,bool,uint64)void'] | XGovRegistryArgs['tuple']['set_proposer_kyc(address,bool,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.setProposerKyc(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['set_proposer_kyc(address,bool,uint64)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `declare_committee(byte[32],uint64,uint64)void` ABI method.
     *
     * Sets the xGov Committee in charge.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    declareCommittee: async (params: CallParams<XGovRegistryArgs['obj']['declare_committee(byte[32],uint64,uint64)void'] | XGovRegistryArgs['tuple']['declare_committee(byte[32],uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.declareCommittee(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['declare_committee(byte[32],uint64,uint64)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `open_proposal(pay)uint64` ABI method.
     *
     * Creates a new Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    openProposal: async (params: CallParams<XGovRegistryArgs['obj']['open_proposal(pay)uint64'] | XGovRegistryArgs['tuple']['open_proposal(pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.openProposal(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['open_proposal(pay)uint64'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `vote_proposal(uint64,address,uint64,uint64)void` ABI method.
     *
     * Votes on a Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    voteProposal: async (params: CallParams<XGovRegistryArgs['obj']['vote_proposal(uint64,address,uint64,uint64)void'] | XGovRegistryArgs['tuple']['vote_proposal(uint64,address,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.voteProposal(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['vote_proposal(uint64,address,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `pay_grant_proposal(uint64)void` ABI method.
     *
     * Disburses the funds for an approved Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    payGrantProposal: async (params: CallParams<XGovRegistryArgs['obj']['pay_grant_proposal(uint64)void'] | XGovRegistryArgs['tuple']['pay_grant_proposal(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.payGrantProposal(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['pay_grant_proposal(uint64)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `decommission_proposal(uint64)void` ABI method.
     *
     * Decommissions a Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    decommissionProposal: async (params: CallParams<XGovRegistryArgs['obj']['decommission_proposal(uint64)void'] | XGovRegistryArgs['tuple']['decommission_proposal(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.decommissionProposal(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['decommission_proposal(uint64)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `drop_proposal(uint64)void` ABI method.
     *
     * Drops a Proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    dropProposal: async (params: CallParams<XGovRegistryArgs['obj']['drop_proposal(uint64)void'] | XGovRegistryArgs['tuple']['drop_proposal(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.dropProposal(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['drop_proposal(uint64)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `deposit_funds(pay)void` ABI method.
     *
     * Deposits xGov program funds into the xGov Treasury (xGov Registry Account).
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    depositFunds: async (params: CallParams<XGovRegistryArgs['obj']['deposit_funds(pay)void'] | XGovRegistryArgs['tuple']['deposit_funds(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.depositFunds(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['deposit_funds(pay)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `withdraw_funds(uint64)void` ABI method.
     *
     * Remove xGov program funds from the xGov Treasury (xGov Registry Account).
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawFunds: async (params: CallParams<XGovRegistryArgs['obj']['withdraw_funds(uint64)void'] | XGovRegistryArgs['tuple']['withdraw_funds(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.withdrawFunds(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['withdraw_funds(uint64)void'])}
    },

    /**
     * Makes a call to the XGovRegistry smart contract using the `get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the xGov Registry state.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getState: async (params: CallParams<XGovRegistryArgs['obj']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'] | XGovRegistryArgs['tuple']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(XGovRegistryParamsFactory.getState(params))
      return {...result, return: result.return as unknown as (undefined | XGovRegistryReturns['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new XGovRegistryClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the XGovRegistry smart contract using the `get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the xGov Registry state.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getState(params: CallParams<XGovRegistryArgs['obj']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'] | XGovRegistryArgs['tuple']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(XGovRegistryParamsFactory.getState(params))
    return result.return as unknown as XGovRegistryReturns['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)']
  }

  /**
   * Methods to access state for the current XGovRegistry app
   */
  state = {
    /**
     * Methods to access global state for the current XGovRegistry app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          committeeId: new BinaryStateValue(result.committee_id),
          committeeManager: new BinaryStateValue(result.committee_manager),
          committeeMembers: result.committee_members,
          committeePublisher: new BinaryStateValue(result.committee_publisher),
          committeeVotes: result.committee_votes,
          discussionDurationLarge: result.discussion_duration_large,
          discussionDurationMedium: result.discussion_duration_medium,
          discussionDurationSmall: result.discussion_duration_small,
          discussionDurationXlarge: result.discussion_duration_xlarge,
          kycProvider: new BinaryStateValue(result.kyc_provider),
          maxRequestedAmountLarge: result.max_requested_amount_large,
          maxRequestedAmountMedium: result.max_requested_amount_medium,
          maxRequestedAmountSmall: result.max_requested_amount_small,
          minRequestedAmount: result.min_requested_amount,
          outstandingFunds: result.outstanding_funds,
          pausedProposals: result.paused_proposals,
          pausedRegistry: result.paused_registry,
          pendingProposals: result.pending_proposals,
          proposalCommitmentBps: result.proposal_commitment_bps,
          proposalFee: result.proposal_fee,
          proposalPublishingBps: result.proposal_publishing_bps,
          proposerFee: result.proposer_fee,
          quorumLarge: result.quorum_large,
          quorumMedium: result.quorum_medium,
          quorumSmall: result.quorum_small,
          requestId: result.request_id,
          votingDurationLarge: result.voting_duration_large,
          votingDurationMedium: result.voting_duration_medium,
          votingDurationSmall: result.voting_duration_small,
          votingDurationXlarge: result.voting_duration_xlarge,
          weightedQuorumLarge: result.weighted_quorum_large,
          weightedQuorumMedium: result.weighted_quorum_medium,
          weightedQuorumSmall: result.weighted_quorum_small,
          xgovFee: result.xgov_fee,
          xgovManager: new BinaryStateValue(result.xgov_manager),
          xgovPayor: new BinaryStateValue(result.xgov_payor),
          xgovReviewer: new BinaryStateValue(result.xgov_reviewer),
          xgovSubscriber: new BinaryStateValue(result.xgov_subscriber),
          xgovs: result.xgovs,
        }
      },
      /**
       * Get the current value of the committee_id key in global state
       */
      committeeId: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("committee_id")) as Uint8Array | undefined) },
      /**
       * Get the current value of the committee_manager key in global state
       */
      committeeManager: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("committee_manager")) as Uint8Array | undefined) },
      /**
       * Get the current value of the committee_members key in global state
       */
      committeeMembers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("committee_members")) as bigint | undefined },
      /**
       * Get the current value of the committee_publisher key in global state
       */
      committeePublisher: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("committee_publisher")) as Uint8Array | undefined) },
      /**
       * Get the current value of the committee_votes key in global state
       */
      committeeVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("committee_votes")) as bigint | undefined },
      /**
       * Get the current value of the discussion_duration_large key in global state
       */
      discussionDurationLarge: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("discussion_duration_large")) as bigint | undefined },
      /**
       * Get the current value of the discussion_duration_medium key in global state
       */
      discussionDurationMedium: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("discussion_duration_medium")) as bigint | undefined },
      /**
       * Get the current value of the discussion_duration_small key in global state
       */
      discussionDurationSmall: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("discussion_duration_small")) as bigint | undefined },
      /**
       * Get the current value of the discussion_duration_xlarge key in global state
       */
      discussionDurationXlarge: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("discussion_duration_xlarge")) as bigint | undefined },
      /**
       * Get the current value of the kyc_provider key in global state
       */
      kycProvider: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("kyc_provider")) as Uint8Array | undefined) },
      /**
       * Get the current value of the max_requested_amount_large key in global state
       */
      maxRequestedAmountLarge: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("max_requested_amount_large")) as bigint | undefined },
      /**
       * Get the current value of the max_requested_amount_medium key in global state
       */
      maxRequestedAmountMedium: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("max_requested_amount_medium")) as bigint | undefined },
      /**
       * Get the current value of the max_requested_amount_small key in global state
       */
      maxRequestedAmountSmall: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("max_requested_amount_small")) as bigint | undefined },
      /**
       * Get the current value of the min_requested_amount key in global state
       */
      minRequestedAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("min_requested_amount")) as bigint | undefined },
      /**
       * Get the current value of the outstanding_funds key in global state
       */
      outstandingFunds: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("outstanding_funds")) as bigint | undefined },
      /**
       * Get the current value of the paused_proposals key in global state
       */
      pausedProposals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("paused_proposals")) as bigint | undefined },
      /**
       * Get the current value of the paused_registry key in global state
       */
      pausedRegistry: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("paused_registry")) as bigint | undefined },
      /**
       * Get the current value of the pending_proposals key in global state
       */
      pendingProposals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("pending_proposals")) as bigint | undefined },
      /**
       * Get the current value of the proposal_commitment_bps key in global state
       */
      proposalCommitmentBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("proposal_commitment_bps")) as bigint | undefined },
      /**
       * Get the current value of the proposal_fee key in global state
       */
      proposalFee: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("proposal_fee")) as bigint | undefined },
      /**
       * Get the current value of the proposal_publishing_bps key in global state
       */
      proposalPublishingBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("proposal_publishing_bps")) as bigint | undefined },
      /**
       * Get the current value of the proposer_fee key in global state
       */
      proposerFee: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("proposer_fee")) as bigint | undefined },
      /**
       * Get the current value of the quorum_large key in global state
       */
      quorumLarge: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("quorum_large")) as bigint | undefined },
      /**
       * Get the current value of the quorum_medium key in global state
       */
      quorumMedium: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("quorum_medium")) as bigint | undefined },
      /**
       * Get the current value of the quorum_small key in global state
       */
      quorumSmall: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("quorum_small")) as bigint | undefined },
      /**
       * Get the current value of the request_id key in global state
       */
      requestId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("request_id")) as bigint | undefined },
      /**
       * Get the current value of the voting_duration_large key in global state
       */
      votingDurationLarge: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voting_duration_large")) as bigint | undefined },
      /**
       * Get the current value of the voting_duration_medium key in global state
       */
      votingDurationMedium: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voting_duration_medium")) as bigint | undefined },
      /**
       * Get the current value of the voting_duration_small key in global state
       */
      votingDurationSmall: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voting_duration_small")) as bigint | undefined },
      /**
       * Get the current value of the voting_duration_xlarge key in global state
       */
      votingDurationXlarge: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voting_duration_xlarge")) as bigint | undefined },
      /**
       * Get the current value of the weighted_quorum_large key in global state
       */
      weightedQuorumLarge: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("weighted_quorum_large")) as bigint | undefined },
      /**
       * Get the current value of the weighted_quorum_medium key in global state
       */
      weightedQuorumMedium: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("weighted_quorum_medium")) as bigint | undefined },
      /**
       * Get the current value of the weighted_quorum_small key in global state
       */
      weightedQuorumSmall: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("weighted_quorum_small")) as bigint | undefined },
      /**
       * Get the current value of the xgov_fee key in global state
       */
      xgovFee: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("xgov_fee")) as bigint | undefined },
      /**
       * Get the current value of the xgov_manager key in global state
       */
      xgovManager: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("xgov_manager")) as Uint8Array | undefined) },
      /**
       * Get the current value of the xgov_payor key in global state
       */
      xgovPayor: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("xgov_payor")) as Uint8Array | undefined) },
      /**
       * Get the current value of the xgov_reviewer key in global state
       */
      xgovReviewer: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("xgov_reviewer")) as Uint8Array | undefined) },
      /**
       * Get the current value of the xgov_subscriber key in global state
       */
      xgovSubscriber: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("xgov_subscriber")) as Uint8Array | undefined) },
      /**
       * Get the current value of the xgovs key in global state
       */
      xgovs: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("xgovs")) as bigint | undefined },
    },
  }

  public newGroup(): XGovRegistryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a pause_registry()void method call against the XGovRegistry contract
       */
      pauseRegistry(params: CallParams<XGovRegistryArgs['obj']['pause_registry()void'] | XGovRegistryArgs['tuple']['pause_registry()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauseRegistry(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a pause_proposals()void method call against the XGovRegistry contract
       */
      pauseProposals(params: CallParams<XGovRegistryArgs['obj']['pause_proposals()void'] | XGovRegistryArgs['tuple']['pause_proposals()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauseProposals(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a resume_registry()void method call against the XGovRegistry contract
       */
      resumeRegistry(params: CallParams<XGovRegistryArgs['obj']['resume_registry()void'] | XGovRegistryArgs['tuple']['resume_registry()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resumeRegistry(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a resume_proposals()void method call against the XGovRegistry contract
       */
      resumeProposals(params: CallParams<XGovRegistryArgs['obj']['resume_proposals()void'] | XGovRegistryArgs['tuple']['resume_proposals()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resumeProposals(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_xgov_manager(address)void method call against the XGovRegistry contract
       */
      setXgovManager(params: CallParams<XGovRegistryArgs['obj']['set_xgov_manager(address)void'] | XGovRegistryArgs['tuple']['set_xgov_manager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setXgovManager(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_payor(address)void method call against the XGovRegistry contract
       */
      setPayor(params: CallParams<XGovRegistryArgs['obj']['set_payor(address)void'] | XGovRegistryArgs['tuple']['set_payor(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setPayor(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_xgov_reviewer(address)void method call against the XGovRegistry contract
       */
      setXgovReviewer(params: CallParams<XGovRegistryArgs['obj']['set_xgov_reviewer(address)void'] | XGovRegistryArgs['tuple']['set_xgov_reviewer(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setXgovReviewer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_xgov_subscriber(address)void method call against the XGovRegistry contract
       */
      setXgovSubscriber(params: CallParams<XGovRegistryArgs['obj']['set_xgov_subscriber(address)void'] | XGovRegistryArgs['tuple']['set_xgov_subscriber(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setXgovSubscriber(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_kyc_provider(address)void method call against the XGovRegistry contract
       */
      setKycProvider(params: CallParams<XGovRegistryArgs['obj']['set_kyc_provider(address)void'] | XGovRegistryArgs['tuple']['set_kyc_provider(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setKycProvider(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_committee_manager(address)void method call against the XGovRegistry contract
       */
      setCommitteeManager(params: CallParams<XGovRegistryArgs['obj']['set_committee_manager(address)void'] | XGovRegistryArgs['tuple']['set_committee_manager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setCommitteeManager(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_committee_publisher(address)void method call against the XGovRegistry contract
       */
      setCommitteePublisher(params: CallParams<XGovRegistryArgs['obj']['set_committee_publisher(address)void'] | XGovRegistryArgs['tuple']['set_committee_publisher(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setCommitteePublisher(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void method call against the XGovRegistry contract
       */
      configXgovRegistry(params: CallParams<XGovRegistryArgs['obj']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void'] | XGovRegistryArgs['tuple']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.configXgovRegistry(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a subscribe_xgov(address,pay)void method call against the XGovRegistry contract
       */
      subscribeXgov(params: CallParams<XGovRegistryArgs['obj']['subscribe_xgov(address,pay)void'] | XGovRegistryArgs['tuple']['subscribe_xgov(address,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.subscribeXgov(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a unsubscribe_xgov(address)void method call against the XGovRegistry contract
       */
      unsubscribeXgov(params: CallParams<XGovRegistryArgs['obj']['unsubscribe_xgov(address)void'] | XGovRegistryArgs['tuple']['unsubscribe_xgov(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unsubscribeXgov(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a subscribe_xgov_app(uint64,address,pay)void method call against the XGovRegistry contract
       */
      subscribeXgovApp(params: CallParams<XGovRegistryArgs['obj']['subscribe_xgov_app(uint64,address,pay)void'] | XGovRegistryArgs['tuple']['subscribe_xgov_app(uint64,address,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.subscribeXgovApp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a unsubscribe_xgov_app(uint64)void method call against the XGovRegistry contract
       */
      unsubscribeXgovApp(params: CallParams<XGovRegistryArgs['obj']['unsubscribe_xgov_app(uint64)void'] | XGovRegistryArgs['tuple']['unsubscribe_xgov_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unsubscribeXgovApp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a request_subscribe_xgov(address,address,uint64,pay)void method call against the XGovRegistry contract
       */
      requestSubscribeXgov(params: CallParams<XGovRegistryArgs['obj']['request_subscribe_xgov(address,address,uint64,pay)void'] | XGovRegistryArgs['tuple']['request_subscribe_xgov(address,address,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.requestSubscribeXgov(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a approve_subscribe_xgov(uint64)void method call against the XGovRegistry contract
       */
      approveSubscribeXgov(params: CallParams<XGovRegistryArgs['obj']['approve_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['approve_subscribe_xgov(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approveSubscribeXgov(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reject_subscribe_xgov(uint64)void method call against the XGovRegistry contract
       */
      rejectSubscribeXgov(params: CallParams<XGovRegistryArgs['obj']['reject_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['reject_subscribe_xgov(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.rejectSubscribeXgov(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_voting_account(address,address)void method call against the XGovRegistry contract
       */
      setVotingAccount(params: CallParams<XGovRegistryArgs['obj']['set_voting_account(address,address)void'] | XGovRegistryArgs['tuple']['set_voting_account(address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setVotingAccount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a subscribe_proposer(pay)void method call against the XGovRegistry contract
       */
      subscribeProposer(params: CallParams<XGovRegistryArgs['obj']['subscribe_proposer(pay)void'] | XGovRegistryArgs['tuple']['subscribe_proposer(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.subscribeProposer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_proposer_kyc(address,bool,uint64)void method call against the XGovRegistry contract
       */
      setProposerKyc(params: CallParams<XGovRegistryArgs['obj']['set_proposer_kyc(address,bool,uint64)void'] | XGovRegistryArgs['tuple']['set_proposer_kyc(address,bool,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setProposerKyc(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a declare_committee(byte[32],uint64,uint64)void method call against the XGovRegistry contract
       */
      declareCommittee(params: CallParams<XGovRegistryArgs['obj']['declare_committee(byte[32],uint64,uint64)void'] | XGovRegistryArgs['tuple']['declare_committee(byte[32],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.declareCommittee(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a open_proposal(pay)uint64 method call against the XGovRegistry contract
       */
      openProposal(params: CallParams<XGovRegistryArgs['obj']['open_proposal(pay)uint64'] | XGovRegistryArgs['tuple']['open_proposal(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.openProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('open_proposal(pay)uint64', v))
        return this
      },
      /**
       * Add a vote_proposal(uint64,address,uint64,uint64)void method call against the XGovRegistry contract
       */
      voteProposal(params: CallParams<XGovRegistryArgs['obj']['vote_proposal(uint64,address,uint64,uint64)void'] | XGovRegistryArgs['tuple']['vote_proposal(uint64,address,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.voteProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a pay_grant_proposal(uint64)void method call against the XGovRegistry contract
       */
      payGrantProposal(params: CallParams<XGovRegistryArgs['obj']['pay_grant_proposal(uint64)void'] | XGovRegistryArgs['tuple']['pay_grant_proposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.payGrantProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a decommission_proposal(uint64)void method call against the XGovRegistry contract
       */
      decommissionProposal(params: CallParams<XGovRegistryArgs['obj']['decommission_proposal(uint64)void'] | XGovRegistryArgs['tuple']['decommission_proposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.decommissionProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a drop_proposal(uint64)void method call against the XGovRegistry contract
       */
      dropProposal(params: CallParams<XGovRegistryArgs['obj']['drop_proposal(uint64)void'] | XGovRegistryArgs['tuple']['drop_proposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dropProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deposit_funds(pay)void method call against the XGovRegistry contract
       */
      depositFunds(params: CallParams<XGovRegistryArgs['obj']['deposit_funds(pay)void'] | XGovRegistryArgs['tuple']['deposit_funds(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.depositFunds(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw_funds(uint64)void method call against the XGovRegistry contract
       */
      withdrawFunds(params: CallParams<XGovRegistryArgs['obj']['withdraw_funds(uint64)void'] | XGovRegistryArgs['tuple']['withdraw_funds(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawFunds(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64) method call against the XGovRegistry contract
       */
      getState(params: CallParams<XGovRegistryArgs['obj']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'] | XGovRegistryArgs['tuple']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getState(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)', v))
        return this
      },
      get update() {
        return {
          updateXgovRegistry: (params: CallParams<XGovRegistryArgs['obj']['update_xgov_registry()void'] | XGovRegistryArgs['tuple']['update_xgov_registry()void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateXgovRegistry(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the XGovRegistry contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as XGovRegistryComposer
  }
}
export type XGovRegistryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the pause_registry()void ABI method.
   *
   * Pauses the xGov Registry non-administrative methods.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseRegistry(params?: CallParams<XGovRegistryArgs['obj']['pause_registry()void'] | XGovRegistryArgs['tuple']['pause_registry()void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['pause_registry()void'] | undefined]>

  /**
   * Calls the pause_proposals()void ABI method.
   *
   * Pauses the creation of new Proposals.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseProposals(params?: CallParams<XGovRegistryArgs['obj']['pause_proposals()void'] | XGovRegistryArgs['tuple']['pause_proposals()void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['pause_proposals()void'] | undefined]>

  /**
   * Calls the resume_registry()void ABI method.
   *
   * Resumes the xGov Registry non-administrative methods.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resumeRegistry(params?: CallParams<XGovRegistryArgs['obj']['resume_registry()void'] | XGovRegistryArgs['tuple']['resume_registry()void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['resume_registry()void'] | undefined]>

  /**
   * Calls the resume_proposals()void ABI method.
   *
   * Resumes the creation of new Proposals.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resumeProposals(params?: CallParams<XGovRegistryArgs['obj']['resume_proposals()void'] | XGovRegistryArgs['tuple']['resume_proposals()void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['resume_proposals()void'] | undefined]>

  /**
   * Calls the set_xgov_manager(address)void ABI method.
   *
   * Sets the xGov Manager.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setXgovManager(params?: CallParams<XGovRegistryArgs['obj']['set_xgov_manager(address)void'] | XGovRegistryArgs['tuple']['set_xgov_manager(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_xgov_manager(address)void'] | undefined]>

  /**
   * Calls the set_payor(address)void ABI method.
   *
   * Sets the xGov Payor.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPayor(params?: CallParams<XGovRegistryArgs['obj']['set_payor(address)void'] | XGovRegistryArgs['tuple']['set_payor(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_payor(address)void'] | undefined]>

  /**
   * Calls the set_xgov_reviewer(address)void ABI method.
   *
   * Sets the xGov Reviewer.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setXgovReviewer(params?: CallParams<XGovRegistryArgs['obj']['set_xgov_reviewer(address)void'] | XGovRegistryArgs['tuple']['set_xgov_reviewer(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_xgov_reviewer(address)void'] | undefined]>

  /**
   * Calls the set_xgov_subscriber(address)void ABI method.
   *
   * Sets the xGov Subscriber.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setXgovSubscriber(params?: CallParams<XGovRegistryArgs['obj']['set_xgov_subscriber(address)void'] | XGovRegistryArgs['tuple']['set_xgov_subscriber(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_xgov_subscriber(address)void'] | undefined]>

  /**
   * Calls the set_kyc_provider(address)void ABI method.
   *
   * Sets the KYC provider.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setKycProvider(params?: CallParams<XGovRegistryArgs['obj']['set_kyc_provider(address)void'] | XGovRegistryArgs['tuple']['set_kyc_provider(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_kyc_provider(address)void'] | undefined]>

  /**
   * Calls the set_committee_manager(address)void ABI method.
   *
   * Sets the Committee Manager.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setCommitteeManager(params?: CallParams<XGovRegistryArgs['obj']['set_committee_manager(address)void'] | XGovRegistryArgs['tuple']['set_committee_manager(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_committee_manager(address)void'] | undefined]>

  /**
   * Calls the set_committee_publisher(address)void ABI method.
   *
   * Sets the Committee Publisher.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setCommitteePublisher(params?: CallParams<XGovRegistryArgs['obj']['set_committee_publisher(address)void'] | XGovRegistryArgs['tuple']['set_committee_publisher(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_committee_publisher(address)void'] | undefined]>

  /**
   * Calls the config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void ABI method.
   *
   * Sets the configuration of the xGov Registry.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  configXgovRegistry(params?: CallParams<XGovRegistryArgs['obj']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void'] | XGovRegistryArgs['tuple']['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void'] | undefined]>

  /**
   * Calls the subscribe_xgov(address,pay)void ABI method.
   *
   * Subscribes the sender to being an xGov.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  subscribeXgov(params?: CallParams<XGovRegistryArgs['obj']['subscribe_xgov(address,pay)void'] | XGovRegistryArgs['tuple']['subscribe_xgov(address,pay)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['subscribe_xgov(address,pay)void'] | undefined]>

  /**
   * Calls the unsubscribe_xgov(address)void ABI method.
   *
   * Unsubscribes the designated address from being an xGov.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unsubscribeXgov(params?: CallParams<XGovRegistryArgs['obj']['unsubscribe_xgov(address)void'] | XGovRegistryArgs['tuple']['unsubscribe_xgov(address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['unsubscribe_xgov(address)void'] | undefined]>

  /**
   * Calls the subscribe_xgov_app(uint64,address,pay)void ABI method.
   *
   * The App Creator subscribes the App to being an xGov.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  subscribeXgovApp(params?: CallParams<XGovRegistryArgs['obj']['subscribe_xgov_app(uint64,address,pay)void'] | XGovRegistryArgs['tuple']['subscribe_xgov_app(uint64,address,pay)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['subscribe_xgov_app(uint64,address,pay)void'] | undefined]>

  /**
   * Calls the unsubscribe_xgov_app(uint64)void ABI method.
   *
   * Unsubscribes the designated App from being an xGov.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unsubscribeXgovApp(params?: CallParams<XGovRegistryArgs['obj']['unsubscribe_xgov_app(uint64)void'] | XGovRegistryArgs['tuple']['unsubscribe_xgov_app(uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['unsubscribe_xgov_app(uint64)void'] | undefined]>

  /**
   * Calls the request_subscribe_xgov(address,address,uint64,pay)void ABI method.
   *
   * Requests to subscribe to the xGov.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  requestSubscribeXgov(params?: CallParams<XGovRegistryArgs['obj']['request_subscribe_xgov(address,address,uint64,pay)void'] | XGovRegistryArgs['tuple']['request_subscribe_xgov(address,address,uint64,pay)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['request_subscribe_xgov(address,address,uint64,pay)void'] | undefined]>

  /**
   * Calls the approve_subscribe_xgov(uint64)void ABI method.
   *
   * Approves a subscribe request to xGov.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveSubscribeXgov(params?: CallParams<XGovRegistryArgs['obj']['approve_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['approve_subscribe_xgov(uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['approve_subscribe_xgov(uint64)void'] | undefined]>

  /**
   * Calls the reject_subscribe_xgov(uint64)void ABI method.
   *
   * Rejects a subscribe request to xGov.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rejectSubscribeXgov(params?: CallParams<XGovRegistryArgs['obj']['reject_subscribe_xgov(uint64)void'] | XGovRegistryArgs['tuple']['reject_subscribe_xgov(uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['reject_subscribe_xgov(uint64)void'] | undefined]>

  /**
   * Calls the set_voting_account(address,address)void ABI method.
   *
   * Sets the Voting Address for the xGov.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVotingAccount(params?: CallParams<XGovRegistryArgs['obj']['set_voting_account(address,address)void'] | XGovRegistryArgs['tuple']['set_voting_account(address,address)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_voting_account(address,address)void'] | undefined]>

  /**
   * Calls the subscribe_proposer(pay)void ABI method.
   *
   * Subscribes the sender to being a Proposer.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  subscribeProposer(params?: CallParams<XGovRegistryArgs['obj']['subscribe_proposer(pay)void'] | XGovRegistryArgs['tuple']['subscribe_proposer(pay)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['subscribe_proposer(pay)void'] | undefined]>

  /**
   * Calls the set_proposer_kyc(address,bool,uint64)void ABI method.
   *
   * Sets a proposer's KYC status.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setProposerKyc(params?: CallParams<XGovRegistryArgs['obj']['set_proposer_kyc(address,bool,uint64)void'] | XGovRegistryArgs['tuple']['set_proposer_kyc(address,bool,uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['set_proposer_kyc(address,bool,uint64)void'] | undefined]>

  /**
   * Calls the declare_committee(byte[32],uint64,uint64)void ABI method.
   *
   * Sets the xGov Committee in charge.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  declareCommittee(params?: CallParams<XGovRegistryArgs['obj']['declare_committee(byte[32],uint64,uint64)void'] | XGovRegistryArgs['tuple']['declare_committee(byte[32],uint64,uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['declare_committee(byte[32],uint64,uint64)void'] | undefined]>

  /**
   * Calls the open_proposal(pay)uint64 ABI method.
   *
   * Creates a new Proposal.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  openProposal(params?: CallParams<XGovRegistryArgs['obj']['open_proposal(pay)uint64'] | XGovRegistryArgs['tuple']['open_proposal(pay)uint64']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['open_proposal(pay)uint64'] | undefined]>

  /**
   * Calls the vote_proposal(uint64,address,uint64,uint64)void ABI method.
   *
   * Votes on a Proposal.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteProposal(params?: CallParams<XGovRegistryArgs['obj']['vote_proposal(uint64,address,uint64,uint64)void'] | XGovRegistryArgs['tuple']['vote_proposal(uint64,address,uint64,uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['vote_proposal(uint64,address,uint64,uint64)void'] | undefined]>

  /**
   * Calls the pay_grant_proposal(uint64)void ABI method.
   *
   * Disburses the funds for an approved Proposal.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payGrantProposal(params?: CallParams<XGovRegistryArgs['obj']['pay_grant_proposal(uint64)void'] | XGovRegistryArgs['tuple']['pay_grant_proposal(uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['pay_grant_proposal(uint64)void'] | undefined]>

  /**
   * Calls the decommission_proposal(uint64)void ABI method.
   *
   * Decommissions a Proposal.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  decommissionProposal(params?: CallParams<XGovRegistryArgs['obj']['decommission_proposal(uint64)void'] | XGovRegistryArgs['tuple']['decommission_proposal(uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['decommission_proposal(uint64)void'] | undefined]>

  /**
   * Calls the drop_proposal(uint64)void ABI method.
   *
   * Drops a Proposal.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dropProposal(params?: CallParams<XGovRegistryArgs['obj']['drop_proposal(uint64)void'] | XGovRegistryArgs['tuple']['drop_proposal(uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['drop_proposal(uint64)void'] | undefined]>

  /**
   * Calls the deposit_funds(pay)void ABI method.
   *
   * Deposits xGov program funds into the xGov Treasury (xGov Registry Account).
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositFunds(params?: CallParams<XGovRegistryArgs['obj']['deposit_funds(pay)void'] | XGovRegistryArgs['tuple']['deposit_funds(pay)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['deposit_funds(pay)void'] | undefined]>

  /**
   * Calls the withdraw_funds(uint64)void ABI method.
   *
   * Remove xGov program funds from the xGov Treasury (xGov Registry Account).
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawFunds(params?: CallParams<XGovRegistryArgs['obj']['withdraw_funds(uint64)void'] | XGovRegistryArgs['tuple']['withdraw_funds(uint64)void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['withdraw_funds(uint64)void'] | undefined]>

  /**
   * Calls the get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64) ABI method.
   *
   * Returns the xGov Registry state.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getState(params?: CallParams<XGovRegistryArgs['obj']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'] | XGovRegistryArgs['tuple']['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the XGovRegistry smart contract using the update_xgov_registry()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateXgovRegistry(params?: CallParams<XGovRegistryArgs['obj']['update_xgov_registry()void'] | XGovRegistryArgs['tuple']['update_xgov_registry()void']>): XGovRegistryComposer<[...TReturns, XGovRegistryReturns['update_xgov_registry()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the XGovRegistry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): XGovRegistryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): XGovRegistryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<XGovRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<XGovRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<XGovRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<XGovRegistryComposerResults<TReturns>>
}
export type XGovRegistryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

