/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"Proposal","structs":{"ProposalTypedGlobalState":[{"name":"proposer","type":"address"},{"name":"registryAppId","type":"uint64"},{"name":"title","type":"string"},{"name":"openTs","type":"uint64"},{"name":"submissionTs","type":"uint64"},{"name":"voteOpenTs","type":"uint64"},{"name":"status","type":"uint64"},{"name":"finalized","type":"bool"},{"name":"fundingCategory","type":"uint64"},{"name":"focus","type":"uint8"},{"name":"fundingType","type":"uint64"},{"name":"requestedAmount","type":"uint64"},{"name":"lockedAmount","type":"uint64"},{"name":"committeeId","type":"byte[32]"},{"name":"committeeMembers","type":"uint64"},{"name":"committeeVotes","type":"uint64"},{"name":"votedMembers","type":"uint64"},{"name":"approvals","type":"uint64"},{"name":"rejections","type":"uint64"},{"name":"nulls","type":"uint64"}]},"methods":[{"name":"create","desc":"Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.","args":[{"name":"proposer","type":"address","desc":"Address of the proposer"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"open","desc":"Open the first draft of the proposal.","args":[{"name":"payment","type":"pay","desc":"Commitment payment transaction from the proposer to the contract"},{"name":"title","type":"string","desc":"Proposal title, max TITLE_MAX_BYTES bytes"},{"name":"funding_type","type":"uint64","desc":"Funding type (Proactive / Retroactive)"},{"name":"requested_amount","type":"uint64","desc":"Requested amount in microAlgos"},{"name":"focus","type":"uint8","desc":"Proposal focus area"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"upload_metadata","desc":"Upload the proposal metadata.","args":[{"name":"payload","type":"byte[]","desc":"Metadata payload"},{"name":"is_first_in_group","type":"bool","desc":"True if this is the first upload call in a group transaction"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"drop","desc":"Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.","args":[],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"submit","desc":"submit the proposal.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"assign_voters","desc":"Assign multiple voters to the proposal.","args":[{"name":"voters","type":"(address,uint64)[]","desc":"List of voter addresses with their voting power"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"vote","desc":"Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.","args":[{"name":"voter","type":"address","desc":"Voter address"},{"name":"approvals","type":"uint64","desc":"Number of approvals"},{"name":"rejections","type":"uint64","desc":"Number of rejections"}],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"scrutiny","desc":"Scrutinize the proposal.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"review","desc":"Review the proposal.","args":[{"name":"block","type":"bool","desc":"Whether to block the proposal or not"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"fund","desc":"Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.","args":[],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"unassign_voters","desc":"Unassign voters from the proposal.","args":[{"name":"voters","type":"address[]","desc":"List of voters to be unassigned"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"finalize","desc":"Finalize the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.","args":[],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"delete","desc":"Delete the proposal.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"get_state","desc":"Get the proposal state.","args":[],"returns":{"type":"(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)","desc":"The proposal state","struct":"ProposalTypedGlobalState"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"op_up","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":20,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"approvals":{"key":"YXBwcm92YWxz","keyType":"AVMString","valueType":"AVMUint64"},"assigned_votes":{"key":"YXNzaWduZWRfdm90ZXM=","keyType":"AVMString","valueType":"AVMUint64"},"committee_id":{"key":"Y29tbWl0dGVlX2lk","keyType":"AVMString","valueType":"AVMBytes"},"committee_members":{"key":"Y29tbWl0dGVlX21lbWJlcnM=","keyType":"AVMString","valueType":"AVMUint64"},"committee_votes":{"key":"Y29tbWl0dGVlX3ZvdGVz","keyType":"AVMString","valueType":"AVMUint64"},"finalized":{"key":"ZmluYWxpemVk","keyType":"AVMString","valueType":"AVMUint64"},"focus":{"key":"Zm9jdXM=","keyType":"AVMString","valueType":"AVMUint64"},"funding_category":{"key":"ZnVuZGluZ19jYXRlZ29yeQ==","keyType":"AVMString","valueType":"AVMUint64"},"funding_type":{"key":"ZnVuZGluZ190eXBl","keyType":"AVMString","valueType":"AVMUint64"},"locked_amount":{"key":"bG9ja2VkX2Ftb3VudA==","keyType":"AVMString","valueType":"AVMUint64"},"metadata_uploaded":{"key":"bWV0YWRhdGFfdXBsb2FkZWQ=","keyType":"AVMString","valueType":"AVMUint64"},"nulls":{"key":"bnVsbHM=","keyType":"AVMString","valueType":"AVMUint64"},"open_ts":{"key":"b3Blbl90aW1lc3RhbXA=","keyType":"AVMString","valueType":"AVMUint64"},"proposer":{"key":"cHJvcG9zZXI=","keyType":"AVMString","valueType":"AVMBytes"},"registry_app_id":{"key":"cmVnaXN0cnlfYXBwX2lk","keyType":"AVMString","valueType":"AVMUint64"},"rejections":{"key":"cmVqZWN0aW9ucw==","keyType":"AVMString","valueType":"AVMUint64"},"requested_amount":{"key":"cmVxdWVzdGVkX2Ftb3VudA==","keyType":"AVMString","valueType":"AVMUint64"},"status":{"key":"c3RhdHVz","keyType":"AVMString","valueType":"AVMUint64"},"submission_ts":{"key":"c3VibWlzc2lvbl90aW1lc3RhbXA=","keyType":"AVMString","valueType":"AVMUint64"},"title":{"key":"dGl0bGU=","keyType":"AVMString","valueType":"AVMBytes"},"vote_open_ts":{"key":"dm90ZV9vcGVuaW5nX3RpbWVzdGFtcA==","keyType":"AVMString","valueType":"AVMUint64"},"voted_members":{"key":"dm90ZWRfbWVtYmVycw==","keyType":"AVMString","valueType":"AVMUint64"},"voters_count":{"key":"dm90ZXJzX2NvdW50","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ProposalTypedGlobalState = {
  proposer: string,
  registryAppId: bigint,
  title: string,
  openTs: bigint,
  submissionTs: bigint,
  voteOpenTs: bigint,
  status: bigint,
  finalized: boolean,
  fundingCategory: bigint,
  focus: number,
  fundingType: bigint,
  requestedAmount: bigint,
  lockedAmount: bigint,
  committeeId: Uint8Array,
  committeeMembers: bigint,
  committeeVotes: bigint,
  votedMembers: bigint,
  approvals: bigint,
  rejections: bigint,
  nulls: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalTypedGlobalState to the struct representation
 */
export function ProposalTypedGlobalStateFromTuple(abiTuple: [string, bigint, string, bigint, bigint, bigint, bigint, boolean, bigint, number, bigint, bigint, bigint, Uint8Array, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalTypedGlobalState, APP_SPEC.structs) as ProposalTypedGlobalState
}

/**
 * The argument types for the Proposal contract
 */
export type ProposalArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create(address)void': {
      /**
       * Address of the proposer
       */
      proposer: string
    }
    'open(pay,string,uint64,uint64,uint8)void': {
      /**
       * Commitment payment transaction from the proposer to the contract
       */
      payment: AppMethodCallTransactionArgument
      /**
       * Proposal title, max TITLE_MAX_BYTES bytes
       */
      title: string
      /**
       * Funding type (Proactive / Retroactive)
       */
      fundingType: bigint | number
      /**
       * Requested amount in microAlgos
       */
      requestedAmount: bigint | number
      /**
       * Proposal focus area
       */
      focus: bigint | number
    }
    'upload_metadata(byte[],bool)void': {
      /**
       * Metadata payload
       */
      payload: Uint8Array
      /**
       * True if this is the first upload call in a group transaction
       */
      isFirstInGroup: boolean
    }
    'drop()string': Record<string, never>
    'submit()void': Record<string, never>
    'assign_voters((address,uint64)[])void': {
      /**
       * List of voter addresses with their voting power
       */
      voters: [string, bigint | number][]
    }
    'vote(address,uint64,uint64)string': {
      /**
       * Voter address
       */
      voter: string
      /**
       * Number of approvals
       */
      approvals: bigint | number
      /**
       * Number of rejections
       */
      rejections: bigint | number
    }
    'scrutiny()void': Record<string, never>
    'review(bool)void': {
      /**
       * Whether to block the proposal or not
       */
      block: boolean
    }
    'fund()string': Record<string, never>
    'unassign_voters(address[])void': {
      /**
       * List of voters to be unassigned
       */
      voters: string[]
    }
    'finalize()string': Record<string, never>
    'delete()void': Record<string, never>
    'get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)': Record<string, never>
    'op_up()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create(address)void': [proposer: string]
    'open(pay,string,uint64,uint64,uint8)void': [payment: AppMethodCallTransactionArgument, title: string, fundingType: bigint | number, requestedAmount: bigint | number, focus: bigint | number]
    'upload_metadata(byte[],bool)void': [payload: Uint8Array, isFirstInGroup: boolean]
    'drop()string': []
    'submit()void': []
    'assign_voters((address,uint64)[])void': [voters: [string, bigint | number][]]
    'vote(address,uint64,uint64)string': [voter: string, approvals: bigint | number, rejections: bigint | number]
    'scrutiny()void': []
    'review(bool)void': [block: boolean]
    'fund()string': []
    'unassign_voters(address[])void': [voters: string[]]
    'finalize()string': []
    'delete()void': []
    'get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)': []
    'op_up()void': []
  }
}

/**
 * The return type for each method
 */
export type ProposalReturns = {
  'create(address)void': void
  'open(pay,string,uint64,uint64,uint8)void': void
  'upload_metadata(byte[],bool)void': void
  'drop()string': string
  'submit()void': void
  'assign_voters((address,uint64)[])void': void
  'vote(address,uint64,uint64)string': string
  'scrutiny()void': void
  'review(bool)void': void
  'fund()string': string
  'unassign_voters(address[])void': void
  'finalize()string': string
  'delete()void': void
  'get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)': ProposalTypedGlobalState
  'op_up()void': void
}

/**
 * Defines the types of available calls and state of the Proposal smart contract.
 */
export type ProposalTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(address)void' | 'create', {
      argsObj: ProposalArgs['obj']['create(address)void']
      argsTuple: ProposalArgs['tuple']['create(address)void']
      returns: ProposalReturns['create(address)void']
    }>
    & Record<'open(pay,string,uint64,uint64,uint8)void' | 'open', {
      argsObj: ProposalArgs['obj']['open(pay,string,uint64,uint64,uint8)void']
      argsTuple: ProposalArgs['tuple']['open(pay,string,uint64,uint64,uint8)void']
      returns: ProposalReturns['open(pay,string,uint64,uint64,uint8)void']
    }>
    & Record<'upload_metadata(byte[],bool)void' | 'upload_metadata', {
      argsObj: ProposalArgs['obj']['upload_metadata(byte[],bool)void']
      argsTuple: ProposalArgs['tuple']['upload_metadata(byte[],bool)void']
      returns: ProposalReturns['upload_metadata(byte[],bool)void']
    }>
    & Record<'drop()string' | 'drop', {
      argsObj: ProposalArgs['obj']['drop()string']
      argsTuple: ProposalArgs['tuple']['drop()string']
      returns: ProposalReturns['drop()string']
    }>
    & Record<'submit()void' | 'submit', {
      argsObj: ProposalArgs['obj']['submit()void']
      argsTuple: ProposalArgs['tuple']['submit()void']
      returns: ProposalReturns['submit()void']
    }>
    & Record<'assign_voters((address,uint64)[])void' | 'assign_voters', {
      argsObj: ProposalArgs['obj']['assign_voters((address,uint64)[])void']
      argsTuple: ProposalArgs['tuple']['assign_voters((address,uint64)[])void']
      returns: ProposalReturns['assign_voters((address,uint64)[])void']
    }>
    & Record<'vote(address,uint64,uint64)string' | 'vote', {
      argsObj: ProposalArgs['obj']['vote(address,uint64,uint64)string']
      argsTuple: ProposalArgs['tuple']['vote(address,uint64,uint64)string']
      returns: ProposalReturns['vote(address,uint64,uint64)string']
    }>
    & Record<'scrutiny()void' | 'scrutiny', {
      argsObj: ProposalArgs['obj']['scrutiny()void']
      argsTuple: ProposalArgs['tuple']['scrutiny()void']
      returns: ProposalReturns['scrutiny()void']
    }>
    & Record<'review(bool)void' | 'review', {
      argsObj: ProposalArgs['obj']['review(bool)void']
      argsTuple: ProposalArgs['tuple']['review(bool)void']
      returns: ProposalReturns['review(bool)void']
    }>
    & Record<'fund()string' | 'fund', {
      argsObj: ProposalArgs['obj']['fund()string']
      argsTuple: ProposalArgs['tuple']['fund()string']
      returns: ProposalReturns['fund()string']
    }>
    & Record<'unassign_voters(address[])void' | 'unassign_voters', {
      argsObj: ProposalArgs['obj']['unassign_voters(address[])void']
      argsTuple: ProposalArgs['tuple']['unassign_voters(address[])void']
      returns: ProposalReturns['unassign_voters(address[])void']
    }>
    & Record<'finalize()string' | 'finalize', {
      argsObj: ProposalArgs['obj']['finalize()string']
      argsTuple: ProposalArgs['tuple']['finalize()string']
      returns: ProposalReturns['finalize()string']
    }>
    & Record<'delete()void' | 'delete', {
      argsObj: ProposalArgs['obj']['delete()void']
      argsTuple: ProposalArgs['tuple']['delete()void']
      returns: ProposalReturns['delete()void']
    }>
    & Record<'get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)' | 'get_state', {
      argsObj: ProposalArgs['obj']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: ProposalArgs['tuple']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)']
      /**
       * The proposal state
       */
      returns: ProposalReturns['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'op_up()void' | 'op_up', {
      argsObj: ProposalArgs['obj']['op_up()void']
      argsTuple: ProposalArgs['tuple']['op_up()void']
      returns: ProposalReturns['op_up()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        approvals: bigint
        assignedVotes: bigint
        committeeId: BinaryState
        committeeMembers: bigint
        committeeVotes: bigint
        finalized: bigint
        focus: bigint
        fundingCategory: bigint
        fundingType: bigint
        lockedAmount: bigint
        metadataUploaded: bigint
        nulls: bigint
        openTs: bigint
        proposer: BinaryState
        registryAppId: bigint
        rejections: bigint
        requestedAmount: bigint
        status: bigint
        submissionTs: bigint
        title: BinaryState
        voteOpenTs: bigint
        votedMembers: bigint
        votersCount: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ProposalSignatures = keyof ProposalTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ProposalNonVoidMethodSignatures = keyof ProposalTypes['methods'] extends infer T ? T extends keyof ProposalTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Proposal smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ProposalSignatures> = ProposalTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Proposal smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ProposalSignatures> = ProposalTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ProposalTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ProposalCreateCallParams =
  | Expand<CallParams<ProposalArgs['obj']['create(address)void'] | ProposalArgs['tuple']['create(address)void']> & {method: 'create'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<ProposalArgs['obj']['create(address)void'] | ProposalArgs['tuple']['create(address)void']> & {method: 'create(address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type ProposalDeleteCallParams =
  | Expand<CallParams<ProposalArgs['obj']['delete()void'] | ProposalArgs['tuple']['delete()void']> & {method: 'delete'}>
  | Expand<CallParams<ProposalArgs['obj']['delete()void'] | ProposalArgs['tuple']['delete()void']> & {method: 'delete()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type ProposalDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ProposalCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: ProposalDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Proposal smart contract
 */
export abstract class ProposalParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends ProposalCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create':
          case 'create(address)void':
            return ProposalParamsFactory.create.create(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Proposal smart contract using the create(address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      create(params: CallParams<ProposalArgs['obj']['create(address)void'] | ProposalArgs['tuple']['create(address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create(address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.proposer],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends ProposalDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete':
          case 'delete()void':
            return ProposalParamsFactory.delete.delete(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the Proposal smart contract using the delete()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      delete(params: CallParams<ProposalArgs['obj']['delete()void'] | ProposalArgs['tuple']['delete()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the open(pay,string,uint64,uint64,uint8)void ABI method
   *
   * Open the first draft of the proposal.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static open(params: CallParams<ProposalArgs['obj']['open(pay,string,uint64,uint64,uint8)void'] | ProposalArgs['tuple']['open(pay,string,uint64,uint64,uint8)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'open(pay,string,uint64,uint64,uint8)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.title, params.args.fundingType, params.args.requestedAmount, params.args.focus],
    }
  }
  /**
   * Constructs a no op call for the upload_metadata(byte[],bool)void ABI method
   *
   * Upload the proposal metadata.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static uploadMetadata(params: CallParams<ProposalArgs['obj']['upload_metadata(byte[],bool)void'] | ProposalArgs['tuple']['upload_metadata(byte[],bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'upload_metadata(byte[],bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payload, params.args.isFirstInGroup],
    }
  }
  /**
   * Constructs a no op call for the drop()string ABI method
   *
   * Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static drop(params: CallParams<ProposalArgs['obj']['drop()string'] | ProposalArgs['tuple']['drop()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'drop()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the submit()void ABI method
   *
   * submit the proposal.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submit(params: CallParams<ProposalArgs['obj']['submit()void'] | ProposalArgs['tuple']['submit()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submit()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the assign_voters((address,uint64)[])void ABI method
   *
   * Assign multiple voters to the proposal.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assignVoters(params: CallParams<ProposalArgs['obj']['assign_voters((address,uint64)[])void'] | ProposalArgs['tuple']['assign_voters((address,uint64)[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assign_voters((address,uint64)[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.voters],
    }
  }
  /**
   * Constructs a no op call for the vote(address,uint64,uint64)string ABI method
   *
   * Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static vote(params: CallParams<ProposalArgs['obj']['vote(address,uint64,uint64)string'] | ProposalArgs['tuple']['vote(address,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote(address,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.voter, params.args.approvals, params.args.rejections],
    }
  }
  /**
   * Constructs a no op call for the scrutiny()void ABI method
   *
   * Scrutinize the proposal.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static scrutiny(params: CallParams<ProposalArgs['obj']['scrutiny()void'] | ProposalArgs['tuple']['scrutiny()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'scrutiny()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the review(bool)void ABI method
   *
   * Review the proposal.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static review(params: CallParams<ProposalArgs['obj']['review(bool)void'] | ProposalArgs['tuple']['review(bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'review(bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.block],
    }
  }
  /**
   * Constructs a no op call for the fund()string ABI method
   *
   * Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fund(params: CallParams<ProposalArgs['obj']['fund()string'] | ProposalArgs['tuple']['fund()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fund()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the unassign_voters(address[])void ABI method
   *
   * Unassign voters from the proposal.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unassignVoters(params: CallParams<ProposalArgs['obj']['unassign_voters(address[])void'] | ProposalArgs['tuple']['unassign_voters(address[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unassign_voters(address[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.voters],
    }
  }
  /**
   * Constructs a no op call for the finalize()string ABI method
   *
   * Finalize the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static finalize(params: CallParams<ProposalArgs['obj']['finalize()string'] | ProposalArgs['tuple']['finalize()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'finalize()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Get the proposal state.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getState(params: CallParams<ProposalArgs['obj']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)'] | ProposalArgs['tuple']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the op_up()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static opUp(params: CallParams<ProposalArgs['obj']['op_up()void'] | ProposalArgs['tuple']['op_up()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'op_up()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Proposal smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ProposalFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ProposalFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ProposalClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ProposalClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Proposal smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ProposalDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? ProposalParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (ProposalCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? ProposalParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (ProposalDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new ProposalClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Proposal smart contract using the create(address)void ABI method.
       *
       * Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      create: (params: CallParams<ProposalArgs['obj']['create(address)void'] | ProposalArgs['tuple']['create(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(ProposalParamsFactory.create.create(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the Proposal smart contract using the delete()void ABI method.
       *
       * Delete the proposal.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      delete: (params: CallParams<ProposalArgs['obj']['delete()void'] | ProposalArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(ProposalParamsFactory.delete.delete(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Proposal smart contract using the create(address)void ABI method.
       *
       * Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      create: (params: CallParams<ProposalArgs['obj']['create(address)void'] | ProposalArgs['tuple']['create(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(ProposalParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Proposal smart contract using an ABI method call using the create(address)void ABI method.
       *
       * Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      create: async (params: CallParams<ProposalArgs['obj']['create(address)void'] | ProposalArgs['tuple']['create(address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(ProposalParamsFactory.create.create(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | ProposalReturns['create(address)void']) }, appClient: new ProposalClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Proposal smart contract
 */
export class ProposalClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ProposalClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Proposal app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ProposalClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ProposalNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ProposalClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ProposalClient> {
    return new ProposalClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ProposalClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ProposalClient> {
    return new ProposalClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Proposal smart contract using the `delete()void` ABI method.
       *
       * Delete the proposal.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      delete: (params: CallParams<ProposalArgs['obj']['delete()void'] | ProposalArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appClient.params.delete(ProposalParamsFactory.delete.delete(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Proposal smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Proposal smart contract using the `open(pay,string,uint64,uint64,uint8)void` ABI method.
     *
     * Open the first draft of the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    open: (params: CallParams<ProposalArgs['obj']['open(pay,string,uint64,uint64,uint8)void'] | ProposalArgs['tuple']['open(pay,string,uint64,uint64,uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ProposalParamsFactory.open(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `upload_metadata(byte[],bool)void` ABI method.
     *
     * Upload the proposal metadata.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    uploadMetadata: (params: CallParams<ProposalArgs['obj']['upload_metadata(byte[],bool)void'] | ProposalArgs['tuple']['upload_metadata(byte[],bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ProposalParamsFactory.uploadMetadata(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `drop()string` ABI method.
     *
     * Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    drop: (params: CallParams<ProposalArgs['obj']['drop()string'] | ProposalArgs['tuple']['drop()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ProposalParamsFactory.drop(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `submit()void` ABI method.
     *
     * submit the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submit: (params: CallParams<ProposalArgs['obj']['submit()void'] | ProposalArgs['tuple']['submit()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ProposalParamsFactory.submit(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `assign_voters((address,uint64)[])void` ABI method.
     *
     * Assign multiple voters to the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assignVoters: (params: CallParams<ProposalArgs['obj']['assign_voters((address,uint64)[])void'] | ProposalArgs['tuple']['assign_voters((address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ProposalParamsFactory.assignVoters(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `vote(address,uint64,uint64)string` ABI method.
     *
     * Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    vote: (params: CallParams<ProposalArgs['obj']['vote(address,uint64,uint64)string'] | ProposalArgs['tuple']['vote(address,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ProposalParamsFactory.vote(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `scrutiny()void` ABI method.
     *
     * Scrutinize the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    scrutiny: (params: CallParams<ProposalArgs['obj']['scrutiny()void'] | ProposalArgs['tuple']['scrutiny()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ProposalParamsFactory.scrutiny(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `review(bool)void` ABI method.
     *
     * Review the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    review: (params: CallParams<ProposalArgs['obj']['review(bool)void'] | ProposalArgs['tuple']['review(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ProposalParamsFactory.review(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `fund()string` ABI method.
     *
     * Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fund: (params: CallParams<ProposalArgs['obj']['fund()string'] | ProposalArgs['tuple']['fund()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ProposalParamsFactory.fund(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `unassign_voters(address[])void` ABI method.
     *
     * Unassign voters from the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unassignVoters: (params: CallParams<ProposalArgs['obj']['unassign_voters(address[])void'] | ProposalArgs['tuple']['unassign_voters(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ProposalParamsFactory.unassignVoters(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `finalize()string` ABI method.
     *
     * Finalize the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    finalize: (params: CallParams<ProposalArgs['obj']['finalize()string'] | ProposalArgs['tuple']['finalize()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ProposalParamsFactory.finalize(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the proposal state.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The proposal state
     */
    getState: (params: CallParams<ProposalArgs['obj']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)'] | ProposalArgs['tuple']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ProposalParamsFactory.getState(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `op_up()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    opUp: (params: CallParams<ProposalArgs['obj']['op_up()void'] | ProposalArgs['tuple']['op_up()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ProposalParamsFactory.opUp(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Proposal smart contract using the `delete()void` ABI method.
       *
       * Delete the proposal.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      delete: (params: CallParams<ProposalArgs['obj']['delete()void'] | ProposalArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(ProposalParamsFactory.delete.delete(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Proposal smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Proposal smart contract using the `open(pay,string,uint64,uint64,uint8)void` ABI method.
     *
     * Open the first draft of the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    open: (params: CallParams<ProposalArgs['obj']['open(pay,string,uint64,uint64,uint8)void'] | ProposalArgs['tuple']['open(pay,string,uint64,uint64,uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ProposalParamsFactory.open(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `upload_metadata(byte[],bool)void` ABI method.
     *
     * Upload the proposal metadata.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    uploadMetadata: (params: CallParams<ProposalArgs['obj']['upload_metadata(byte[],bool)void'] | ProposalArgs['tuple']['upload_metadata(byte[],bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ProposalParamsFactory.uploadMetadata(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `drop()string` ABI method.
     *
     * Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    drop: (params: CallParams<ProposalArgs['obj']['drop()string'] | ProposalArgs['tuple']['drop()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ProposalParamsFactory.drop(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `submit()void` ABI method.
     *
     * submit the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submit: (params: CallParams<ProposalArgs['obj']['submit()void'] | ProposalArgs['tuple']['submit()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ProposalParamsFactory.submit(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `assign_voters((address,uint64)[])void` ABI method.
     *
     * Assign multiple voters to the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assignVoters: (params: CallParams<ProposalArgs['obj']['assign_voters((address,uint64)[])void'] | ProposalArgs['tuple']['assign_voters((address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ProposalParamsFactory.assignVoters(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `vote(address,uint64,uint64)string` ABI method.
     *
     * Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    vote: (params: CallParams<ProposalArgs['obj']['vote(address,uint64,uint64)string'] | ProposalArgs['tuple']['vote(address,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ProposalParamsFactory.vote(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `scrutiny()void` ABI method.
     *
     * Scrutinize the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    scrutiny: (params: CallParams<ProposalArgs['obj']['scrutiny()void'] | ProposalArgs['tuple']['scrutiny()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ProposalParamsFactory.scrutiny(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `review(bool)void` ABI method.
     *
     * Review the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    review: (params: CallParams<ProposalArgs['obj']['review(bool)void'] | ProposalArgs['tuple']['review(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ProposalParamsFactory.review(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `fund()string` ABI method.
     *
     * Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fund: (params: CallParams<ProposalArgs['obj']['fund()string'] | ProposalArgs['tuple']['fund()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ProposalParamsFactory.fund(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `unassign_voters(address[])void` ABI method.
     *
     * Unassign voters from the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unassignVoters: (params: CallParams<ProposalArgs['obj']['unassign_voters(address[])void'] | ProposalArgs['tuple']['unassign_voters(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ProposalParamsFactory.unassignVoters(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `finalize()string` ABI method.
     *
     * Finalize the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    finalize: (params: CallParams<ProposalArgs['obj']['finalize()string'] | ProposalArgs['tuple']['finalize()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ProposalParamsFactory.finalize(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the proposal state.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The proposal state
     */
    getState: (params: CallParams<ProposalArgs['obj']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)'] | ProposalArgs['tuple']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ProposalParamsFactory.getState(params))
    },

    /**
     * Makes a call to the Proposal smart contract using the `op_up()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    opUp: (params: CallParams<ProposalArgs['obj']['op_up()void'] | ProposalArgs['tuple']['op_up()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ProposalParamsFactory.opUp(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Proposal smart contract using the `delete()void` ABI method.
       *
       * Delete the proposal.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      delete: async (params: CallParams<ProposalArgs['obj']['delete()void'] | ProposalArgs['tuple']['delete()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(ProposalParamsFactory.delete.delete(params))
        return {...result, return: result.return as unknown as (undefined | ProposalReturns['delete()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Proposal smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Proposal smart contract using the `open(pay,string,uint64,uint64,uint8)void` ABI method.
     *
     * Open the first draft of the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    open: async (params: CallParams<ProposalArgs['obj']['open(pay,string,uint64,uint64,uint8)void'] | ProposalArgs['tuple']['open(pay,string,uint64,uint64,uint8)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ProposalParamsFactory.open(params))
      return {...result, return: result.return as unknown as (undefined | ProposalReturns['open(pay,string,uint64,uint64,uint8)void'])}
    },

    /**
     * Makes a call to the Proposal smart contract using the `upload_metadata(byte[],bool)void` ABI method.
     *
     * Upload the proposal metadata.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    uploadMetadata: async (params: CallParams<ProposalArgs['obj']['upload_metadata(byte[],bool)void'] | ProposalArgs['tuple']['upload_metadata(byte[],bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ProposalParamsFactory.uploadMetadata(params))
      return {...result, return: result.return as unknown as (undefined | ProposalReturns['upload_metadata(byte[],bool)void'])}
    },

    /**
     * Makes a call to the Proposal smart contract using the `drop()string` ABI method.
     *
     * Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    drop: async (params: CallParams<ProposalArgs['obj']['drop()string'] | ProposalArgs['tuple']['drop()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ProposalParamsFactory.drop(params))
      return {...result, return: result.return as unknown as (undefined | ProposalReturns['drop()string'])}
    },

    /**
     * Makes a call to the Proposal smart contract using the `submit()void` ABI method.
     *
     * submit the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submit: async (params: CallParams<ProposalArgs['obj']['submit()void'] | ProposalArgs['tuple']['submit()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ProposalParamsFactory.submit(params))
      return {...result, return: result.return as unknown as (undefined | ProposalReturns['submit()void'])}
    },

    /**
     * Makes a call to the Proposal smart contract using the `assign_voters((address,uint64)[])void` ABI method.
     *
     * Assign multiple voters to the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assignVoters: async (params: CallParams<ProposalArgs['obj']['assign_voters((address,uint64)[])void'] | ProposalArgs['tuple']['assign_voters((address,uint64)[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ProposalParamsFactory.assignVoters(params))
      return {...result, return: result.return as unknown as (undefined | ProposalReturns['assign_voters((address,uint64)[])void'])}
    },

    /**
     * Makes a call to the Proposal smart contract using the `vote(address,uint64,uint64)string` ABI method.
     *
     * Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    vote: async (params: CallParams<ProposalArgs['obj']['vote(address,uint64,uint64)string'] | ProposalArgs['tuple']['vote(address,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ProposalParamsFactory.vote(params))
      return {...result, return: result.return as unknown as (undefined | ProposalReturns['vote(address,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the Proposal smart contract using the `scrutiny()void` ABI method.
     *
     * Scrutinize the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    scrutiny: async (params: CallParams<ProposalArgs['obj']['scrutiny()void'] | ProposalArgs['tuple']['scrutiny()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ProposalParamsFactory.scrutiny(params))
      return {...result, return: result.return as unknown as (undefined | ProposalReturns['scrutiny()void'])}
    },

    /**
     * Makes a call to the Proposal smart contract using the `review(bool)void` ABI method.
     *
     * Review the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    review: async (params: CallParams<ProposalArgs['obj']['review(bool)void'] | ProposalArgs['tuple']['review(bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ProposalParamsFactory.review(params))
      return {...result, return: result.return as unknown as (undefined | ProposalReturns['review(bool)void'])}
    },

    /**
     * Makes a call to the Proposal smart contract using the `fund()string` ABI method.
     *
     * Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fund: async (params: CallParams<ProposalArgs['obj']['fund()string'] | ProposalArgs['tuple']['fund()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ProposalParamsFactory.fund(params))
      return {...result, return: result.return as unknown as (undefined | ProposalReturns['fund()string'])}
    },

    /**
     * Makes a call to the Proposal smart contract using the `unassign_voters(address[])void` ABI method.
     *
     * Unassign voters from the proposal.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unassignVoters: async (params: CallParams<ProposalArgs['obj']['unassign_voters(address[])void'] | ProposalArgs['tuple']['unassign_voters(address[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ProposalParamsFactory.unassignVoters(params))
      return {...result, return: result.return as unknown as (undefined | ProposalReturns['unassign_voters(address[])void'])}
    },

    /**
     * Makes a call to the Proposal smart contract using the `finalize()string` ABI method.
     *
     * Finalize the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    finalize: async (params: CallParams<ProposalArgs['obj']['finalize()string'] | ProposalArgs['tuple']['finalize()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ProposalParamsFactory.finalize(params))
      return {...result, return: result.return as unknown as (undefined | ProposalReturns['finalize()string'])}
    },

    /**
     * Makes a call to the Proposal smart contract using the `get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the proposal state.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The proposal state
     */
    getState: async (params: CallParams<ProposalArgs['obj']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)'] | ProposalArgs['tuple']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ProposalParamsFactory.getState(params))
      return {...result, return: result.return as unknown as (undefined | ProposalReturns['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the Proposal smart contract using the `op_up()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    opUp: async (params: CallParams<ProposalArgs['obj']['op_up()void'] | ProposalArgs['tuple']['op_up()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ProposalParamsFactory.opUp(params))
      return {...result, return: result.return as unknown as (undefined | ProposalReturns['op_up()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ProposalClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Proposal smart contract using the `get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get the proposal state.
   *
   * @param params The params for the smart contract call
   * @returns The call result: The proposal state
   */
  async getState(params: CallParams<ProposalArgs['obj']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)'] | ProposalArgs['tuple']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(ProposalParamsFactory.getState(params))
    return result.return as unknown as ProposalReturns['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)']
  }

  /**
   * Methods to access state for the current Proposal app
   */
  state = {
    /**
     * Methods to access global state for the current Proposal app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          approvals: result.approvals,
          assignedVotes: result.assigned_votes,
          committeeId: new BinaryStateValue(result.committee_id),
          committeeMembers: result.committee_members,
          committeeVotes: result.committee_votes,
          finalized: result.finalized,
          focus: result.focus,
          fundingCategory: result.funding_category,
          fundingType: result.funding_type,
          lockedAmount: result.locked_amount,
          metadataUploaded: result.metadata_uploaded,
          nulls: result.nulls,
          openTs: result.open_ts,
          proposer: new BinaryStateValue(result.proposer),
          registryAppId: result.registry_app_id,
          rejections: result.rejections,
          requestedAmount: result.requested_amount,
          status: result.status,
          submissionTs: result.submission_ts,
          title: new BinaryStateValue(result.title),
          voteOpenTs: result.vote_open_ts,
          votedMembers: result.voted_members,
          votersCount: result.voters_count,
        }
      },
      /**
       * Get the current value of the approvals key in global state
       */
      approvals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("approvals")) as bigint | undefined },
      /**
       * Get the current value of the assigned_votes key in global state
       */
      assignedVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assigned_votes")) as bigint | undefined },
      /**
       * Get the current value of the committee_id key in global state
       */
      committeeId: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("committee_id")) as Uint8Array | undefined) },
      /**
       * Get the current value of the committee_members key in global state
       */
      committeeMembers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("committee_members")) as bigint | undefined },
      /**
       * Get the current value of the committee_votes key in global state
       */
      committeeVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("committee_votes")) as bigint | undefined },
      /**
       * Get the current value of the finalized key in global state
       */
      finalized: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("finalized")) as bigint | undefined },
      /**
       * Get the current value of the focus key in global state
       */
      focus: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("focus")) as bigint | undefined },
      /**
       * Get the current value of the funding_category key in global state
       */
      fundingCategory: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("funding_category")) as bigint | undefined },
      /**
       * Get the current value of the funding_type key in global state
       */
      fundingType: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("funding_type")) as bigint | undefined },
      /**
       * Get the current value of the locked_amount key in global state
       */
      lockedAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("locked_amount")) as bigint | undefined },
      /**
       * Get the current value of the metadata_uploaded key in global state
       */
      metadataUploaded: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("metadata_uploaded")) as bigint | undefined },
      /**
       * Get the current value of the nulls key in global state
       */
      nulls: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nulls")) as bigint | undefined },
      /**
       * Get the current value of the open_ts key in global state
       */
      openTs: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("open_ts")) as bigint | undefined },
      /**
       * Get the current value of the proposer key in global state
       */
      proposer: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("proposer")) as Uint8Array | undefined) },
      /**
       * Get the current value of the registry_app_id key in global state
       */
      registryAppId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("registry_app_id")) as bigint | undefined },
      /**
       * Get the current value of the rejections key in global state
       */
      rejections: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rejections")) as bigint | undefined },
      /**
       * Get the current value of the requested_amount key in global state
       */
      requestedAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("requested_amount")) as bigint | undefined },
      /**
       * Get the current value of the status key in global state
       */
      status: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("status")) as bigint | undefined },
      /**
       * Get the current value of the submission_ts key in global state
       */
      submissionTs: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("submission_ts")) as bigint | undefined },
      /**
       * Get the current value of the title key in global state
       */
      title: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("title")) as Uint8Array | undefined) },
      /**
       * Get the current value of the vote_open_ts key in global state
       */
      voteOpenTs: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("vote_open_ts")) as bigint | undefined },
      /**
       * Get the current value of the voted_members key in global state
       */
      votedMembers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voted_members")) as bigint | undefined },
      /**
       * Get the current value of the voters_count key in global state
       */
      votersCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voters_count")) as bigint | undefined },
    },
  }

  public newGroup(): ProposalComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a open(pay,string,uint64,uint64,uint8)void method call against the Proposal contract
       */
      open(params: CallParams<ProposalArgs['obj']['open(pay,string,uint64,uint64,uint8)void'] | ProposalArgs['tuple']['open(pay,string,uint64,uint64,uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.open(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a upload_metadata(byte[],bool)void method call against the Proposal contract
       */
      uploadMetadata(params: CallParams<ProposalArgs['obj']['upload_metadata(byte[],bool)void'] | ProposalArgs['tuple']['upload_metadata(byte[],bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.uploadMetadata(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a drop()string method call against the Proposal contract
       */
      drop(params: CallParams<ProposalArgs['obj']['drop()string'] | ProposalArgs['tuple']['drop()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.drop(params)))
        resultMappers.push((v) => client.decodeReturnValue('drop()string', v))
        return this
      },
      /**
       * Add a submit()void method call against the Proposal contract
       */
      submit(params: CallParams<ProposalArgs['obj']['submit()void'] | ProposalArgs['tuple']['submit()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a assign_voters((address,uint64)[])void method call against the Proposal contract
       */
      assignVoters(params: CallParams<ProposalArgs['obj']['assign_voters((address,uint64)[])void'] | ProposalArgs['tuple']['assign_voters((address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assignVoters(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a vote(address,uint64,uint64)string method call against the Proposal contract
       */
      vote(params: CallParams<ProposalArgs['obj']['vote(address,uint64,uint64)string'] | ProposalArgs['tuple']['vote(address,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.vote(params)))
        resultMappers.push((v) => client.decodeReturnValue('vote(address,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a scrutiny()void method call against the Proposal contract
       */
      scrutiny(params: CallParams<ProposalArgs['obj']['scrutiny()void'] | ProposalArgs['tuple']['scrutiny()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.scrutiny(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a review(bool)void method call against the Proposal contract
       */
      review(params: CallParams<ProposalArgs['obj']['review(bool)void'] | ProposalArgs['tuple']['review(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.review(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a fund()string method call against the Proposal contract
       */
      fund(params: CallParams<ProposalArgs['obj']['fund()string'] | ProposalArgs['tuple']['fund()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fund(params)))
        resultMappers.push((v) => client.decodeReturnValue('fund()string', v))
        return this
      },
      /**
       * Add a unassign_voters(address[])void method call against the Proposal contract
       */
      unassignVoters(params: CallParams<ProposalArgs['obj']['unassign_voters(address[])void'] | ProposalArgs['tuple']['unassign_voters(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unassignVoters(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a finalize()string method call against the Proposal contract
       */
      finalize(params: CallParams<ProposalArgs['obj']['finalize()string'] | ProposalArgs['tuple']['finalize()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.finalize(params)))
        resultMappers.push((v) => client.decodeReturnValue('finalize()string', v))
        return this
      },
      /**
       * Add a get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64) method call against the Proposal contract
       */
      getState(params: CallParams<ProposalArgs['obj']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)'] | ProposalArgs['tuple']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getState(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a op_up()void method call against the Proposal contract
       */
      opUp(params: CallParams<ProposalArgs['obj']['op_up()void'] | ProposalArgs['tuple']['op_up()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.opUp(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          delete: (params: CallParams<ProposalArgs['obj']['delete()void'] | ProposalArgs['tuple']['delete()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.delete(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Proposal contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ProposalComposer
  }
}
export type ProposalComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the open(pay,string,uint64,uint64,uint8)void ABI method.
   *
   * Open the first draft of the proposal.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  open(params?: CallParams<ProposalArgs['obj']['open(pay,string,uint64,uint64,uint8)void'] | ProposalArgs['tuple']['open(pay,string,uint64,uint64,uint8)void']>): ProposalComposer<[...TReturns, ProposalReturns['open(pay,string,uint64,uint64,uint8)void'] | undefined]>

  /**
   * Calls the upload_metadata(byte[],bool)void ABI method.
   *
   * Upload the proposal metadata.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  uploadMetadata(params?: CallParams<ProposalArgs['obj']['upload_metadata(byte[],bool)void'] | ProposalArgs['tuple']['upload_metadata(byte[],bool)void']>): ProposalComposer<[...TReturns, ProposalReturns['upload_metadata(byte[],bool)void'] | undefined]>

  /**
   * Calls the drop()string ABI method.
   *
   * Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  drop(params?: CallParams<ProposalArgs['obj']['drop()string'] | ProposalArgs['tuple']['drop()string']>): ProposalComposer<[...TReturns, ProposalReturns['drop()string'] | undefined]>

  /**
   * Calls the submit()void ABI method.
   *
   * submit the proposal.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submit(params?: CallParams<ProposalArgs['obj']['submit()void'] | ProposalArgs['tuple']['submit()void']>): ProposalComposer<[...TReturns, ProposalReturns['submit()void'] | undefined]>

  /**
   * Calls the assign_voters((address,uint64)[])void ABI method.
   *
   * Assign multiple voters to the proposal.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assignVoters(params?: CallParams<ProposalArgs['obj']['assign_voters((address,uint64)[])void'] | ProposalArgs['tuple']['assign_voters((address,uint64)[])void']>): ProposalComposer<[...TReturns, ProposalReturns['assign_voters((address,uint64)[])void'] | undefined]>

  /**
   * Calls the vote(address,uint64,uint64)string ABI method.
   *
   * Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vote(params?: CallParams<ProposalArgs['obj']['vote(address,uint64,uint64)string'] | ProposalArgs['tuple']['vote(address,uint64,uint64)string']>): ProposalComposer<[...TReturns, ProposalReturns['vote(address,uint64,uint64)string'] | undefined]>

  /**
   * Calls the scrutiny()void ABI method.
   *
   * Scrutinize the proposal.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  scrutiny(params?: CallParams<ProposalArgs['obj']['scrutiny()void'] | ProposalArgs['tuple']['scrutiny()void']>): ProposalComposer<[...TReturns, ProposalReturns['scrutiny()void'] | undefined]>

  /**
   * Calls the review(bool)void ABI method.
   *
   * Review the proposal.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  review(params?: CallParams<ProposalArgs['obj']['review(bool)void'] | ProposalArgs['tuple']['review(bool)void']>): ProposalComposer<[...TReturns, ProposalReturns['review(bool)void'] | undefined]>

  /**
   * Calls the fund()string ABI method.
   *
   * Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fund(params?: CallParams<ProposalArgs['obj']['fund()string'] | ProposalArgs['tuple']['fund()string']>): ProposalComposer<[...TReturns, ProposalReturns['fund()string'] | undefined]>

  /**
   * Calls the unassign_voters(address[])void ABI method.
   *
   * Unassign voters from the proposal.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unassignVoters(params?: CallParams<ProposalArgs['obj']['unassign_voters(address[])void'] | ProposalArgs['tuple']['unassign_voters(address[])void']>): ProposalComposer<[...TReturns, ProposalReturns['unassign_voters(address[])void'] | undefined]>

  /**
   * Calls the finalize()string ABI method.
   *
   * Finalize the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  finalize(params?: CallParams<ProposalArgs['obj']['finalize()string'] | ProposalArgs['tuple']['finalize()string']>): ProposalComposer<[...TReturns, ProposalReturns['finalize()string'] | undefined]>

  /**
   * Calls the get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Get the proposal state.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getState(params?: CallParams<ProposalArgs['obj']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)'] | ProposalArgs['tuple']['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)']>): ProposalComposer<[...TReturns, ProposalReturns['get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the op_up()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  opUp(params?: CallParams<ProposalArgs['obj']['op_up()void'] | ProposalArgs['tuple']['op_up()void']>): ProposalComposer<[...TReturns, ProposalReturns['op_up()void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Proposal smart contract using the delete()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    delete(params?: CallParams<ProposalArgs['obj']['delete()void'] | ProposalArgs['tuple']['delete()void']>): ProposalComposer<[...TReturns, ProposalReturns['delete()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Proposal smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ProposalComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ProposalComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ProposalComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ProposalComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ProposalComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ProposalComposerResults<TReturns>>
}
export type ProposalComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

